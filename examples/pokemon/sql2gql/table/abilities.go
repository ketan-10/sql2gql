// Code generated by sql2gql. DO NOT EDIT.

package table

import (
	"database/sql"

	sq "github.com/elgris/sqrl"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/pkg/errors"
)

type Abilities struct {
	ID          int          `json:"id" db:"id"`
	AbilityName string       `json:"ability_name" db:"ability_name"`
	Active      bool         `json:"active" db:"active"`
	CreatedAt   sql.NullTime `json:"created_at" db:"created_at"`
	UpdatedAt   sql.NullTime `json:"updated_at" db:"updated_at"`
}

type AbilitiesFilter struct {
	ID          internal.FilterOnField
	AbilityName internal.FilterOnField
	Active      internal.FilterOnField
	CreatedAt   internal.FilterOnField
	UpdatedAt   internal.FilterOnField
	Wheres      []sq.Sqlizer
	Joins       []sq.Sqlizer
	LeftJoins   []sq.Sqlizer
	GroupBys    []string
	Havings     []sq.Sqlizer
}

func (f *AbilitiesFilter) NewFilter() interface{} {
	if f == nil {
		return &AbilitiesFilter{}
	}
	return f
}

func (f *AbilitiesFilter) TableName() string {
	return "`abilities`"
}

func (f *AbilitiesFilter) ModuleName() string {
	return "abilities"
}

func (f *AbilitiesFilter) IsNil() bool {
	return f == nil
}
func (f *AbilitiesFilter) AddID(filterType internal.FilterType, v interface{}) {
	f.ID = append(f.ID, map[internal.FilterType]interface{}{filterType: v})
}
func (f *AbilitiesFilter) AddAbilityName(filterType internal.FilterType, v interface{}) {
	f.AbilityName = append(f.AbilityName, map[internal.FilterType]interface{}{filterType: v})
}
func (f *AbilitiesFilter) AddActive(filterType internal.FilterType, v interface{}) {
	f.Active = append(f.Active, map[internal.FilterType]interface{}{filterType: v})
}
func (f *AbilitiesFilter) AddCreatedAt(filterType internal.FilterType, v interface{}) {
	f.CreatedAt = append(f.CreatedAt, map[internal.FilterType]interface{}{filterType: v})
}
func (f *AbilitiesFilter) AddUpdatedAt(filterType internal.FilterType, v interface{}) {
	f.UpdatedAt = append(f.UpdatedAt, map[internal.FilterType]interface{}{filterType: v})
}

func (f *AbilitiesFilter) Where(v sq.Sqlizer) *AbilitiesFilter {
	f.Wheres = append(f.Wheres, v)
	return f
}

func (f *AbilitiesFilter) Join(j sq.Sqlizer) *AbilitiesFilter {
	f.Joins = append(f.Joins, j)
	return f
}

func (f *AbilitiesFilter) LeftJoin(j sq.Sqlizer) *AbilitiesFilter {
	f.LeftJoins = append(f.LeftJoins, j)
	return f
}

func (f *AbilitiesFilter) GroupBy(gb string) *AbilitiesFilter {
	f.GroupBys = append(f.GroupBys, gb)
	return f
}

func (f *AbilitiesFilter) Having(h sq.Sqlizer) *AbilitiesFilter {
	f.Havings = append(f.Havings, h)
	return f
}

type AbilitiesCreate struct {
	AbilityName string `json:"ability_name" db:"ability_name"`
}

// TODO: We have to exclude AutoGenerated fields
// For now I am keeping it in, as not sure how it affects
type AbilitiesUpdate struct {
	AbilityName *string // ability_name
	Active      *bool   // active
}

// helper functions
func (u *AbilitiesUpdate) ToAbilitiesCreate() (res AbilitiesCreate, err error) {
	if u.AbilityName != nil {
		res.AbilityName = *u.AbilityName
	} else {
		return res, errors.New("Value Can not be NULL")
	}
	return res, nil
}

type ListAbilities struct {
	TotalCount int
	Data       []Abilities
}

func (l *ListAbilities) GetAllID() []int {
	var res []int
	for _, item := range l.Data {
		res = append(res, item.ID)
	}
	return res
}
func (l *ListAbilities) GetAllAbilityName() []string {
	var res []string
	for _, item := range l.Data {
		res = append(res, item.AbilityName)
	}
	return res
}
func (l *ListAbilities) GetAllActive() []bool {
	var res []bool
	for _, item := range l.Data {
		res = append(res, item.Active)
	}
	return res
}
func (l *ListAbilities) GetAllCreatedAt() []sql.NullTime {
	var res []sql.NullTime
	for _, item := range l.Data {
		res = append(res, item.CreatedAt)
	}
	return res
}
func (l *ListAbilities) GetAllUpdatedAt() []sql.NullTime {
	var res []sql.NullTime
	for _, item := range l.Data {
		res = append(res, item.UpdatedAt)
	}
	return res
}

func (l *ListAbilities) Filter(f func(item Abilities) bool) (res ListAbilities) {
	for _, item := range l.Data {
		if f(item) {
			res.Data = append(res.Data, item)
		}
	}
	res.TotalCount = len(res.Data)
	return res
}

func (l *ListAbilities) Find(f func(item Abilities) bool) (res Abilities, found bool) {
	for _, item := range l.Data {
		if f(item) {
			return item, true
		}
	}
	return Abilities{}, false
}

func (l *ListAbilities) MapByAbilityName() (m map[string]ListAbilities) {
	m = make(map[string]ListAbilities)
	for _, item := range l.Data {
		list := m[item.AbilityName]
		list.Data = append(list.Data, item)

		m[item.AbilityName] = list
	}
	for k, v := range m {
		v.TotalCount = len(v.Data)
		m[k] = v
	}
	return m
}

func (l *ListAbilities) MapByID() (m map[int]Abilities) {
	m = make(map[int]Abilities, len(l.Data))
	for _, item := range l.Data {
		m[item.ID] = item
	}
	return m
}
