// Code generated by sql2gql. DO NOT EDIT.

package table

import (
	"database/sql"

	sq "github.com/elgris/sqrl"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/pkg/errors"
)

type Pokemon struct {
	ID                    int           `json:"id" db:"id"`
	PokemonName           string        `json:"pokemon_name" db:"pokemon_name"`
	PokemonHeight         sql.NullInt64 `json:"pokemon_height" db:"pokemon_height"`
	PokemonWeight         sql.NullInt64 `json:"pokemon_weight" db:"pokemon_weight"`
	PokemonBaseExperience sql.NullInt64 `json:"pokemon_base_experience" db:"pokemon_base_experience"`
	Active                bool          `json:"active" db:"active"`
	CreatedAt             sql.NullTime  `json:"created_at" db:"created_at"`
	UpdatedAt             sql.NullTime  `json:"updated_at" db:"updated_at"`
}

type PokemonFilter struct {
	ID                    internal.FilterOnField
	PokemonName           internal.FilterOnField
	PokemonHeight         internal.FilterOnField
	PokemonWeight         internal.FilterOnField
	PokemonBaseExperience internal.FilterOnField
	Active                internal.FilterOnField
	CreatedAt             internal.FilterOnField
	UpdatedAt             internal.FilterOnField
	Wheres                []sq.Sqlizer
	Joins                 []sq.Sqlizer
	LeftJoins             []sq.Sqlizer
	GroupBys              []string
	Havings               []sq.Sqlizer
}

func (f *PokemonFilter) NewFilter() interface{} {
	if f == nil {
		return &PokemonFilter{}
	}
	return f
}

func (f *PokemonFilter) TableName() string {
	return "`pokemon`"
}

func (f *PokemonFilter) ModuleName() string {
	return "pokemon"
}

func (f *PokemonFilter) IsNil() bool {
	return f == nil
}
func (f *PokemonFilter) AddID(filterType internal.FilterType, v interface{}) {
	f.ID = append(f.ID, map[internal.FilterType]interface{}{filterType: v})
}
func (f *PokemonFilter) AddPokemonName(filterType internal.FilterType, v interface{}) {
	f.PokemonName = append(f.PokemonName, map[internal.FilterType]interface{}{filterType: v})
}
func (f *PokemonFilter) AddPokemonHeight(filterType internal.FilterType, v interface{}) {
	f.PokemonHeight = append(f.PokemonHeight, map[internal.FilterType]interface{}{filterType: v})
}
func (f *PokemonFilter) AddPokemonWeight(filterType internal.FilterType, v interface{}) {
	f.PokemonWeight = append(f.PokemonWeight, map[internal.FilterType]interface{}{filterType: v})
}
func (f *PokemonFilter) AddPokemonBaseExperience(filterType internal.FilterType, v interface{}) {
	f.PokemonBaseExperience = append(f.PokemonBaseExperience, map[internal.FilterType]interface{}{filterType: v})
}
func (f *PokemonFilter) AddActive(filterType internal.FilterType, v interface{}) {
	f.Active = append(f.Active, map[internal.FilterType]interface{}{filterType: v})
}
func (f *PokemonFilter) AddCreatedAt(filterType internal.FilterType, v interface{}) {
	f.CreatedAt = append(f.CreatedAt, map[internal.FilterType]interface{}{filterType: v})
}
func (f *PokemonFilter) AddUpdatedAt(filterType internal.FilterType, v interface{}) {
	f.UpdatedAt = append(f.UpdatedAt, map[internal.FilterType]interface{}{filterType: v})
}

func (f *PokemonFilter) Where(v sq.Sqlizer) *PokemonFilter {
	f.Wheres = append(f.Wheres, v)
	return f
}

func (f *PokemonFilter) Join(j sq.Sqlizer) *PokemonFilter {
	f.Joins = append(f.Joins, j)
	return f
}

func (f *PokemonFilter) LeftJoin(j sq.Sqlizer) *PokemonFilter {
	f.LeftJoins = append(f.LeftJoins, j)
	return f
}

func (f *PokemonFilter) GroupBy(gb string) *PokemonFilter {
	f.GroupBys = append(f.GroupBys, gb)
	return f
}

func (f *PokemonFilter) Having(h sq.Sqlizer) *PokemonFilter {
	f.Havings = append(f.Havings, h)
	return f
}

type PokemonCreate struct {
	PokemonName           string        `json:"pokemon_name" db:"pokemon_name"`
	PokemonHeight         sql.NullInt64 `json:"pokemon_height" db:"pokemon_height"`
	PokemonWeight         sql.NullInt64 `json:"pokemon_weight" db:"pokemon_weight"`
	PokemonBaseExperience sql.NullInt64 `json:"pokemon_base_experience" db:"pokemon_base_experience"`
}

// TODO: We have to exclude AutoGenerated fields
// For now I am keeping it in, as not sure how it affects
type PokemonUpdate struct {
	PokemonName           *string        // pokemon_name
	PokemonHeight         *sql.NullInt64 // pokemon_height
	PokemonWeight         *sql.NullInt64 // pokemon_weight
	PokemonBaseExperience *sql.NullInt64 // pokemon_base_experience
	Active                *bool          // active
}

// helper functions
func (u *PokemonUpdate) ToPokemonCreate() (res PokemonCreate, err error) {
	if u.PokemonName != nil {
		res.PokemonName = *u.PokemonName
	} else {
		return res, errors.New("Value Can not be NULL")
	}
	if u.PokemonHeight != nil {
		res.PokemonHeight = *u.PokemonHeight
	}
	if u.PokemonWeight != nil {
		res.PokemonWeight = *u.PokemonWeight
	}
	if u.PokemonBaseExperience != nil {
		res.PokemonBaseExperience = *u.PokemonBaseExperience
	}
	return res, nil
}

type ListPokemon struct {
	TotalCount int
	Data       []Pokemon
}

func (l *ListPokemon) GetAllID() []int {
	var res []int
	for _, item := range l.Data {
		res = append(res, item.ID)
	}
	return res
}
func (l *ListPokemon) GetAllPokemonName() []string {
	var res []string
	for _, item := range l.Data {
		res = append(res, item.PokemonName)
	}
	return res
}
func (l *ListPokemon) GetAllPokemonHeight() []sql.NullInt64 {
	var res []sql.NullInt64
	for _, item := range l.Data {
		res = append(res, item.PokemonHeight)
	}
	return res
}
func (l *ListPokemon) GetAllPokemonWeight() []sql.NullInt64 {
	var res []sql.NullInt64
	for _, item := range l.Data {
		res = append(res, item.PokemonWeight)
	}
	return res
}
func (l *ListPokemon) GetAllPokemonBaseExperience() []sql.NullInt64 {
	var res []sql.NullInt64
	for _, item := range l.Data {
		res = append(res, item.PokemonBaseExperience)
	}
	return res
}
func (l *ListPokemon) GetAllActive() []bool {
	var res []bool
	for _, item := range l.Data {
		res = append(res, item.Active)
	}
	return res
}
func (l *ListPokemon) GetAllCreatedAt() []sql.NullTime {
	var res []sql.NullTime
	for _, item := range l.Data {
		res = append(res, item.CreatedAt)
	}
	return res
}
func (l *ListPokemon) GetAllUpdatedAt() []sql.NullTime {
	var res []sql.NullTime
	for _, item := range l.Data {
		res = append(res, item.UpdatedAt)
	}
	return res
}

func (l *ListPokemon) Filter(f func(item Pokemon) bool) (res ListPokemon) {
	for _, item := range l.Data {
		if f(item) {
			res.Data = append(res.Data, item)
		}
	}
	res.TotalCount = len(res.Data)
	return res
}

func (l *ListPokemon) Find(f func(item Pokemon) bool) (res Pokemon, found bool) {
	for _, item := range l.Data {
		if f(item) {
			return item, true
		}
	}
	return Pokemon{}, false
}

func (l *ListPokemon) MapByPokemonName() (m map[string]ListPokemon) {
	m = make(map[string]ListPokemon)
	for _, item := range l.Data {
		list := m[item.PokemonName]
		list.Data = append(list.Data, item)

		m[item.PokemonName] = list
	}
	for k, v := range m {
		v.TotalCount = len(v.Data)
		m[k] = v
	}
	return m
}

func (l *ListPokemon) MapByID() (m map[int]Pokemon) {
	m = make(map[int]Pokemon, len(l.Data))
	for _, item := range l.Data {
		m[item.ID] = item
	}
	return m
}
