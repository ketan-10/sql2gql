// Code generated by sql2gql. DO NOT EDIT.

package table

import (
	"database/sql"

	sq "github.com/elgris/sqrl"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/pkg/errors"
)

type PokemonEvolution struct {
	ID               int           `json:"id" db:"id"`
	EvolvedSpeciesID int           `json:"evolved_species_id" db:"evolved_species_id"`
	EvolMinimumLevel sql.NullInt64 `json:"evol_minimum_level" db:"evol_minimum_level"`
	Active           bool          `json:"active" db:"active"`
	CreatedAt        sql.NullTime  `json:"created_at" db:"created_at"`
	UpdatedAt        sql.NullTime  `json:"updated_at" db:"updated_at"`
}

type PokemonEvolutionFilter struct {
	ID               internal.FilterOnField
	EvolvedSpeciesID internal.FilterOnField
	EvolMinimumLevel internal.FilterOnField
	Active           internal.FilterOnField
	CreatedAt        internal.FilterOnField
	UpdatedAt        internal.FilterOnField
	Wheres           []sq.Sqlizer
	Joins            []sq.Sqlizer
	LeftJoins        []sq.Sqlizer
	GroupBys         []string
	Havings          []sq.Sqlizer
}

func (f *PokemonEvolutionFilter) NewFilter() interface{} {
	if f == nil {
		return &PokemonEvolutionFilter{}
	}
	return f
}

func (f *PokemonEvolutionFilter) TableName() string {
	return "`pokemon_evolution`"
}

func (f *PokemonEvolutionFilter) ModuleName() string {
	return "pokemon_evolution"
}

func (f *PokemonEvolutionFilter) IsNil() bool {
	return f == nil
}
func (f *PokemonEvolutionFilter) AddID(filterType internal.FilterType, v interface{}) {
	f.ID = append(f.ID, map[internal.FilterType]interface{}{filterType: v})
}
func (f *PokemonEvolutionFilter) AddEvolvedSpeciesID(filterType internal.FilterType, v interface{}) {
	f.EvolvedSpeciesID = append(f.EvolvedSpeciesID, map[internal.FilterType]interface{}{filterType: v})
}
func (f *PokemonEvolutionFilter) AddEvolMinimumLevel(filterType internal.FilterType, v interface{}) {
	f.EvolMinimumLevel = append(f.EvolMinimumLevel, map[internal.FilterType]interface{}{filterType: v})
}
func (f *PokemonEvolutionFilter) AddActive(filterType internal.FilterType, v interface{}) {
	f.Active = append(f.Active, map[internal.FilterType]interface{}{filterType: v})
}
func (f *PokemonEvolutionFilter) AddCreatedAt(filterType internal.FilterType, v interface{}) {
	f.CreatedAt = append(f.CreatedAt, map[internal.FilterType]interface{}{filterType: v})
}
func (f *PokemonEvolutionFilter) AddUpdatedAt(filterType internal.FilterType, v interface{}) {
	f.UpdatedAt = append(f.UpdatedAt, map[internal.FilterType]interface{}{filterType: v})
}

func (f *PokemonEvolutionFilter) Where(v sq.Sqlizer) *PokemonEvolutionFilter {
	f.Wheres = append(f.Wheres, v)
	return f
}

func (f *PokemonEvolutionFilter) Join(j sq.Sqlizer) *PokemonEvolutionFilter {
	f.Joins = append(f.Joins, j)
	return f
}

func (f *PokemonEvolutionFilter) LeftJoin(j sq.Sqlizer) *PokemonEvolutionFilter {
	f.LeftJoins = append(f.LeftJoins, j)
	return f
}

func (f *PokemonEvolutionFilter) GroupBy(gb string) *PokemonEvolutionFilter {
	f.GroupBys = append(f.GroupBys, gb)
	return f
}

func (f *PokemonEvolutionFilter) Having(h sq.Sqlizer) *PokemonEvolutionFilter {
	f.Havings = append(f.Havings, h)
	return f
}

type PokemonEvolutionCreate struct {
	EvolvedSpeciesID int           `json:"evolved_species_id" db:"evolved_species_id"`
	EvolMinimumLevel sql.NullInt64 `json:"evol_minimum_level" db:"evol_minimum_level"`
}

// TODO: We have to exclude AutoGenerated fields
// For now I am keeping it in, as not sure how it affects
type PokemonEvolutionUpdate struct {
	EvolvedSpeciesID *int           // evolved_species_id
	EvolMinimumLevel *sql.NullInt64 // evol_minimum_level
	Active           *bool          // active
}

// helper functions
func (u *PokemonEvolutionUpdate) ToPokemonEvolutionCreate() (res PokemonEvolutionCreate, err error) {
	if u.EvolvedSpeciesID != nil {
		res.EvolvedSpeciesID = *u.EvolvedSpeciesID
	} else {
		return res, errors.New("Value Can not be NULL")
	}
	if u.EvolMinimumLevel != nil {
		res.EvolMinimumLevel = *u.EvolMinimumLevel
	}
	return res, nil
}

type ListPokemonEvolution struct {
	TotalCount int
	Data       []PokemonEvolution
}

func (l *ListPokemonEvolution) GetAllID() []int {
	var res []int
	for _, item := range l.Data {
		res = append(res, item.ID)
	}
	return res
}
func (l *ListPokemonEvolution) GetAllEvolvedSpeciesID() []int {
	var res []int
	for _, item := range l.Data {
		res = append(res, item.EvolvedSpeciesID)
	}
	return res
}
func (l *ListPokemonEvolution) GetAllEvolMinimumLevel() []sql.NullInt64 {
	var res []sql.NullInt64
	for _, item := range l.Data {
		res = append(res, item.EvolMinimumLevel)
	}
	return res
}
func (l *ListPokemonEvolution) GetAllActive() []bool {
	var res []bool
	for _, item := range l.Data {
		res = append(res, item.Active)
	}
	return res
}
func (l *ListPokemonEvolution) GetAllCreatedAt() []sql.NullTime {
	var res []sql.NullTime
	for _, item := range l.Data {
		res = append(res, item.CreatedAt)
	}
	return res
}
func (l *ListPokemonEvolution) GetAllUpdatedAt() []sql.NullTime {
	var res []sql.NullTime
	for _, item := range l.Data {
		res = append(res, item.UpdatedAt)
	}
	return res
}

func (l *ListPokemonEvolution) Filter(f func(item PokemonEvolution) bool) (res ListPokemonEvolution) {
	for _, item := range l.Data {
		if f(item) {
			res.Data = append(res.Data, item)
		}
	}
	res.TotalCount = len(res.Data)
	return res
}

func (l *ListPokemonEvolution) Find(f func(item PokemonEvolution) bool) (res PokemonEvolution, found bool) {
	for _, item := range l.Data {
		if f(item) {
			return item, true
		}
	}
	return PokemonEvolution{}, false
}
func (l *ListPokemonEvolution) MapByID() (m map[int]PokemonEvolution) {
	m = make(map[int]PokemonEvolution, len(l.Data))
	for _, item := range l.Data {
		m[item.ID] = item
	}
	return m
}

func (l *ListPokemonEvolution) MapByEvolvedSpeciesID() (m map[int]ListPokemonEvolution) {
	m = make(map[int]ListPokemonEvolution)
	for _, item := range l.Data {
		list := m[item.EvolvedSpeciesID]
		list.Data = append(list.Data, item)

		m[item.EvolvedSpeciesID] = list
	}
	for k, v := range m {
		v.TotalCount = len(v.Data)
		m[k] = v
	}
	return m
}
