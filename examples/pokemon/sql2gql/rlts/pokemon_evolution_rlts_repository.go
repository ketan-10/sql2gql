// Code generated by sql2gql. DO NOT EDIT.

package rlts

import (
	"context"

	"github.com/google/wire"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/repo"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/table"
)

type IPokemonEvolutionRltsRepository interface {

	// This Table Pointing to Other Table!!!, ManyToOne <- As Many records from other table can point to this table one record
	PokemonEvolutionMatchupThroughEvolvedSpeciesID(ctx context.Context, obj *table.PokemonEvolution, filter *table.PokemonEvolutionMatchupFilter) (*table.PokemonEvolutionMatchup, error)

	//  Other Table Pointing to This Table!!!, OneToMany <- As This Table record can point to Multiple Other table record

}

type PokemonEvolutionRltsRepository struct {
	PokemonEvolutionMatchupRepository repo.IPokemonEvolutionMatchupRepository
}

var NewPokemonEvolutionRltsRepository = wire.NewSet(
	wire.Struct(new(PokemonEvolutionRltsRepository), "*"),
	wire.Bind(new(IPokemonEvolutionRltsRepository), new(*PokemonEvolutionRltsRepository)),
)

func (per *PokemonEvolutionRltsRepository) PokemonEvolutionMatchupThroughEvolvedSpeciesID(ctx context.Context, obj *table.PokemonEvolution, filter *table.PokemonEvolutionMatchupFilter) (*table.PokemonEvolutionMatchup, error) {
	if obj == nil {
		return nil, nil
	}

	if filter == nil {
		filter = &table.PokemonEvolutionMatchupFilter{}
	}

	filter.AddID(internal.Eq, obj.EvolvedSpeciesID)
	result, err := per.PokemonEvolutionMatchupRepository.FindAllPokemonEvolutionMatchup(ctx, filter, nil)

	if err != nil {
		return nil, err
	}

	if result.TotalCount == 0 {
		return nil, nil
	}
	return &result.Data[0], nil
}
