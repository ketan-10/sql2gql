// Code generated by sql2gql. DO NOT EDIT.

package rlts

import (
	"context"

	"github.com/google/wire"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/repo"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/table"
)

type IPokemonRltsRepository interface {

	// This Table Pointing to Other Table!!!, ManyToOne <- As Many records from other table can point to this table one record

	//  Other Table Pointing to This Table!!!, OneToMany <- As This Table record can point to Multiple Other table record
	BaseStatsThroughFkPokemon(ctx context.Context, obj *table.Pokemon, filter *table.BaseStatsFilter, pagination *internal.Pagination) (*table.ListBaseStats, error)
	PokemonAbilitiesThroughFkPokemon(ctx context.Context, obj *table.Pokemon, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error)
	PokemonEvolutionMatchupThroughPokemonID(ctx context.Context, obj *table.Pokemon, filter *table.PokemonEvolutionMatchupFilter, pagination *internal.Pagination) (*table.ListPokemonEvolutionMatchup, error)
	PokemonTypesThroughPokemonID(ctx context.Context, obj *table.Pokemon, filter *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error)
}

type PokemonRltsRepository struct {
	BaseStatsRepository repo.IBaseStatsRepository

	PokemonAbilitiesRepository repo.IPokemonAbilitiesRepository

	PokemonEvolutionMatchupRepository repo.IPokemonEvolutionMatchupRepository

	PokemonTypesRepository repo.IPokemonTypesRepository
}

var NewPokemonRltsRepository = wire.NewSet(
	wire.Struct(new(PokemonRltsRepository), "*"),
	wire.Bind(new(IPokemonRltsRepository), new(*PokemonRltsRepository)),
)

func (pr *PokemonRltsRepository) BaseStatsThroughFkPokemon(ctx context.Context, obj *table.Pokemon, filter *table.BaseStatsFilter, pagination *internal.Pagination) (*table.ListBaseStats, error) {
	if obj == nil {
		return &table.ListBaseStats{}, nil
	}
	return pr.BaseStatsRepository.BaseStatsByFkPokemon(ctx, obj.ID, filter, pagination)
}
func (pr *PokemonRltsRepository) PokemonAbilitiesThroughFkPokemon(ctx context.Context, obj *table.Pokemon, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error) {
	if obj == nil {
		return &table.ListPokemonAbilities{}, nil
	}
	return pr.PokemonAbilitiesRepository.PokemonAbilitiesByFkPokemon(ctx, obj.ID, filter, pagination)
}
func (pr *PokemonRltsRepository) PokemonEvolutionMatchupThroughPokemonID(ctx context.Context, obj *table.Pokemon, filter *table.PokemonEvolutionMatchupFilter, pagination *internal.Pagination) (*table.ListPokemonEvolutionMatchup, error) {
	if obj == nil {
		return &table.ListPokemonEvolutionMatchup{}, nil
	}
	return pr.PokemonEvolutionMatchupRepository.PokemonEvolutionMatchupByPokemonID(ctx, obj.ID, filter, pagination)
}
func (pr *PokemonRltsRepository) PokemonTypesThroughPokemonID(ctx context.Context, obj *table.Pokemon, filter *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error) {
	if obj == nil {
		return &table.ListPokemonTypes{}, nil
	}
	return pr.PokemonTypesRepository.PokemonTypesByPokemonID(ctx, obj.ID, filter, pagination)
}
