// Code generated by sql2gql. DO NOT EDIT.

package rlts

import (
	"context"

	"github.com/google/wire"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/repo"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/table"
)

type IBaseStatsRltsRepository interface {

	// This Table Pointing to Other Table!!!, ManyToOne <- As Many records from other table can point to this table one record
	PokemonByFkPokemon(ctx context.Context, obj *table.BaseStats, filter *table.PokemonFilter) (*table.Pokemon, error)

	//  Other Table Pointing to This Table!!!, OneToMany <- As This Table record can point to Multiple Other table record

}

type BaseStatsRltsRepository struct {
	PokemonRepository repo.IPokemonRepository
}

var NewBaseStatsRltsRepository = wire.NewSet(
	wire.Struct(new(BaseStatsRltsRepository), "*"),
	wire.Bind(new(IBaseStatsRltsRepository), new(*BaseStatsRltsRepository)),
)

func (bsr *BaseStatsRltsRepository) PokemonByFkPokemon(ctx context.Context, obj *table.BaseStats, filter *table.PokemonFilter) (*table.Pokemon, error) {
	if obj == nil {
		return nil, nil
	}

	if filter == nil {
		filter = &table.PokemonFilter{}
	}

	filter.AddID(internal.Eq, obj.FkPokemon)
	result, err := bsr.PokemonRepository.FindAllPokemon(ctx, filter, nil)

	if err != nil {
		return nil, err
	}

	if result.TotalCount == 0 {
		return nil, nil
	}
	return &result.Data[0], nil
}
