// Code generated by sql2gql. DO NOT EDIT.

package rlts

import (
	"context"

	"github.com/google/wire"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/repo"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/table"
)

type IPokemonEvolutionMatchupRltsRepository interface {

	// This Table Pointing to Other Table!!!, ManyToOne <- As Many records from other table can point to this table one record
	PokemonByPokemonID(ctx context.Context, obj *table.PokemonEvolutionMatchup, filter *table.PokemonFilter) (*table.Pokemon, error)

	//  Other Table Pointing to This Table!!!, OneToMany <- As This Table record can point to Multiple Other table record
	PokemonEvolutionByEvolvedSpeciesID(ctx context.Context, obj *table.PokemonEvolutionMatchup, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination) (*table.ListPokemonEvolution, error)
}

type PokemonEvolutionMatchupRltsRepository struct {
	PokemonRepository repo.IPokemonRepository

	PokemonEvolutionRepository repo.IPokemonEvolutionRepository
}

var NewPokemonEvolutionMatchupRltsRepository = wire.NewSet(
	wire.Struct(new(PokemonEvolutionMatchupRltsRepository), "*"),
	wire.Bind(new(IPokemonEvolutionMatchupRltsRepository), new(*PokemonEvolutionMatchupRltsRepository)),
)

func (pemr *PokemonEvolutionMatchupRltsRepository) PokemonByPokemonID(ctx context.Context, obj *table.PokemonEvolutionMatchup, filter *table.PokemonFilter) (*table.Pokemon, error) {
	if obj == nil {
		return nil, nil
	}

	if filter == nil {
		filter = &table.PokemonFilter{}
	}

	filter.AddID(internal.Eq, obj.PokemonID)
	result, err := pemr.PokemonRepository.FindAllPokemon(ctx, filter, nil)

	if err != nil {
		return nil, err
	}

	if result.TotalCount == 0 {
		return nil, nil
	}
	return &result.Data[0], nil
}
func (pemr *PokemonEvolutionMatchupRltsRepository) PokemonEvolutionByEvolvedSpeciesID(ctx context.Context, obj *table.PokemonEvolutionMatchup, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination) (*table.ListPokemonEvolution, error) {
	if obj == nil {
		return &table.ListPokemonEvolution{}, nil
	}
	return pemr.PokemonEvolutionRepository.PokemonEvolutionByEvolvedSpeciesID(ctx, obj.ID, filter, pagination)
}
