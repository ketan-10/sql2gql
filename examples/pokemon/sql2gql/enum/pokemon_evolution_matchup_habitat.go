// Code generated by sql2gql. DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"errors"
	"io"
)

type PokemonEvolutionMatchupHabitat uint16

const (
	PokemonEvolutionMatchupHabitatCave PokemonEvolutionMatchupHabitat = iota

	PokemonEvolutionMatchupHabitatForest PokemonEvolutionMatchupHabitat = iota

	PokemonEvolutionMatchupHabitatGrassland PokemonEvolutionMatchupHabitat = iota

	PokemonEvolutionMatchupHabitatMountain PokemonEvolutionMatchupHabitat = iota

	PokemonEvolutionMatchupHabitatRare PokemonEvolutionMatchupHabitat = iota

	PokemonEvolutionMatchupHabitatRoughTerrain PokemonEvolutionMatchupHabitat = iota

	PokemonEvolutionMatchupHabitatSea PokemonEvolutionMatchupHabitat = iota

	PokemonEvolutionMatchupHabitatUrban PokemonEvolutionMatchupHabitat = iota

	PokemonEvolutionMatchupHabitatWatersEdge PokemonEvolutionMatchupHabitat = iota

	PokemonEvolutionMatchupHabitatUnknown PokemonEvolutionMatchupHabitat = iota
)

func (pemh PokemonEvolutionMatchupHabitat) String() string {
	var value string

	switch pemh {

	case PokemonEvolutionMatchupHabitatCave:
		value = "cave"

	case PokemonEvolutionMatchupHabitatForest:
		value = "forest"

	case PokemonEvolutionMatchupHabitatGrassland:
		value = "grassland"

	case PokemonEvolutionMatchupHabitatMountain:
		value = "mountain"

	case PokemonEvolutionMatchupHabitatRare:
		value = "rare"

	case PokemonEvolutionMatchupHabitatRoughTerrain:
		value = "rough_terrain"

	case PokemonEvolutionMatchupHabitatSea:
		value = "sea"

	case PokemonEvolutionMatchupHabitatUrban:
		value = "urban"

	case PokemonEvolutionMatchupHabitatWatersEdge:
		value = "waters_edge"

	case PokemonEvolutionMatchupHabitatUnknown:
		value = "Unknown"

	}

	return value
}

func (pemh PokemonEvolutionMatchupHabitat) GoString() string {
	return pemh.String()
}

// MarshalGQL implements the graphql.Marshaler interface
func (pemh PokemonEvolutionMatchupHabitat) MarshalGQL(w io.Writer) {
	w.Write([]byte(`"` + pemh.String() + `"`))
}

// UnmarshalGQL implements the graphql.Marshaler interface
func (pemh *PokemonEvolutionMatchupHabitat) UnmarshalGQL(v interface{}) error {
	if str, ok := v.(string); ok {
		return pemh.UnmarshalText([]byte(str))
	}
	return errors.New("ErrInvalidEnumGraphQL")
}

// MarshalText marshals PokemonEvolutionMatchupHabitat into text.
func (pemh PokemonEvolutionMatchupHabitat) MarshalText() ([]byte, error) {
	return []byte(pemh.String()), nil
}

// UnmarshalText unmarshals PokemonEvolutionMatchupHabitat from text.
func (pemh *PokemonEvolutionMatchupHabitat) UnmarshalText(text []byte) error {
	switch string(text) {
	case "cave":
		*pemh = PokemonEvolutionMatchupHabitatCave

	case "forest":
		*pemh = PokemonEvolutionMatchupHabitatForest

	case "grassland":
		*pemh = PokemonEvolutionMatchupHabitatGrassland

	case "mountain":
		*pemh = PokemonEvolutionMatchupHabitatMountain

	case "rare":
		*pemh = PokemonEvolutionMatchupHabitatRare

	case "rough_terrain":
		*pemh = PokemonEvolutionMatchupHabitatRoughTerrain

	case "sea":
		*pemh = PokemonEvolutionMatchupHabitatSea

	case "urban":
		*pemh = PokemonEvolutionMatchupHabitatUrban

	case "waters_edge":
		*pemh = PokemonEvolutionMatchupHabitatWatersEdge

	case "Unknown":
		*pemh = PokemonEvolutionMatchupHabitatUnknown

	default:
		return errors.New("ErrInvalidEnumGraphQL_PokemonEvolutionMatchupHabitat")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for PokemonEvolutionMatchupHabitat.
func (pemh PokemonEvolutionMatchupHabitat) Value() (driver.Value, error) {
	return pemh.String(), nil
}

// Value satisfies the sql/driver.Valuer interface for PokemonEvolutionMatchupHabitat.
func (pemh PokemonEvolutionMatchupHabitat) Ptr() *PokemonEvolutionMatchupHabitat {
	return &pemh
}

// Scan satisfies the database/sql.Scanner interface for PokemonEvolutionMatchupHabitat.
func (pemh *PokemonEvolutionMatchupHabitat) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("ErrInvalidEnumScan_PokemonEvolutionMatchupHabitat")
	}

	return pemh.UnmarshalText(buf)
}
