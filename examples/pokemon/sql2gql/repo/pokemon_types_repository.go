// Code generated by sql2gql. DO NOT EDIT.

package repo

import (
	"context"

	sq "github.com/elgris/sqrl"
	"github.com/google/wire"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/table"
)

type IPokemonTypesRepository interface {
	IPokemonTypesRepositoryQueryBuilder

	InsertPokemonTypes(ctx context.Context, pt table.PokemonTypesCreate) (*table.PokemonTypes, error)
	InsertPokemonTypesWithSuffix(ctx context.Context, pt table.PokemonTypesCreate, suffix sq.Sqlizer) (*table.PokemonTypes, error)
	InsertPokemonTypesIDResult(ctx context.Context, pt table.PokemonTypesCreate, suffix sq.Sqlizer) (int64, error)

	UpdatePokemonTypesByFields(ctx context.Context, id int, pt table.PokemonTypesUpdate) (*table.PokemonTypes, error)
	UpdatePokemonTypes(ctx context.Context, pt table.PokemonTypes) (*table.PokemonTypes, error)

	DeletePokemonTypes(ctx context.Context, pt table.PokemonTypes) error
	DeletePokemonTypesByID(ctx context.Context, id int) (bool, error)

	FindAllPokemonTypes(ctx context.Context, pt *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error)
	FindAllPokemonTypesWithSuffix(ctx context.Context, pt *table.PokemonTypesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonTypes, error)

	PokemonTypesByPokemonID(ctx context.Context, pokemonID int, filter *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error)

	PokemonTypesByPokemonIDWithSuffix(ctx context.Context, pokemonID int, filter *table.PokemonTypesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonTypes, error)
	PokemonTypesByID(ctx context.Context, iD int, filter *table.PokemonTypesFilter) (*table.PokemonTypes, error)

	PokemonTypesByIDWithSuffix(ctx context.Context, iD int, filter *table.PokemonTypesFilter, suffixes ...sq.Sqlizer) (*table.PokemonTypes, error)

	PokemonTypesByTypeID(ctx context.Context, typeID int, filter *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error)

	PokemonTypesByTypeIDWithSuffix(ctx context.Context, typeID int, filter *table.PokemonTypesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonTypes, error)
}

type IPokemonTypesRepositoryQueryBuilder interface {
	FindAllPokemonTypesBaseQuery(ctx context.Context, filter *table.PokemonTypesFilter, fields string, suffix ...sq.Sqlizer) (*sq.SelectBuilder, error)
	AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error)
}

type PokemonTypesRepository struct {
	DB           internal.IDb
	QueryBuilder IPokemonTypesRepositoryQueryBuilder
}

type PokemonTypesRepositoryQueryBuilder struct {
}

var NewPokemonTypesRepository = wire.NewSet(
	wire.Struct(new(PokemonTypesRepository), "*"),
	wire.Struct(new(PokemonTypesRepositoryQueryBuilder), "*"),
	wire.Bind(new(IPokemonTypesRepository), new(*PokemonTypesRepository)),
	wire.Bind(new(IPokemonTypesRepositoryQueryBuilder), new(*PokemonTypesRepositoryQueryBuilder)),
)

func (ptr *PokemonTypesRepository) InsertPokemonTypes(ctx context.Context, pt table.PokemonTypesCreate) (*table.PokemonTypes, error) {
	return ptr.InsertPokemonTypesWithSuffix(ctx, pt, nil)
}

func (ptr *PokemonTypesRepository) InsertPokemonTypesWithSuffix(ctx context.Context, pt table.PokemonTypesCreate, suffix sq.Sqlizer) (*table.PokemonTypes, error) {
	var err error

	id, err := ptr.InsertPokemonTypesIDResult(ctx, pt, suffix)
	if err != nil {
		return nil, err
	}
	newpt := table.PokemonTypes{}
	qb := sq.Select("*").From(`pokemon_types`)

	qb.Where(sq.Eq{"`id`": id})
	err = ptr.DB.Get(ctx, &newpt, qb)

	if err != nil {
		return nil, err
	}
	return &newpt, nil
}

func (ptr *PokemonTypesRepository) InsertPokemonTypesIDResult(ctx context.Context, pt table.PokemonTypesCreate, suffix sq.Sqlizer) (int64, error) {
	var err error

	qb := sq.Insert("`pokemon_types`").Columns(
		"`pokemon_id`",
		"`type_id`",
		"`slot`",
	).Values(
		pt.PokemonID,
		pt.TypeID,
		pt.Slot,
	)
	if suffix != nil {
		suffixQuery, suffixArgs, suffixErr := suffix.ToSql()
		if suffixErr != nil {
			return 0, suffixErr
		}
		qb.Suffix(suffixQuery, suffixArgs...)
	}

	// run query
	res, err := ptr.DB.Exec(ctx, qb)
	if err != nil {
		return 0, err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

func (ptr *PokemonTypesRepository) UpdatePokemonTypesByFields(ctx context.Context, id int, pt table.PokemonTypesUpdate) (*table.PokemonTypes, error) {
	var err error

	updateMap := map[string]interface{}{}
	if pt.PokemonID != nil {
		updateMap["`pokemon_id`"] = *pt.PokemonID
	}
	if pt.TypeID != nil {
		updateMap["`type_id`"] = *pt.TypeID
	}
	if pt.Slot != nil {
		updateMap["`slot`"] = *pt.Slot
	}
	if pt.Active != nil {
		updateMap["`active`"] = *pt.Active
	}

	qb := sq.Update(`pokemon_types`).SetMap(updateMap).Where(sq.Eq{"`id`": id})

	_, err = ptr.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`pokemon_types`")

	selectQb = selectQb.Where(sq.Eq{"`id`": id})

	result := table.PokemonTypes{}
	err = ptr.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil

}

func (ptr *PokemonTypesRepository) UpdatePokemonTypes(ctx context.Context, pt table.PokemonTypes) (*table.PokemonTypes, error) {
	var err error

	// sql query
	qb := sq.Update("`pokemon_types`").SetMap(map[string]interface{}{
		"`pokemon_id`": pt.PokemonID,
		"`type_id`":    pt.TypeID,
		"`slot`":       pt.Slot,
		"`active`":     pt.Active,
	}).Where(sq.Eq{"`id`": pt.ID})

	// run query
	_, err = ptr.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`pokemon_types`")
	selectQb = selectQb.Where(sq.Eq{"`id`": pt.ID})

	result := table.PokemonTypes{}
	err = ptr.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (ptr *PokemonTypesRepository) DeletePokemonTypes(ctx context.Context, pt table.PokemonTypes) error {
	_, err := ptr.DeletePokemonTypesByID(ctx, pt.ID)
	return err
}

func (ptr *PokemonTypesRepository) DeletePokemonTypesByID(ctx context.Context, id int) (bool, error) {
	var err error

	qb := sq.Update("`pokemon_types`").Set("active", false)

	qb = qb.Where(sq.Eq{"`id`": id})

	_, err = ptr.DB.Exec(ctx, qb)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (ptr *PokemonTypesRepository) FindAllPokemonTypesBaseQuery(ctx context.Context, filter *table.PokemonTypesFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	return ptr.QueryBuilder.FindAllPokemonTypesBaseQuery(ctx, filter, fields, suffixes...)
}

func (ptr *PokemonTypesRepositoryQueryBuilder) FindAllPokemonTypesBaseQuery(ctx context.Context, filter *table.PokemonTypesFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	var err error
	qb := sq.Select(fields).From("`pokemon_types`")
	if filter != nil {
		if qb, err = internal.AddFilter(qb, "`pokemon_types`.`id`", filter.ID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_types`.`pokemon_id`", filter.PokemonID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_types`.`type_id`", filter.TypeID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_types`.`slot`", filter.Slot); err != nil {
			return qb, err
		}
		if filter.Active == nil {
			if qb, err = internal.AddFilter(qb, "`pokemon_types`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
				return qb, err
			}
		} else {
			if qb, err = internal.AddFilter(qb, "`pokemon_types`.`active`", filter.Active); err != nil {
				return qb, err
			}
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_types`.`created_at`", filter.CreatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_types`.`updated_at`", filter.UpdatedAt); err != nil {
			return qb, err
		}
		qb, err = internal.AddAdditionalFilter(qb, filter.Wheres, filter.Joins, filter.LeftJoins, filter.GroupBys, filter.Havings)
		if err != nil {
			return qb, err
		}
	} else {
		if qb, err = internal.AddFilter(qb, "`pokemon_types`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
			return qb, err
		}
	}

	for _, suffix := range suffixes {
		query, args, err := suffix.ToSql()
		if err != nil {
			return qb, err
		}
		qb.Suffix(query, args...)
	}
	return qb, nil
}

func (ptr *PokemonTypesRepository) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	return ptr.QueryBuilder.AddPagination(ctx, qb, pagination)
}

func (pt *PokemonTypesRepositoryQueryBuilder) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	fields := []string{
		"id",
		"pokemon_id",
		"type_id",
		"slot",
		"active",
		"created_at",
		"updated_at",
	}
	return internal.AddPagination(qb, pagination, "pokemon_types", fields)
}

func (ptr *PokemonTypesRepository) FindAllPokemonTypes(ctx context.Context, filter *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error) {
	return ptr.FindAllPokemonTypesWithSuffix(ctx, filter, pagination)
}

func (ptr *PokemonTypesRepository) FindAllPokemonTypesWithSuffix(ctx context.Context, filter *table.PokemonTypesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonTypes, error) {
	var list table.ListPokemonTypes
	qb, err := ptr.FindAllPokemonTypesBaseQuery(ctx, filter, "`pokemon_types`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb, err = ptr.AddPagination(ctx, qb, pagination)
	if err != nil {
		return &list, err
	}

	err = ptr.DB.Select(ctx, &list.Data, qb)

	if err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = ptr.FindAllPokemonTypesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &table.ListPokemonTypes{}, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	err = ptr.DB.Get(ctx, &listMeta, qb)

	list.TotalCount = listMeta.Count

	return &list, err
}

func (ptr *PokemonTypesRepository) PokemonTypesByPokemonID(ctx context.Context, pokemonID int, filter *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error) {
	return ptr.PokemonTypesByPokemonIDWithSuffix(ctx, pokemonID, filter, pagination)
}

func (ptr *PokemonTypesRepository) PokemonTypesByPokemonIDWithSuffix(ctx context.Context, pokemonID int, filter *table.PokemonTypesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonTypes, error) {

	var list table.ListPokemonTypes
	// sql query
	qb, err := ptr.FindAllPokemonTypesBaseQuery(ctx, filter, "`pokemon_types`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`pokemon_types`.`pokemon_id`": pokemonID})

	if qb, err = ptr.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = ptr.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = ptr.FindAllPokemonTypesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`pokemon_types`.`pokemon_id`": pokemonID})
	if err = ptr.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}
func (ptr *PokemonTypesRepository) PokemonTypesByID(ctx context.Context, iD int, filter *table.PokemonTypesFilter) (*table.PokemonTypes, error) {
	return ptr.PokemonTypesByIDWithSuffix(ctx, iD, filter)
}

func (ptr *PokemonTypesRepository) PokemonTypesByIDWithSuffix(ctx context.Context, iD int, filter *table.PokemonTypesFilter, suffixes ...sq.Sqlizer) (*table.PokemonTypes, error) {
	var err error

	// sql query
	qb, err := ptr.FindAllPokemonTypesBaseQuery(ctx, filter, "`pokemon_types`.*", suffixes...)
	if err != nil {
		return &table.PokemonTypes{}, err
	}
	qb = qb.Where(sq.Eq{"`pokemon_types`.`id`": iD})

	// run query
	pt := table.PokemonTypes{}
	err = ptr.DB.Get(ctx, &pt, qb)
	if err != nil {
		return &table.PokemonTypes{}, err
	}
	return &pt, nil
}

func (ptr *PokemonTypesRepository) PokemonTypesByTypeID(ctx context.Context, typeID int, filter *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error) {
	return ptr.PokemonTypesByTypeIDWithSuffix(ctx, typeID, filter, pagination)
}

func (ptr *PokemonTypesRepository) PokemonTypesByTypeIDWithSuffix(ctx context.Context, typeID int, filter *table.PokemonTypesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonTypes, error) {

	var list table.ListPokemonTypes
	// sql query
	qb, err := ptr.FindAllPokemonTypesBaseQuery(ctx, filter, "`pokemon_types`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`pokemon_types`.`type_id`": typeID})

	if qb, err = ptr.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = ptr.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = ptr.FindAllPokemonTypesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`pokemon_types`.`type_id`": typeID})
	if err = ptr.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}
