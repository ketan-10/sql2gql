// Code generated by sql2gql. DO NOT EDIT.

package repo

import (
	"context"

	sq "github.com/elgris/sqrl"
	"github.com/google/wire"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/table"
)

type IAbilitiesRepository interface {
	IAbilitiesRepositoryQueryBuilder

	InsertAbilities(ctx context.Context, a table.AbilitiesCreate) (*table.Abilities, error)
	InsertAbilitiesWithSuffix(ctx context.Context, a table.AbilitiesCreate, suffix sq.Sqlizer) (*table.Abilities, error)
	InsertAbilitiesIDResult(ctx context.Context, a table.AbilitiesCreate, suffix sq.Sqlizer) (int64, error)

	UpdateAbilitiesByFields(ctx context.Context, id int, a table.AbilitiesUpdate) (*table.Abilities, error)
	UpdateAbilities(ctx context.Context, a table.Abilities) (*table.Abilities, error)

	DeleteAbilities(ctx context.Context, a table.Abilities) error
	DeleteAbilitiesByID(ctx context.Context, id int) (bool, error)

	FindAllAbilities(ctx context.Context, a *table.AbilitiesFilter, pagination *internal.Pagination) (*table.ListAbilities, error)
	FindAllAbilitiesWithSuffix(ctx context.Context, a *table.AbilitiesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListAbilities, error)

	AbilitiesByAbilityName(ctx context.Context, abilityName string, filter *table.AbilitiesFilter, pagination *internal.Pagination) (*table.ListAbilities, error)

	AbilitiesByAbilityNameWithSuffix(ctx context.Context, abilityName string, filter *table.AbilitiesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListAbilities, error)
	AbilitiesByID(ctx context.Context, iD int, filter *table.AbilitiesFilter) (table.Abilities, error)

	AbilitiesByIDWithSuffix(ctx context.Context, iD int, filter *table.AbilitiesFilter, suffixes ...sq.Sqlizer) (table.Abilities, error)
}

type IAbilitiesRepositoryQueryBuilder interface {
	FindAllAbilitiesBaseQuery(ctx context.Context, filter *table.AbilitiesFilter, fields string, suffix ...sq.Sqlizer) (*sq.SelectBuilder, error)
	AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error)
}

type AbilitiesRepository struct {
	DB           internal.IDb
	QueryBuilder IAbilitiesRepositoryQueryBuilder
}

type AbilitiesRepositoryQueryBuilder struct {
}

var NewAbilitiesRepository = wire.NewSet(
	wire.Struct(new(AbilitiesRepository), "*"),
	wire.Struct(new(AbilitiesRepositoryQueryBuilder), "*"),
	wire.Bind(new(IAbilitiesRepository), new(*AbilitiesRepository)),
	wire.Bind(new(IAbilitiesRepositoryQueryBuilder), new(*AbilitiesRepositoryQueryBuilder)),
)

func (ar *AbilitiesRepository) InsertAbilities(ctx context.Context, a table.AbilitiesCreate) (*table.Abilities, error) {
	return ar.InsertAbilitiesWithSuffix(ctx, a, nil)
}

func (ar *AbilitiesRepository) InsertAbilitiesWithSuffix(ctx context.Context, a table.AbilitiesCreate, suffix sq.Sqlizer) (*table.Abilities, error) {
	var err error

	id, err := ar.InsertAbilitiesIDResult(ctx, a, suffix)
	if err != nil {
		return nil, err
	}
	newa := table.Abilities{}
	qb := sq.Select("*").From(`abilities`)

	qb.Where(sq.Eq{"`id`": id})
	err = ar.DB.Get(ctx, &newa, qb)

	if err != nil {
		return nil, err
	}
	return &newa, nil
}

func (ar *AbilitiesRepository) InsertAbilitiesIDResult(ctx context.Context, a table.AbilitiesCreate, suffix sq.Sqlizer) (int64, error) {
	var err error

	qb := sq.Insert("`abilities`").Columns(
		"`ability_name`",
	).Values(
		a.AbilityName,
	)
	if suffix != nil {
		suffixQuery, suffixArgs, suffixErr := suffix.ToSql()
		if suffixErr != nil {
			return 0, suffixErr
		}
		qb.Suffix(suffixQuery, suffixArgs...)
	}

	// run query
	res, err := ar.DB.Exec(ctx, qb)
	if err != nil {
		return 0, err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

func (ar *AbilitiesRepository) UpdateAbilitiesByFields(ctx context.Context, id int, a table.AbilitiesUpdate) (*table.Abilities, error) {
	var err error

	updateMap := map[string]interface{}{}
	if a.AbilityName != nil {
		updateMap["`ability_name`"] = *a.AbilityName
	}
	if a.Active != nil {
		updateMap["`active`"] = *a.Active
	}

	qb := sq.Update(`abilities`).SetMap(updateMap).Where(sq.Eq{"`id`": id})

	_, err = ar.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`abilities`")

	selectQb = selectQb.Where(sq.Eq{"`id`": id})

	result := table.Abilities{}
	err = ar.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil

}

func (ar *AbilitiesRepository) UpdateAbilities(ctx context.Context, a table.Abilities) (*table.Abilities, error) {
	var err error

	// sql query
	qb := sq.Update("`abilities`").SetMap(map[string]interface{}{
		"`ability_name`": a.AbilityName,
		"`active`":       a.Active,
	}).Where(sq.Eq{"`id`": a.ID})

	// run query
	_, err = ar.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`abilities`")
	selectQb = selectQb.Where(sq.Eq{"`id`": a.ID})

	result := table.Abilities{}
	err = ar.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (ar *AbilitiesRepository) DeleteAbilities(ctx context.Context, a table.Abilities) error {
	_, err := ar.DeleteAbilitiesByID(ctx, a.ID)
	return err
}

func (ar *AbilitiesRepository) DeleteAbilitiesByID(ctx context.Context, id int) (bool, error) {
	var err error

	qb := sq.Update("`abilities`").Set("active", false)

	qb = qb.Where(sq.Eq{"`id`": id})

	_, err = ar.DB.Exec(ctx, qb)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (ar *AbilitiesRepository) FindAllAbilitiesBaseQuery(ctx context.Context, filter *table.AbilitiesFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	return ar.QueryBuilder.FindAllAbilitiesBaseQuery(ctx, filter, fields, suffixes...)
}

func (ar *AbilitiesRepositoryQueryBuilder) FindAllAbilitiesBaseQuery(ctx context.Context, filter *table.AbilitiesFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	var err error
	qb := sq.Select(fields).From("`abilities`")
	if filter != nil {
		if qb, err = internal.AddFilter(qb, "`abilities`.`id`", filter.ID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`abilities`.`ability_name`", filter.AbilityName); err != nil {
			return qb, err
		}
		if filter.Active == nil {
			if qb, err = internal.AddFilter(qb, "`abilities`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
				return qb, err
			}
		} else {
			if qb, err = internal.AddFilter(qb, "`abilities`.`active`", filter.Active); err != nil {
				return qb, err
			}
		}
		if qb, err = internal.AddFilter(qb, "`abilities`.`created_at`", filter.CreatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`abilities`.`updated_at`", filter.UpdatedAt); err != nil {
			return qb, err
		}
		qb, err = internal.AddAdditionalFilter(qb, filter.Wheres, filter.Joins, filter.LeftJoins, filter.GroupBys, filter.Havings)
		if err != nil {
			return qb, err
		}
	} else {
		if qb, err = internal.AddFilter(qb, "`abilities`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
			return qb, err
		}
	}

	for _, suffix := range suffixes {
		query, args, err := suffix.ToSql()
		if err != nil {
			return qb, err
		}
		qb.Suffix(query, args...)
	}
	return qb, nil
}

func (ar *AbilitiesRepository) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	return ar.QueryBuilder.AddPagination(ctx, qb, pagination)
}

func (a *AbilitiesRepositoryQueryBuilder) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	fields := []string{
		"id",
		"ability_name",
		"active",
		"created_at",
		"updated_at",
	}
	return internal.AddPagination(qb, pagination, "abilities", fields)
}

func (ar *AbilitiesRepository) FindAllAbilities(ctx context.Context, filter *table.AbilitiesFilter, pagination *internal.Pagination) (*table.ListAbilities, error) {
	return ar.FindAllAbilitiesWithSuffix(ctx, filter, pagination)
}

func (ar *AbilitiesRepository) FindAllAbilitiesWithSuffix(ctx context.Context, filter *table.AbilitiesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListAbilities, error) {
	var list table.ListAbilities
	qb, err := ar.FindAllAbilitiesBaseQuery(ctx, filter, "`abilities`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb, err = ar.AddPagination(ctx, qb, pagination)
	if err != nil {
		return &list, err
	}

	err = ar.DB.Select(ctx, &list.Data, qb)

	if err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = ar.FindAllAbilitiesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &table.ListAbilities{}, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	err = ar.DB.Get(ctx, &listMeta, qb)

	list.TotalCount = listMeta.Count

	return &list, err
}

func (ar *AbilitiesRepository) AbilitiesByAbilityName(ctx context.Context, abilityName string, filter *table.AbilitiesFilter, pagination *internal.Pagination) (*table.ListAbilities, error) {
	return ar.AbilitiesByAbilityNameWithSuffix(ctx, abilityName, filter, pagination)
}

func (ar *AbilitiesRepository) AbilitiesByAbilityNameWithSuffix(ctx context.Context, abilityName string, filter *table.AbilitiesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListAbilities, error) {

	var list table.ListAbilities
	// sql query
	qb, err := ar.FindAllAbilitiesBaseQuery(ctx, filter, "`abilities`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`abilities`.`ability_name`": abilityName})

	if qb, err = ar.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = ar.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = ar.FindAllAbilitiesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`abilities`.`ability_name`": abilityName})
	if err = ar.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}
func (ar *AbilitiesRepository) AbilitiesByID(ctx context.Context, iD int, filter *table.AbilitiesFilter) (table.Abilities, error) {
	return ar.AbilitiesByIDWithSuffix(ctx, iD, filter)
}

func (ar *AbilitiesRepository) AbilitiesByIDWithSuffix(ctx context.Context, iD int, filter *table.AbilitiesFilter, suffixes ...sq.Sqlizer) (table.Abilities, error) {
	var err error

	// sql query
	qb, err := ar.FindAllAbilitiesBaseQuery(ctx, filter, "`abilities`.*", suffixes...)
	if err != nil {
		return table.Abilities{}, err
	}
	qb = qb.Where(sq.Eq{"`abilities`.`id`": iD})

	// run query
	a := table.Abilities{}
	err = ar.DB.Get(ctx, &a, qb)
	if err != nil {
		return table.Abilities{}, err
	}
	return a, nil
}
