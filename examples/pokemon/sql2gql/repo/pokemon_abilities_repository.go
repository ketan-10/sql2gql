// Code generated by sql2gql. DO NOT EDIT.

package repo

import (
	"context"

	sq "github.com/elgris/sqrl"
	"github.com/google/wire"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/table"
)

type IPokemonAbilitiesRepository interface {
	IPokemonAbilitiesRepositoryQueryBuilder

	InsertPokemonAbilities(ctx context.Context, pa table.PokemonAbilitiesCreate) (*table.PokemonAbilities, error)
	InsertPokemonAbilitiesWithSuffix(ctx context.Context, pa table.PokemonAbilitiesCreate, suffix sq.Sqlizer) (*table.PokemonAbilities, error)
	InsertPokemonAbilitiesIDResult(ctx context.Context, pa table.PokemonAbilitiesCreate, suffix sq.Sqlizer) (int64, error)

	UpdatePokemonAbilitiesByFields(ctx context.Context, id int, pa table.PokemonAbilitiesUpdate) (*table.PokemonAbilities, error)
	UpdatePokemonAbilities(ctx context.Context, pa table.PokemonAbilities) (*table.PokemonAbilities, error)

	DeletePokemonAbilities(ctx context.Context, pa table.PokemonAbilities) error
	DeletePokemonAbilitiesByID(ctx context.Context, id int) (bool, error)

	FindAllPokemonAbilities(ctx context.Context, pa *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error)
	FindAllPokemonAbilitiesWithSuffix(ctx context.Context, pa *table.PokemonAbilitiesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonAbilities, error)

	PokemonAbilitiesByFkAbility(ctx context.Context, fkAbility int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error)

	PokemonAbilitiesByFkAbilityWithSuffix(ctx context.Context, fkAbility int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonAbilities, error)

	PokemonAbilitiesByFkPokemon(ctx context.Context, fkPokemon int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error)

	PokemonAbilitiesByFkPokemonWithSuffix(ctx context.Context, fkPokemon int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonAbilities, error)
	PokemonAbilitiesByID(ctx context.Context, iD int, filter *table.PokemonAbilitiesFilter) (table.PokemonAbilities, error)

	PokemonAbilitiesByIDWithSuffix(ctx context.Context, iD int, filter *table.PokemonAbilitiesFilter, suffixes ...sq.Sqlizer) (table.PokemonAbilities, error)
}

type IPokemonAbilitiesRepositoryQueryBuilder interface {
	FindAllPokemonAbilitiesBaseQuery(ctx context.Context, filter *table.PokemonAbilitiesFilter, fields string, suffix ...sq.Sqlizer) (*sq.SelectBuilder, error)
	AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error)
}

type PokemonAbilitiesRepository struct {
	DB           internal.IDb
	QueryBuilder IPokemonAbilitiesRepositoryQueryBuilder
}

type PokemonAbilitiesRepositoryQueryBuilder struct {
}

var NewPokemonAbilitiesRepository = wire.NewSet(
	wire.Struct(new(PokemonAbilitiesRepository), "*"),
	wire.Struct(new(PokemonAbilitiesRepositoryQueryBuilder), "*"),
	wire.Bind(new(IPokemonAbilitiesRepository), new(*PokemonAbilitiesRepository)),
	wire.Bind(new(IPokemonAbilitiesRepositoryQueryBuilder), new(*PokemonAbilitiesRepositoryQueryBuilder)),
)

func (par *PokemonAbilitiesRepository) InsertPokemonAbilities(ctx context.Context, pa table.PokemonAbilitiesCreate) (*table.PokemonAbilities, error) {
	return par.InsertPokemonAbilitiesWithSuffix(ctx, pa, nil)
}

func (par *PokemonAbilitiesRepository) InsertPokemonAbilitiesWithSuffix(ctx context.Context, pa table.PokemonAbilitiesCreate, suffix sq.Sqlizer) (*table.PokemonAbilities, error) {
	var err error

	id, err := par.InsertPokemonAbilitiesIDResult(ctx, pa, suffix)
	if err != nil {
		return nil, err
	}
	newpa := table.PokemonAbilities{}
	qb := sq.Select("*").From(`pokemon_abilities`)

	qb.Where(sq.Eq{"`id`": id})
	err = par.DB.Get(ctx, &newpa, qb)

	if err != nil {
		return nil, err
	}
	return &newpa, nil
}

func (par *PokemonAbilitiesRepository) InsertPokemonAbilitiesIDResult(ctx context.Context, pa table.PokemonAbilitiesCreate, suffix sq.Sqlizer) (int64, error) {
	var err error

	qb := sq.Insert("`pokemon_abilities`").Columns(
		"`fk_pokemon`",
		"`fk_ability`",
		"`is_hidden`",
		"`slot`",
	).Values(
		pa.FkPokemon,
		pa.FkAbility,
		pa.IsHidden,
		pa.Slot,
	)
	if suffix != nil {
		suffixQuery, suffixArgs, suffixErr := suffix.ToSql()
		if suffixErr != nil {
			return 0, suffixErr
		}
		qb.Suffix(suffixQuery, suffixArgs...)
	}

	// run query
	res, err := par.DB.Exec(ctx, qb)
	if err != nil {
		return 0, err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

func (par *PokemonAbilitiesRepository) UpdatePokemonAbilitiesByFields(ctx context.Context, id int, pa table.PokemonAbilitiesUpdate) (*table.PokemonAbilities, error) {
	var err error

	updateMap := map[string]interface{}{}
	if pa.FkPokemon != nil {
		updateMap["`fk_pokemon`"] = *pa.FkPokemon
	}
	if pa.FkAbility != nil {
		updateMap["`fk_ability`"] = *pa.FkAbility
	}
	if pa.IsHidden != nil {
		updateMap["`is_hidden`"] = *pa.IsHidden
	}
	if pa.Slot != nil {
		updateMap["`slot`"] = *pa.Slot
	}
	if pa.Active != nil {
		updateMap["`active`"] = *pa.Active
	}

	qb := sq.Update(`pokemon_abilities`).SetMap(updateMap).Where(sq.Eq{"`id`": id})

	_, err = par.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`pokemon_abilities`")

	selectQb = selectQb.Where(sq.Eq{"`id`": id})

	result := table.PokemonAbilities{}
	err = par.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil

}

func (par *PokemonAbilitiesRepository) UpdatePokemonAbilities(ctx context.Context, pa table.PokemonAbilities) (*table.PokemonAbilities, error) {
	var err error

	// sql query
	qb := sq.Update("`pokemon_abilities`").SetMap(map[string]interface{}{
		"`fk_pokemon`": pa.FkPokemon,
		"`fk_ability`": pa.FkAbility,
		"`is_hidden`":  pa.IsHidden,
		"`slot`":       pa.Slot,
		"`active`":     pa.Active,
	}).Where(sq.Eq{"`id`": pa.ID})

	// run query
	_, err = par.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`pokemon_abilities`")
	selectQb = selectQb.Where(sq.Eq{"`id`": pa.ID})

	result := table.PokemonAbilities{}
	err = par.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (par *PokemonAbilitiesRepository) DeletePokemonAbilities(ctx context.Context, pa table.PokemonAbilities) error {
	_, err := par.DeletePokemonAbilitiesByID(ctx, pa.ID)
	return err
}

func (par *PokemonAbilitiesRepository) DeletePokemonAbilitiesByID(ctx context.Context, id int) (bool, error) {
	var err error

	qb := sq.Update("`pokemon_abilities`").Set("active", false)

	qb = qb.Where(sq.Eq{"`id`": id})

	_, err = par.DB.Exec(ctx, qb)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (par *PokemonAbilitiesRepository) FindAllPokemonAbilitiesBaseQuery(ctx context.Context, filter *table.PokemonAbilitiesFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	return par.QueryBuilder.FindAllPokemonAbilitiesBaseQuery(ctx, filter, fields, suffixes...)
}

func (par *PokemonAbilitiesRepositoryQueryBuilder) FindAllPokemonAbilitiesBaseQuery(ctx context.Context, filter *table.PokemonAbilitiesFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	var err error
	qb := sq.Select(fields).From("`pokemon_abilities`")
	if filter != nil {
		if qb, err = internal.AddFilter(qb, "`pokemon_abilities`.`id`", filter.ID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_abilities`.`fk_pokemon`", filter.FkPokemon); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_abilities`.`fk_ability`", filter.FkAbility); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_abilities`.`is_hidden`", filter.IsHidden); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_abilities`.`slot`", filter.Slot); err != nil {
			return qb, err
		}
		if filter.Active == nil {
			if qb, err = internal.AddFilter(qb, "`pokemon_abilities`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
				return qb, err
			}
		} else {
			if qb, err = internal.AddFilter(qb, "`pokemon_abilities`.`active`", filter.Active); err != nil {
				return qb, err
			}
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_abilities`.`created_at`", filter.CreatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_abilities`.`updated_at`", filter.UpdatedAt); err != nil {
			return qb, err
		}
		qb, err = internal.AddAdditionalFilter(qb, filter.Wheres, filter.Joins, filter.LeftJoins, filter.GroupBys, filter.Havings)
		if err != nil {
			return qb, err
		}
	} else {
		if qb, err = internal.AddFilter(qb, "`pokemon_abilities`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
			return qb, err
		}
	}

	for _, suffix := range suffixes {
		query, args, err := suffix.ToSql()
		if err != nil {
			return qb, err
		}
		qb.Suffix(query, args...)
	}
	return qb, nil
}

func (par *PokemonAbilitiesRepository) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	return par.QueryBuilder.AddPagination(ctx, qb, pagination)
}

func (pa *PokemonAbilitiesRepositoryQueryBuilder) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	fields := []string{
		"id",
		"fk_pokemon",
		"fk_ability",
		"is_hidden",
		"slot",
		"active",
		"created_at",
		"updated_at",
	}
	return internal.AddPagination(qb, pagination, "pokemon_abilities", fields)
}

func (par *PokemonAbilitiesRepository) FindAllPokemonAbilities(ctx context.Context, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error) {
	return par.FindAllPokemonAbilitiesWithSuffix(ctx, filter, pagination)
}

func (par *PokemonAbilitiesRepository) FindAllPokemonAbilitiesWithSuffix(ctx context.Context, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonAbilities, error) {
	var list table.ListPokemonAbilities
	qb, err := par.FindAllPokemonAbilitiesBaseQuery(ctx, filter, "`pokemon_abilities`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb, err = par.AddPagination(ctx, qb, pagination)
	if err != nil {
		return &list, err
	}

	err = par.DB.Select(ctx, &list.Data, qb)

	if err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = par.FindAllPokemonAbilitiesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &table.ListPokemonAbilities{}, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	err = par.DB.Get(ctx, &listMeta, qb)

	list.TotalCount = listMeta.Count

	return &list, err
}

func (par *PokemonAbilitiesRepository) PokemonAbilitiesByFkAbility(ctx context.Context, fkAbility int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error) {
	return par.PokemonAbilitiesByFkAbilityWithSuffix(ctx, fkAbility, filter, pagination)
}

func (par *PokemonAbilitiesRepository) PokemonAbilitiesByFkAbilityWithSuffix(ctx context.Context, fkAbility int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonAbilities, error) {

	var list table.ListPokemonAbilities
	// sql query
	qb, err := par.FindAllPokemonAbilitiesBaseQuery(ctx, filter, "`pokemon_abilities`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`pokemon_abilities`.`fk_ability`": fkAbility})

	if qb, err = par.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = par.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = par.FindAllPokemonAbilitiesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`pokemon_abilities`.`fk_ability`": fkAbility})
	if err = par.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}

func (par *PokemonAbilitiesRepository) PokemonAbilitiesByFkPokemon(ctx context.Context, fkPokemon int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error) {
	return par.PokemonAbilitiesByFkPokemonWithSuffix(ctx, fkPokemon, filter, pagination)
}

func (par *PokemonAbilitiesRepository) PokemonAbilitiesByFkPokemonWithSuffix(ctx context.Context, fkPokemon int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonAbilities, error) {

	var list table.ListPokemonAbilities
	// sql query
	qb, err := par.FindAllPokemonAbilitiesBaseQuery(ctx, filter, "`pokemon_abilities`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`pokemon_abilities`.`fk_pokemon`": fkPokemon})

	if qb, err = par.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = par.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = par.FindAllPokemonAbilitiesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`pokemon_abilities`.`fk_pokemon`": fkPokemon})
	if err = par.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}
func (par *PokemonAbilitiesRepository) PokemonAbilitiesByID(ctx context.Context, iD int, filter *table.PokemonAbilitiesFilter) (table.PokemonAbilities, error) {
	return par.PokemonAbilitiesByIDWithSuffix(ctx, iD, filter)
}

func (par *PokemonAbilitiesRepository) PokemonAbilitiesByIDWithSuffix(ctx context.Context, iD int, filter *table.PokemonAbilitiesFilter, suffixes ...sq.Sqlizer) (table.PokemonAbilities, error) {
	var err error

	// sql query
	qb, err := par.FindAllPokemonAbilitiesBaseQuery(ctx, filter, "`pokemon_abilities`.*", suffixes...)
	if err != nil {
		return table.PokemonAbilities{}, err
	}
	qb = qb.Where(sq.Eq{"`pokemon_abilities`.`id`": iD})

	// run query
	pa := table.PokemonAbilities{}
	err = par.DB.Get(ctx, &pa, qb)
	if err != nil {
		return table.PokemonAbilities{}, err
	}
	return pa, nil
}
