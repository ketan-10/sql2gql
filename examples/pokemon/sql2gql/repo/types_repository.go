// Code generated by sql2gql. DO NOT EDIT.

package repo

import (
	"context"

	sq "github.com/elgris/sqrl"
	"github.com/google/wire"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/table"
)

type ITypesRepository interface {
	ITypesRepositoryQueryBuilder

	InsertTypes(ctx context.Context, t table.TypesCreate) (*table.Types, error)
	InsertTypesWithSuffix(ctx context.Context, t table.TypesCreate, suffix sq.Sqlizer) (*table.Types, error)
	InsertTypesIDResult(ctx context.Context, t table.TypesCreate, suffix sq.Sqlizer) (int64, error)

	UpdateTypesByFields(ctx context.Context, id int, t table.TypesUpdate) (*table.Types, error)
	UpdateTypes(ctx context.Context, t table.Types) (*table.Types, error)

	DeleteTypes(ctx context.Context, t table.Types) error
	DeleteTypesByID(ctx context.Context, id int) (bool, error)

	FindAllTypes(ctx context.Context, t *table.TypesFilter, pagination *internal.Pagination) (*table.ListTypes, error)
	FindAllTypesWithSuffix(ctx context.Context, t *table.TypesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTypes, error)
	TypesByID(ctx context.Context, iD int, filter *table.TypesFilter) (table.Types, error)

	TypesByIDWithSuffix(ctx context.Context, iD int, filter *table.TypesFilter, suffixes ...sq.Sqlizer) (table.Types, error)
}

type ITypesRepositoryQueryBuilder interface {
	FindAllTypesBaseQuery(ctx context.Context, filter *table.TypesFilter, fields string, suffix ...sq.Sqlizer) (*sq.SelectBuilder, error)
	AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error)
}

type TypesRepository struct {
	DB           internal.IDb
	QueryBuilder ITypesRepositoryQueryBuilder
}

type TypesRepositoryQueryBuilder struct {
}

var NewTypesRepository = wire.NewSet(
	wire.Struct(new(TypesRepository), "*"),
	wire.Struct(new(TypesRepositoryQueryBuilder), "*"),
	wire.Bind(new(ITypesRepository), new(*TypesRepository)),
	wire.Bind(new(ITypesRepositoryQueryBuilder), new(*TypesRepositoryQueryBuilder)),
)

func (tr *TypesRepository) InsertTypes(ctx context.Context, t table.TypesCreate) (*table.Types, error) {
	return tr.InsertTypesWithSuffix(ctx, t, nil)
}

func (tr *TypesRepository) InsertTypesWithSuffix(ctx context.Context, t table.TypesCreate, suffix sq.Sqlizer) (*table.Types, error) {
	var err error

	id, err := tr.InsertTypesIDResult(ctx, t, suffix)
	if err != nil {
		return nil, err
	}
	newt := table.Types{}
	qb := sq.Select("*").From(`types`)

	qb.Where(sq.Eq{"`id`": id})
	err = tr.DB.Get(ctx, &newt, qb)

	if err != nil {
		return nil, err
	}
	return &newt, nil
}

func (tr *TypesRepository) InsertTypesIDResult(ctx context.Context, t table.TypesCreate, suffix sq.Sqlizer) (int64, error) {
	var err error

	qb := sq.Insert("`types`").Columns(
		"`type_name`",
	).Values(
		t.TypeName,
	)
	if suffix != nil {
		suffixQuery, suffixArgs, suffixErr := suffix.ToSql()
		if suffixErr != nil {
			return 0, suffixErr
		}
		qb.Suffix(suffixQuery, suffixArgs...)
	}

	// run query
	res, err := tr.DB.Exec(ctx, qb)
	if err != nil {
		return 0, err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

func (tr *TypesRepository) UpdateTypesByFields(ctx context.Context, id int, t table.TypesUpdate) (*table.Types, error) {
	var err error

	updateMap := map[string]interface{}{}
	if t.TypeName != nil {
		updateMap["`type_name`"] = *t.TypeName
	}
	if t.Active != nil {
		updateMap["`active`"] = *t.Active
	}

	qb := sq.Update(`types`).SetMap(updateMap).Where(sq.Eq{"`id`": id})

	_, err = tr.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`types`")

	selectQb = selectQb.Where(sq.Eq{"`id`": id})

	result := table.Types{}
	err = tr.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil

}

func (tr *TypesRepository) UpdateTypes(ctx context.Context, t table.Types) (*table.Types, error) {
	var err error

	// sql query
	qb := sq.Update("`types`").SetMap(map[string]interface{}{
		"`type_name`": t.TypeName,
		"`active`":    t.Active,
	}).Where(sq.Eq{"`id`": t.ID})

	// run query
	_, err = tr.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`types`")
	selectQb = selectQb.Where(sq.Eq{"`id`": t.ID})

	result := table.Types{}
	err = tr.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (tr *TypesRepository) DeleteTypes(ctx context.Context, t table.Types) error {
	_, err := tr.DeleteTypesByID(ctx, t.ID)
	return err
}

func (tr *TypesRepository) DeleteTypesByID(ctx context.Context, id int) (bool, error) {
	var err error

	qb := sq.Update("`types`").Set("active", false)

	qb = qb.Where(sq.Eq{"`id`": id})

	_, err = tr.DB.Exec(ctx, qb)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (tr *TypesRepository) FindAllTypesBaseQuery(ctx context.Context, filter *table.TypesFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	return tr.QueryBuilder.FindAllTypesBaseQuery(ctx, filter, fields, suffixes...)
}

func (tr *TypesRepositoryQueryBuilder) FindAllTypesBaseQuery(ctx context.Context, filter *table.TypesFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	var err error
	qb := sq.Select(fields).From("`types`")
	if filter != nil {
		if qb, err = internal.AddFilter(qb, "`types`.`id`", filter.ID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`types`.`type_name`", filter.TypeName); err != nil {
			return qb, err
		}
		if filter.Active == nil {
			if qb, err = internal.AddFilter(qb, "`types`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
				return qb, err
			}
		} else {
			if qb, err = internal.AddFilter(qb, "`types`.`active`", filter.Active); err != nil {
				return qb, err
			}
		}
		if qb, err = internal.AddFilter(qb, "`types`.`created_at`", filter.CreatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`types`.`updated_at`", filter.UpdatedAt); err != nil {
			return qb, err
		}
		qb, err = internal.AddAdditionalFilter(qb, filter.Wheres, filter.Joins, filter.LeftJoins, filter.GroupBys, filter.Havings)
		if err != nil {
			return qb, err
		}
	} else {
		if qb, err = internal.AddFilter(qb, "`types`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
			return qb, err
		}
	}

	for _, suffix := range suffixes {
		query, args, err := suffix.ToSql()
		if err != nil {
			return qb, err
		}
		qb.Suffix(query, args...)
	}
	return qb, nil
}

func (tr *TypesRepository) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	return tr.QueryBuilder.AddPagination(ctx, qb, pagination)
}

func (t *TypesRepositoryQueryBuilder) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	fields := []string{
		"id",
		"type_name",
		"active",
		"created_at",
		"updated_at",
	}
	return internal.AddPagination(qb, pagination, "types", fields)
}

func (tr *TypesRepository) FindAllTypes(ctx context.Context, filter *table.TypesFilter, pagination *internal.Pagination) (*table.ListTypes, error) {
	return tr.FindAllTypesWithSuffix(ctx, filter, pagination)
}

func (tr *TypesRepository) FindAllTypesWithSuffix(ctx context.Context, filter *table.TypesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTypes, error) {
	var list table.ListTypes
	qb, err := tr.FindAllTypesBaseQuery(ctx, filter, "`types`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb, err = tr.AddPagination(ctx, qb, pagination)
	if err != nil {
		return &list, err
	}

	err = tr.DB.Select(ctx, &list.Data, qb)

	if err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = tr.FindAllTypesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &table.ListTypes{}, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	err = tr.DB.Get(ctx, &listMeta, qb)

	list.TotalCount = listMeta.Count

	return &list, err
}
func (tr *TypesRepository) TypesByID(ctx context.Context, iD int, filter *table.TypesFilter) (table.Types, error) {
	return tr.TypesByIDWithSuffix(ctx, iD, filter)
}

func (tr *TypesRepository) TypesByIDWithSuffix(ctx context.Context, iD int, filter *table.TypesFilter, suffixes ...sq.Sqlizer) (table.Types, error) {
	var err error

	// sql query
	qb, err := tr.FindAllTypesBaseQuery(ctx, filter, "`types`.*", suffixes...)
	if err != nil {
		return table.Types{}, err
	}
	qb = qb.Where(sq.Eq{"`types`.`id`": iD})

	// run query
	t := table.Types{}
	err = tr.DB.Get(ctx, &t, qb)
	if err != nil {
		return table.Types{}, err
	}
	return t, nil
}
