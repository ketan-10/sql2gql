// Code generated by sql2gql. DO NOT EDIT.

package repo

import (
	"context"

	sq "github.com/elgris/sqrl"
	"github.com/google/wire"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/table"
)

type IPokemonEvolutionRepository interface {
	IPokemonEvolutionRepositoryQueryBuilder

	InsertPokemonEvolution(ctx context.Context, pe table.PokemonEvolutionCreate) (*table.PokemonEvolution, error)
	InsertPokemonEvolutionWithSuffix(ctx context.Context, pe table.PokemonEvolutionCreate, suffix sq.Sqlizer) (*table.PokemonEvolution, error)
	InsertPokemonEvolutionIDResult(ctx context.Context, pe table.PokemonEvolutionCreate, suffix sq.Sqlizer) (int64, error)

	UpdatePokemonEvolutionByFields(ctx context.Context, id int, pe table.PokemonEvolutionUpdate) (*table.PokemonEvolution, error)
	UpdatePokemonEvolution(ctx context.Context, pe table.PokemonEvolution) (*table.PokemonEvolution, error)

	DeletePokemonEvolution(ctx context.Context, pe table.PokemonEvolution) error
	DeletePokemonEvolutionByID(ctx context.Context, id int) (bool, error)

	FindAllPokemonEvolution(ctx context.Context, pe *table.PokemonEvolutionFilter, pagination *internal.Pagination) (*table.ListPokemonEvolution, error)
	FindAllPokemonEvolutionWithSuffix(ctx context.Context, pe *table.PokemonEvolutionFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonEvolution, error)

	PokemonEvolutionByEvolvedSpeciesID(ctx context.Context, evolvedSpeciesID int, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination) (*table.ListPokemonEvolution, error)

	PokemonEvolutionByEvolvedSpeciesIDWithSuffix(ctx context.Context, evolvedSpeciesID int, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonEvolution, error)
	PokemonEvolutionByID(ctx context.Context, iD int, filter *table.PokemonEvolutionFilter) (table.PokemonEvolution, error)

	PokemonEvolutionByIDWithSuffix(ctx context.Context, iD int, filter *table.PokemonEvolutionFilter, suffixes ...sq.Sqlizer) (table.PokemonEvolution, error)
}

type IPokemonEvolutionRepositoryQueryBuilder interface {
	FindAllPokemonEvolutionBaseQuery(ctx context.Context, filter *table.PokemonEvolutionFilter, fields string, suffix ...sq.Sqlizer) (*sq.SelectBuilder, error)
	AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error)
}

type PokemonEvolutionRepository struct {
	DB           internal.IDb
	QueryBuilder IPokemonEvolutionRepositoryQueryBuilder
}

type PokemonEvolutionRepositoryQueryBuilder struct {
}

var NewPokemonEvolutionRepository = wire.NewSet(
	wire.Struct(new(PokemonEvolutionRepository), "*"),
	wire.Struct(new(PokemonEvolutionRepositoryQueryBuilder), "*"),
	wire.Bind(new(IPokemonEvolutionRepository), new(*PokemonEvolutionRepository)),
	wire.Bind(new(IPokemonEvolutionRepositoryQueryBuilder), new(*PokemonEvolutionRepositoryQueryBuilder)),
)

func (per *PokemonEvolutionRepository) InsertPokemonEvolution(ctx context.Context, pe table.PokemonEvolutionCreate) (*table.PokemonEvolution, error) {
	return per.InsertPokemonEvolutionWithSuffix(ctx, pe, nil)
}

func (per *PokemonEvolutionRepository) InsertPokemonEvolutionWithSuffix(ctx context.Context, pe table.PokemonEvolutionCreate, suffix sq.Sqlizer) (*table.PokemonEvolution, error) {
	var err error

	id, err := per.InsertPokemonEvolutionIDResult(ctx, pe, suffix)
	if err != nil {
		return nil, err
	}
	newpe := table.PokemonEvolution{}
	qb := sq.Select("*").From(`pokemon_evolution`)

	qb.Where(sq.Eq{"`id`": id})
	err = per.DB.Get(ctx, &newpe, qb)

	if err != nil {
		return nil, err
	}
	return &newpe, nil
}

func (per *PokemonEvolutionRepository) InsertPokemonEvolutionIDResult(ctx context.Context, pe table.PokemonEvolutionCreate, suffix sq.Sqlizer) (int64, error) {
	var err error

	qb := sq.Insert("`pokemon_evolution`").Columns(
		"`evolved_species_id`",
		"`evol_minimum_level`",
	).Values(
		pe.EvolvedSpeciesID,
		pe.EvolMinimumLevel,
	)
	if suffix != nil {
		suffixQuery, suffixArgs, suffixErr := suffix.ToSql()
		if suffixErr != nil {
			return 0, suffixErr
		}
		qb.Suffix(suffixQuery, suffixArgs...)
	}

	// run query
	res, err := per.DB.Exec(ctx, qb)
	if err != nil {
		return 0, err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

func (per *PokemonEvolutionRepository) UpdatePokemonEvolutionByFields(ctx context.Context, id int, pe table.PokemonEvolutionUpdate) (*table.PokemonEvolution, error) {
	var err error

	updateMap := map[string]interface{}{}
	if pe.EvolvedSpeciesID != nil {
		updateMap["`evolved_species_id`"] = *pe.EvolvedSpeciesID
	}
	if pe.EvolMinimumLevel != nil {
		updateMap["`evol_minimum_level`"] = *pe.EvolMinimumLevel
	}
	if pe.Active != nil {
		updateMap["`active`"] = *pe.Active
	}

	qb := sq.Update(`pokemon_evolution`).SetMap(updateMap).Where(sq.Eq{"`id`": id})

	_, err = per.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`pokemon_evolution`")

	selectQb = selectQb.Where(sq.Eq{"`id`": id})

	result := table.PokemonEvolution{}
	err = per.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil

}

func (per *PokemonEvolutionRepository) UpdatePokemonEvolution(ctx context.Context, pe table.PokemonEvolution) (*table.PokemonEvolution, error) {
	var err error

	// sql query
	qb := sq.Update("`pokemon_evolution`").SetMap(map[string]interface{}{
		"`evolved_species_id`": pe.EvolvedSpeciesID,
		"`evol_minimum_level`": pe.EvolMinimumLevel,
		"`active`":             pe.Active,
	}).Where(sq.Eq{"`id`": pe.ID})

	// run query
	_, err = per.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`pokemon_evolution`")
	selectQb = selectQb.Where(sq.Eq{"`id`": pe.ID})

	result := table.PokemonEvolution{}
	err = per.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (per *PokemonEvolutionRepository) DeletePokemonEvolution(ctx context.Context, pe table.PokemonEvolution) error {
	_, err := per.DeletePokemonEvolutionByID(ctx, pe.ID)
	return err
}

func (per *PokemonEvolutionRepository) DeletePokemonEvolutionByID(ctx context.Context, id int) (bool, error) {
	var err error

	qb := sq.Update("`pokemon_evolution`").Set("active", false)

	qb = qb.Where(sq.Eq{"`id`": id})

	_, err = per.DB.Exec(ctx, qb)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (per *PokemonEvolutionRepository) FindAllPokemonEvolutionBaseQuery(ctx context.Context, filter *table.PokemonEvolutionFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	return per.QueryBuilder.FindAllPokemonEvolutionBaseQuery(ctx, filter, fields, suffixes...)
}

func (per *PokemonEvolutionRepositoryQueryBuilder) FindAllPokemonEvolutionBaseQuery(ctx context.Context, filter *table.PokemonEvolutionFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	var err error
	qb := sq.Select(fields).From("`pokemon_evolution`")
	if filter != nil {
		if qb, err = internal.AddFilter(qb, "`pokemon_evolution`.`id`", filter.ID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_evolution`.`evolved_species_id`", filter.EvolvedSpeciesID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_evolution`.`evol_minimum_level`", filter.EvolMinimumLevel); err != nil {
			return qb, err
		}
		if filter.Active == nil {
			if qb, err = internal.AddFilter(qb, "`pokemon_evolution`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
				return qb, err
			}
		} else {
			if qb, err = internal.AddFilter(qb, "`pokemon_evolution`.`active`", filter.Active); err != nil {
				return qb, err
			}
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_evolution`.`created_at`", filter.CreatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon_evolution`.`updated_at`", filter.UpdatedAt); err != nil {
			return qb, err
		}
		qb, err = internal.AddAdditionalFilter(qb, filter.Wheres, filter.Joins, filter.LeftJoins, filter.GroupBys, filter.Havings)
		if err != nil {
			return qb, err
		}
	} else {
		if qb, err = internal.AddFilter(qb, "`pokemon_evolution`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
			return qb, err
		}
	}

	for _, suffix := range suffixes {
		query, args, err := suffix.ToSql()
		if err != nil {
			return qb, err
		}
		qb.Suffix(query, args...)
	}
	return qb, nil
}

func (per *PokemonEvolutionRepository) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	return per.QueryBuilder.AddPagination(ctx, qb, pagination)
}

func (pe *PokemonEvolutionRepositoryQueryBuilder) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	fields := []string{
		"id",
		"evolved_species_id",
		"evol_minimum_level",
		"active",
		"created_at",
		"updated_at",
	}
	return internal.AddPagination(qb, pagination, "pokemon_evolution", fields)
}

func (per *PokemonEvolutionRepository) FindAllPokemonEvolution(ctx context.Context, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination) (*table.ListPokemonEvolution, error) {
	return per.FindAllPokemonEvolutionWithSuffix(ctx, filter, pagination)
}

func (per *PokemonEvolutionRepository) FindAllPokemonEvolutionWithSuffix(ctx context.Context, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonEvolution, error) {
	var list table.ListPokemonEvolution
	qb, err := per.FindAllPokemonEvolutionBaseQuery(ctx, filter, "`pokemon_evolution`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb, err = per.AddPagination(ctx, qb, pagination)
	if err != nil {
		return &list, err
	}

	err = per.DB.Select(ctx, &list.Data, qb)

	if err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = per.FindAllPokemonEvolutionBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &table.ListPokemonEvolution{}, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	err = per.DB.Get(ctx, &listMeta, qb)

	list.TotalCount = listMeta.Count

	return &list, err
}

func (per *PokemonEvolutionRepository) PokemonEvolutionByEvolvedSpeciesID(ctx context.Context, evolvedSpeciesID int, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination) (*table.ListPokemonEvolution, error) {
	return per.PokemonEvolutionByEvolvedSpeciesIDWithSuffix(ctx, evolvedSpeciesID, filter, pagination)
}

func (per *PokemonEvolutionRepository) PokemonEvolutionByEvolvedSpeciesIDWithSuffix(ctx context.Context, evolvedSpeciesID int, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemonEvolution, error) {

	var list table.ListPokemonEvolution
	// sql query
	qb, err := per.FindAllPokemonEvolutionBaseQuery(ctx, filter, "`pokemon_evolution`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`pokemon_evolution`.`evolved_species_id`": evolvedSpeciesID})

	if qb, err = per.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = per.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = per.FindAllPokemonEvolutionBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`pokemon_evolution`.`evolved_species_id`": evolvedSpeciesID})
	if err = per.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}
func (per *PokemonEvolutionRepository) PokemonEvolutionByID(ctx context.Context, iD int, filter *table.PokemonEvolutionFilter) (table.PokemonEvolution, error) {
	return per.PokemonEvolutionByIDWithSuffix(ctx, iD, filter)
}

func (per *PokemonEvolutionRepository) PokemonEvolutionByIDWithSuffix(ctx context.Context, iD int, filter *table.PokemonEvolutionFilter, suffixes ...sq.Sqlizer) (table.PokemonEvolution, error) {
	var err error

	// sql query
	qb, err := per.FindAllPokemonEvolutionBaseQuery(ctx, filter, "`pokemon_evolution`.*", suffixes...)
	if err != nil {
		return table.PokemonEvolution{}, err
	}
	qb = qb.Where(sq.Eq{"`pokemon_evolution`.`id`": iD})

	// run query
	pe := table.PokemonEvolution{}
	err = per.DB.Get(ctx, &pe, qb)
	if err != nil {
		return table.PokemonEvolution{}, err
	}
	return pe, nil
}
