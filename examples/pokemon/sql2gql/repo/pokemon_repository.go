// Code generated by sql2gql. DO NOT EDIT.

package repo

import (
	"context"

	sq "github.com/elgris/sqrl"
	"github.com/google/wire"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/table"
)

type IPokemonRepository interface {
	IPokemonRepositoryQueryBuilder

	InsertPokemon(ctx context.Context, p table.PokemonCreate) (*table.Pokemon, error)
	InsertPokemonWithSuffix(ctx context.Context, p table.PokemonCreate, suffix sq.Sqlizer) (*table.Pokemon, error)
	InsertPokemonIDResult(ctx context.Context, p table.PokemonCreate, suffix sq.Sqlizer) (int64, error)

	UpdatePokemonByFields(ctx context.Context, id int, p table.PokemonUpdate) (*table.Pokemon, error)
	UpdatePokemon(ctx context.Context, p table.Pokemon) (*table.Pokemon, error)

	DeletePokemon(ctx context.Context, p table.Pokemon) error
	DeletePokemonByID(ctx context.Context, id int) (bool, error)

	FindAllPokemon(ctx context.Context, p *table.PokemonFilter, pagination *internal.Pagination) (*table.ListPokemon, error)
	FindAllPokemonWithSuffix(ctx context.Context, p *table.PokemonFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemon, error)

	PokemonByPokemonName(ctx context.Context, pokemonName string, filter *table.PokemonFilter, pagination *internal.Pagination) (*table.ListPokemon, error)

	PokemonByPokemonNameWithSuffix(ctx context.Context, pokemonName string, filter *table.PokemonFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemon, error)
	PokemonByID(ctx context.Context, iD int, filter *table.PokemonFilter) (*table.Pokemon, error)

	PokemonByIDWithSuffix(ctx context.Context, iD int, filter *table.PokemonFilter, suffixes ...sq.Sqlizer) (*table.Pokemon, error)
}

type IPokemonRepositoryQueryBuilder interface {
	FindAllPokemonBaseQuery(ctx context.Context, filter *table.PokemonFilter, fields string, suffix ...sq.Sqlizer) (*sq.SelectBuilder, error)
	AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error)
}

type PokemonRepository struct {
	DB           internal.IDb
	QueryBuilder IPokemonRepositoryQueryBuilder
}

type PokemonRepositoryQueryBuilder struct {
}

var NewPokemonRepository = wire.NewSet(
	wire.Struct(new(PokemonRepository), "*"),
	wire.Struct(new(PokemonRepositoryQueryBuilder), "*"),
	wire.Bind(new(IPokemonRepository), new(*PokemonRepository)),
	wire.Bind(new(IPokemonRepositoryQueryBuilder), new(*PokemonRepositoryQueryBuilder)),
)

func (pr *PokemonRepository) InsertPokemon(ctx context.Context, p table.PokemonCreate) (*table.Pokemon, error) {
	return pr.InsertPokemonWithSuffix(ctx, p, nil)
}

func (pr *PokemonRepository) InsertPokemonWithSuffix(ctx context.Context, p table.PokemonCreate, suffix sq.Sqlizer) (*table.Pokemon, error) {
	var err error

	id, err := pr.InsertPokemonIDResult(ctx, p, suffix)
	if err != nil {
		return nil, err
	}
	newp := table.Pokemon{}
	qb := sq.Select("*").From(`pokemon`)

	qb.Where(sq.Eq{"`id`": id})
	err = pr.DB.Get(ctx, &newp, qb)

	if err != nil {
		return nil, err
	}
	return &newp, nil
}

func (pr *PokemonRepository) InsertPokemonIDResult(ctx context.Context, p table.PokemonCreate, suffix sq.Sqlizer) (int64, error) {
	var err error

	qb := sq.Insert("`pokemon`").Columns(
		"`pokemon_name`",
		"`pokemon_height`",
		"`pokemon_weight`",
		"`pokemon_base_experience`",
	).Values(
		p.PokemonName,
		p.PokemonHeight,
		p.PokemonWeight,
		p.PokemonBaseExperience,
	)
	if suffix != nil {
		suffixQuery, suffixArgs, suffixErr := suffix.ToSql()
		if suffixErr != nil {
			return 0, suffixErr
		}
		qb.Suffix(suffixQuery, suffixArgs...)
	}

	// run query
	res, err := pr.DB.Exec(ctx, qb)
	if err != nil {
		return 0, err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

func (pr *PokemonRepository) UpdatePokemonByFields(ctx context.Context, id int, p table.PokemonUpdate) (*table.Pokemon, error) {
	var err error

	updateMap := map[string]interface{}{}
	if p.PokemonName != nil {
		updateMap["`pokemon_name`"] = *p.PokemonName
	}
	if p.PokemonHeight != nil {
		updateMap["`pokemon_height`"] = *p.PokemonHeight
	}
	if p.PokemonWeight != nil {
		updateMap["`pokemon_weight`"] = *p.PokemonWeight
	}
	if p.PokemonBaseExperience != nil {
		updateMap["`pokemon_base_experience`"] = *p.PokemonBaseExperience
	}
	if p.Active != nil {
		updateMap["`active`"] = *p.Active
	}

	qb := sq.Update(`pokemon`).SetMap(updateMap).Where(sq.Eq{"`id`": id})

	_, err = pr.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`pokemon`")

	selectQb = selectQb.Where(sq.Eq{"`id`": id})

	result := table.Pokemon{}
	err = pr.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil

}

func (pr *PokemonRepository) UpdatePokemon(ctx context.Context, p table.Pokemon) (*table.Pokemon, error) {
	var err error

	// sql query
	qb := sq.Update("`pokemon`").SetMap(map[string]interface{}{
		"`pokemon_name`":            p.PokemonName,
		"`pokemon_height`":          p.PokemonHeight,
		"`pokemon_weight`":          p.PokemonWeight,
		"`pokemon_base_experience`": p.PokemonBaseExperience,
		"`active`":                  p.Active,
	}).Where(sq.Eq{"`id`": p.ID})

	// run query
	_, err = pr.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`pokemon`")
	selectQb = selectQb.Where(sq.Eq{"`id`": p.ID})

	result := table.Pokemon{}
	err = pr.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (pr *PokemonRepository) DeletePokemon(ctx context.Context, p table.Pokemon) error {
	_, err := pr.DeletePokemonByID(ctx, p.ID)
	return err
}

func (pr *PokemonRepository) DeletePokemonByID(ctx context.Context, id int) (bool, error) {
	var err error

	qb := sq.Update("`pokemon`").Set("active", false)

	qb = qb.Where(sq.Eq{"`id`": id})

	_, err = pr.DB.Exec(ctx, qb)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (pr *PokemonRepository) FindAllPokemonBaseQuery(ctx context.Context, filter *table.PokemonFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	return pr.QueryBuilder.FindAllPokemonBaseQuery(ctx, filter, fields, suffixes...)
}

func (pr *PokemonRepositoryQueryBuilder) FindAllPokemonBaseQuery(ctx context.Context, filter *table.PokemonFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	var err error
	qb := sq.Select(fields).From("`pokemon`")
	if filter != nil {
		if qb, err = internal.AddFilter(qb, "`pokemon`.`id`", filter.ID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon`.`pokemon_name`", filter.PokemonName); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon`.`pokemon_height`", filter.PokemonHeight); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon`.`pokemon_weight`", filter.PokemonWeight); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon`.`pokemon_base_experience`", filter.PokemonBaseExperience); err != nil {
			return qb, err
		}
		if filter.Active == nil {
			if qb, err = internal.AddFilter(qb, "`pokemon`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
				return qb, err
			}
		} else {
			if qb, err = internal.AddFilter(qb, "`pokemon`.`active`", filter.Active); err != nil {
				return qb, err
			}
		}
		if qb, err = internal.AddFilter(qb, "`pokemon`.`created_at`", filter.CreatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`pokemon`.`updated_at`", filter.UpdatedAt); err != nil {
			return qb, err
		}
		qb, err = internal.AddAdditionalFilter(qb, filter.Wheres, filter.Joins, filter.LeftJoins, filter.GroupBys, filter.Havings)
		if err != nil {
			return qb, err
		}
	} else {
		if qb, err = internal.AddFilter(qb, "`pokemon`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
			return qb, err
		}
	}

	for _, suffix := range suffixes {
		query, args, err := suffix.ToSql()
		if err != nil {
			return qb, err
		}
		qb.Suffix(query, args...)
	}
	return qb, nil
}

func (pr *PokemonRepository) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	return pr.QueryBuilder.AddPagination(ctx, qb, pagination)
}

func (p *PokemonRepositoryQueryBuilder) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	fields := []string{
		"id",
		"pokemon_name",
		"pokemon_height",
		"pokemon_weight",
		"pokemon_base_experience",
		"active",
		"created_at",
		"updated_at",
	}
	return internal.AddPagination(qb, pagination, "pokemon", fields)
}

func (pr *PokemonRepository) FindAllPokemon(ctx context.Context, filter *table.PokemonFilter, pagination *internal.Pagination) (*table.ListPokemon, error) {
	return pr.FindAllPokemonWithSuffix(ctx, filter, pagination)
}

func (pr *PokemonRepository) FindAllPokemonWithSuffix(ctx context.Context, filter *table.PokemonFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemon, error) {
	var list table.ListPokemon
	qb, err := pr.FindAllPokemonBaseQuery(ctx, filter, "`pokemon`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb, err = pr.AddPagination(ctx, qb, pagination)
	if err != nil {
		return &list, err
	}

	err = pr.DB.Select(ctx, &list.Data, qb)

	if err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = pr.FindAllPokemonBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &table.ListPokemon{}, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	err = pr.DB.Get(ctx, &listMeta, qb)

	list.TotalCount = listMeta.Count

	return &list, err
}

func (pr *PokemonRepository) PokemonByPokemonName(ctx context.Context, pokemonName string, filter *table.PokemonFilter, pagination *internal.Pagination) (*table.ListPokemon, error) {
	return pr.PokemonByPokemonNameWithSuffix(ctx, pokemonName, filter, pagination)
}

func (pr *PokemonRepository) PokemonByPokemonNameWithSuffix(ctx context.Context, pokemonName string, filter *table.PokemonFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListPokemon, error) {

	var list table.ListPokemon
	// sql query
	qb, err := pr.FindAllPokemonBaseQuery(ctx, filter, "`pokemon`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`pokemon`.`pokemon_name`": pokemonName})

	if qb, err = pr.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = pr.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = pr.FindAllPokemonBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`pokemon`.`pokemon_name`": pokemonName})
	if err = pr.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}
func (pr *PokemonRepository) PokemonByID(ctx context.Context, iD int, filter *table.PokemonFilter) (*table.Pokemon, error) {
	return pr.PokemonByIDWithSuffix(ctx, iD, filter)
}

func (pr *PokemonRepository) PokemonByIDWithSuffix(ctx context.Context, iD int, filter *table.PokemonFilter, suffixes ...sq.Sqlizer) (*table.Pokemon, error) {
	var err error

	// sql query
	qb, err := pr.FindAllPokemonBaseQuery(ctx, filter, "`pokemon`.*", suffixes...)
	if err != nil {
		return &table.Pokemon{}, err
	}
	qb = qb.Where(sq.Eq{"`pokemon`.`id`": iD})

	// run query
	p := table.Pokemon{}
	err = pr.DB.Get(ctx, &p, qb)
	if err != nil {
		return &table.Pokemon{}, err
	}
	return &p, nil
}
