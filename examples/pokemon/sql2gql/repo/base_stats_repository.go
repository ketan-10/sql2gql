// Code generated by sql2gql. DO NOT EDIT.

package repo

import (
	"context"

	sq "github.com/elgris/sqrl"
	"github.com/google/wire"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/table"
)

type IBaseStatsRepository interface {
	IBaseStatsRepositoryQueryBuilder

	InsertBaseStats(ctx context.Context, bs table.BaseStatsCreate) (*table.BaseStats, error)
	InsertBaseStatsWithSuffix(ctx context.Context, bs table.BaseStatsCreate, suffix sq.Sqlizer) (*table.BaseStats, error)
	InsertBaseStatsIDResult(ctx context.Context, bs table.BaseStatsCreate, suffix sq.Sqlizer) (int64, error)

	UpdateBaseStatsByFields(ctx context.Context, id int, bs table.BaseStatsUpdate) (*table.BaseStats, error)
	UpdateBaseStats(ctx context.Context, bs table.BaseStats) (*table.BaseStats, error)

	DeleteBaseStats(ctx context.Context, bs table.BaseStats) error
	DeleteBaseStatsByID(ctx context.Context, id int) (bool, error)

	FindAllBaseStats(ctx context.Context, bs *table.BaseStatsFilter, pagination *internal.Pagination) (*table.ListBaseStats, error)
	FindAllBaseStatsWithSuffix(ctx context.Context, bs *table.BaseStatsFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListBaseStats, error)
	BaseStatsByID(ctx context.Context, iD int, filter *table.BaseStatsFilter) (*table.BaseStats, error)

	BaseStatsByIDWithSuffix(ctx context.Context, iD int, filter *table.BaseStatsFilter, suffixes ...sq.Sqlizer) (*table.BaseStats, error)

	BaseStatsByFkPokemon(ctx context.Context, fkPokemon int, filter *table.BaseStatsFilter, pagination *internal.Pagination) (*table.ListBaseStats, error)

	BaseStatsByFkPokemonWithSuffix(ctx context.Context, fkPokemon int, filter *table.BaseStatsFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListBaseStats, error)
}

type IBaseStatsRepositoryQueryBuilder interface {
	FindAllBaseStatsBaseQuery(ctx context.Context, filter *table.BaseStatsFilter, fields string, suffix ...sq.Sqlizer) (*sq.SelectBuilder, error)
	AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error)
}

type BaseStatsRepository struct {
	DB           internal.IDb
	QueryBuilder IBaseStatsRepositoryQueryBuilder
}

type BaseStatsRepositoryQueryBuilder struct {
}

var NewBaseStatsRepository = wire.NewSet(
	wire.Struct(new(BaseStatsRepository), "*"),
	wire.Struct(new(BaseStatsRepositoryQueryBuilder), "*"),
	wire.Bind(new(IBaseStatsRepository), new(*BaseStatsRepository)),
	wire.Bind(new(IBaseStatsRepositoryQueryBuilder), new(*BaseStatsRepositoryQueryBuilder)),
)

func (bsr *BaseStatsRepository) InsertBaseStats(ctx context.Context, bs table.BaseStatsCreate) (*table.BaseStats, error) {
	return bsr.InsertBaseStatsWithSuffix(ctx, bs, nil)
}

func (bsr *BaseStatsRepository) InsertBaseStatsWithSuffix(ctx context.Context, bs table.BaseStatsCreate, suffix sq.Sqlizer) (*table.BaseStats, error) {
	var err error

	id, err := bsr.InsertBaseStatsIDResult(ctx, bs, suffix)
	if err != nil {
		return nil, err
	}
	newbs := table.BaseStats{}
	qb := sq.Select("*").From(`base_stats`)

	qb.Where(sq.Eq{"`id`": id})
	err = bsr.DB.Get(ctx, &newbs, qb)

	if err != nil {
		return nil, err
	}
	return &newbs, nil
}

func (bsr *BaseStatsRepository) InsertBaseStatsIDResult(ctx context.Context, bs table.BaseStatsCreate, suffix sq.Sqlizer) (int64, error) {
	var err error

	qb := sq.Insert("`base_stats`").Columns(
		"`fk_pokemon`",
		"`b_hp`",
		"`b_atk`",
		"`b_def`",
		"`b_sp_atk`",
		"`b_sp_def`",
		"`b_speed`",
	).Values(
		bs.FkPokemon,
		bs.BHp,
		bs.BAtk,
		bs.BDef,
		bs.BSpAtk,
		bs.BSpDef,
		bs.BSpeed,
	)
	if suffix != nil {
		suffixQuery, suffixArgs, suffixErr := suffix.ToSql()
		if suffixErr != nil {
			return 0, suffixErr
		}
		qb.Suffix(suffixQuery, suffixArgs...)
	}

	// run query
	res, err := bsr.DB.Exec(ctx, qb)
	if err != nil {
		return 0, err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

func (bsr *BaseStatsRepository) UpdateBaseStatsByFields(ctx context.Context, id int, bs table.BaseStatsUpdate) (*table.BaseStats, error) {
	var err error

	updateMap := map[string]interface{}{}
	if bs.FkPokemon != nil {
		updateMap["`fk_pokemon`"] = *bs.FkPokemon
	}
	if bs.BHp != nil {
		updateMap["`b_hp`"] = *bs.BHp
	}
	if bs.BAtk != nil {
		updateMap["`b_atk`"] = *bs.BAtk
	}
	if bs.BDef != nil {
		updateMap["`b_def`"] = *bs.BDef
	}
	if bs.BSpAtk != nil {
		updateMap["`b_sp_atk`"] = *bs.BSpAtk
	}
	if bs.BSpDef != nil {
		updateMap["`b_sp_def`"] = *bs.BSpDef
	}
	if bs.BSpeed != nil {
		updateMap["`b_speed`"] = *bs.BSpeed
	}
	if bs.Active != nil {
		updateMap["`active`"] = *bs.Active
	}

	qb := sq.Update(`base_stats`).SetMap(updateMap).Where(sq.Eq{"`id`": id})

	_, err = bsr.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`base_stats`")

	selectQb = selectQb.Where(sq.Eq{"`id`": id})

	result := table.BaseStats{}
	err = bsr.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil

}

func (bsr *BaseStatsRepository) UpdateBaseStats(ctx context.Context, bs table.BaseStats) (*table.BaseStats, error) {
	var err error

	// sql query
	qb := sq.Update("`base_stats`").SetMap(map[string]interface{}{
		"`fk_pokemon`": bs.FkPokemon,
		"`b_hp`":       bs.BHp,
		"`b_atk`":      bs.BAtk,
		"`b_def`":      bs.BDef,
		"`b_sp_atk`":   bs.BSpAtk,
		"`b_sp_def`":   bs.BSpDef,
		"`b_speed`":    bs.BSpeed,
		"`active`":     bs.Active,
	}).Where(sq.Eq{"`id`": bs.ID})

	// run query
	_, err = bsr.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`base_stats`")
	selectQb = selectQb.Where(sq.Eq{"`id`": bs.ID})

	result := table.BaseStats{}
	err = bsr.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (bsr *BaseStatsRepository) DeleteBaseStats(ctx context.Context, bs table.BaseStats) error {
	_, err := bsr.DeleteBaseStatsByID(ctx, bs.ID)
	return err
}

func (bsr *BaseStatsRepository) DeleteBaseStatsByID(ctx context.Context, id int) (bool, error) {
	var err error

	qb := sq.Update("`base_stats`").Set("active", false)

	qb = qb.Where(sq.Eq{"`id`": id})

	_, err = bsr.DB.Exec(ctx, qb)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (bsr *BaseStatsRepository) FindAllBaseStatsBaseQuery(ctx context.Context, filter *table.BaseStatsFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	return bsr.QueryBuilder.FindAllBaseStatsBaseQuery(ctx, filter, fields, suffixes...)
}

func (bsr *BaseStatsRepositoryQueryBuilder) FindAllBaseStatsBaseQuery(ctx context.Context, filter *table.BaseStatsFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	var err error
	qb := sq.Select(fields).From("`base_stats`")
	if filter != nil {
		if qb, err = internal.AddFilter(qb, "`base_stats`.`id`", filter.ID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`base_stats`.`fk_pokemon`", filter.FkPokemon); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`base_stats`.`b_hp`", filter.BHp); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`base_stats`.`b_atk`", filter.BAtk); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`base_stats`.`b_def`", filter.BDef); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`base_stats`.`b_sp_atk`", filter.BSpAtk); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`base_stats`.`b_sp_def`", filter.BSpDef); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`base_stats`.`b_speed`", filter.BSpeed); err != nil {
			return qb, err
		}
		if filter.Active == nil {
			if qb, err = internal.AddFilter(qb, "`base_stats`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
				return qb, err
			}
		} else {
			if qb, err = internal.AddFilter(qb, "`base_stats`.`active`", filter.Active); err != nil {
				return qb, err
			}
		}
		if qb, err = internal.AddFilter(qb, "`base_stats`.`created_at`", filter.CreatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`base_stats`.`updated_at`", filter.UpdatedAt); err != nil {
			return qb, err
		}
		qb, err = internal.AddAdditionalFilter(qb, filter.Wheres, filter.Joins, filter.LeftJoins, filter.GroupBys, filter.Havings)
		if err != nil {
			return qb, err
		}
	} else {
		if qb, err = internal.AddFilter(qb, "`base_stats`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
			return qb, err
		}
	}

	for _, suffix := range suffixes {
		query, args, err := suffix.ToSql()
		if err != nil {
			return qb, err
		}
		qb.Suffix(query, args...)
	}
	return qb, nil
}

func (bsr *BaseStatsRepository) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	return bsr.QueryBuilder.AddPagination(ctx, qb, pagination)
}

func (bs *BaseStatsRepositoryQueryBuilder) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	fields := []string{
		"id",
		"fk_pokemon",
		"b_hp",
		"b_atk",
		"b_def",
		"b_sp_atk",
		"b_sp_def",
		"b_speed",
		"active",
		"created_at",
		"updated_at",
	}
	return internal.AddPagination(qb, pagination, "base_stats", fields)
}

func (bsr *BaseStatsRepository) FindAllBaseStats(ctx context.Context, filter *table.BaseStatsFilter, pagination *internal.Pagination) (*table.ListBaseStats, error) {
	return bsr.FindAllBaseStatsWithSuffix(ctx, filter, pagination)
}

func (bsr *BaseStatsRepository) FindAllBaseStatsWithSuffix(ctx context.Context, filter *table.BaseStatsFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListBaseStats, error) {
	var list table.ListBaseStats
	qb, err := bsr.FindAllBaseStatsBaseQuery(ctx, filter, "`base_stats`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb, err = bsr.AddPagination(ctx, qb, pagination)
	if err != nil {
		return &list, err
	}

	err = bsr.DB.Select(ctx, &list.Data, qb)

	if err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = bsr.FindAllBaseStatsBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &table.ListBaseStats{}, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	err = bsr.DB.Get(ctx, &listMeta, qb)

	list.TotalCount = listMeta.Count

	return &list, err
}
func (bsr *BaseStatsRepository) BaseStatsByID(ctx context.Context, iD int, filter *table.BaseStatsFilter) (*table.BaseStats, error) {
	return bsr.BaseStatsByIDWithSuffix(ctx, iD, filter)
}

func (bsr *BaseStatsRepository) BaseStatsByIDWithSuffix(ctx context.Context, iD int, filter *table.BaseStatsFilter, suffixes ...sq.Sqlizer) (*table.BaseStats, error) {
	var err error

	// sql query
	qb, err := bsr.FindAllBaseStatsBaseQuery(ctx, filter, "`base_stats`.*", suffixes...)
	if err != nil {
		return &table.BaseStats{}, err
	}
	qb = qb.Where(sq.Eq{"`base_stats`.`id`": iD})

	// run query
	bs := table.BaseStats{}
	err = bsr.DB.Get(ctx, &bs, qb)
	if err != nil {
		return &table.BaseStats{}, err
	}
	return &bs, nil
}

func (bsr *BaseStatsRepository) BaseStatsByFkPokemon(ctx context.Context, fkPokemon int, filter *table.BaseStatsFilter, pagination *internal.Pagination) (*table.ListBaseStats, error) {
	return bsr.BaseStatsByFkPokemonWithSuffix(ctx, fkPokemon, filter, pagination)
}

func (bsr *BaseStatsRepository) BaseStatsByFkPokemonWithSuffix(ctx context.Context, fkPokemon int, filter *table.BaseStatsFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListBaseStats, error) {

	var list table.ListBaseStats
	// sql query
	qb, err := bsr.FindAllBaseStatsBaseQuery(ctx, filter, "`base_stats`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`base_stats`.`fk_pokemon`": fkPokemon})

	if qb, err = bsr.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = bsr.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = bsr.FindAllBaseStatsBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`base_stats`.`fk_pokemon`": fkPokemon})
	if err = bsr.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}
