// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"bytes"
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/enum"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/table"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Abilities() AbilitiesResolver
	BaseStats() BaseStatsResolver
	Mutation() MutationResolver
	Pokemon() PokemonResolver
	PokemonAbilities() PokemonAbilitiesResolver
	PokemonEvolution() PokemonEvolutionResolver
	PokemonEvolutionMatchup() PokemonEvolutionMatchupResolver
	PokemonTypes() PokemonTypesResolver
	Query() QueryResolver
	Types() TypesResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Abilities struct {
		AbilityName                      func(childComplexity int) int
		Active                           func(childComplexity int) int
		CreatedAt                        func(childComplexity int) int
		ID                               func(childComplexity int) int
		PokemonAbilitiesThroughFkAbility func(childComplexity int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) int
		UpdatedAt                        func(childComplexity int) int
	}

	BaseStats struct {
		Active                  func(childComplexity int) int
		BAtk                    func(childComplexity int) int
		BDef                    func(childComplexity int) int
		BHp                     func(childComplexity int) int
		BSpAtk                  func(childComplexity int) int
		BSpDef                  func(childComplexity int) int
		BSpeed                  func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		FkPokemon               func(childComplexity int) int
		ID                      func(childComplexity int) int
		PokemonThroughFkPokemon func(childComplexity int, filter *table.PokemonFilter) int
		UpdatedAt               func(childComplexity int) int
	}

	ListAbilities struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListBaseStats struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListPokemon struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListPokemonAbilities struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListPokemonEvolution struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListPokemonEvolutionMatchup struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListPokemonTypes struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListTypes struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Mutation struct {
		DeleteAbilitiesByID                   func(childComplexity int, id int) int
		DeleteBaseStatsByID                   func(childComplexity int, id int) int
		DeletePokemonAbilitiesByID            func(childComplexity int, id int) int
		DeletePokemonByID                     func(childComplexity int, id int) int
		DeletePokemonEvolutionByID            func(childComplexity int, id int) int
		DeletePokemonEvolutionMatchupByID     func(childComplexity int, id int) int
		DeletePokemonTypesByID                func(childComplexity int, id int) int
		DeleteTypesByID                       func(childComplexity int, id int) int
		InsertAbilities                       func(childComplexity int, data table.AbilitiesCreate) int
		InsertBaseStats                       func(childComplexity int, data table.BaseStatsCreate) int
		InsertPokemon                         func(childComplexity int, data table.PokemonCreate) int
		InsertPokemonAbilities                func(childComplexity int, data table.PokemonAbilitiesCreate) int
		InsertPokemonEvolution                func(childComplexity int, data table.PokemonEvolutionCreate) int
		InsertPokemonEvolutionMatchup         func(childComplexity int, data table.PokemonEvolutionMatchupCreate) int
		InsertPokemonTypes                    func(childComplexity int, data table.PokemonTypesCreate) int
		InsertTypes                           func(childComplexity int, data table.TypesCreate) int
		UpdateAbilitiesByFields               func(childComplexity int, id int, data table.AbilitiesUpdate) int
		UpdateBaseStatsByFields               func(childComplexity int, id int, data table.BaseStatsUpdate) int
		UpdatePokemonAbilitiesByFields        func(childComplexity int, id int, data table.PokemonAbilitiesUpdate) int
		UpdatePokemonByFields                 func(childComplexity int, id int, data table.PokemonUpdate) int
		UpdatePokemonEvolutionByFields        func(childComplexity int, id int, data table.PokemonEvolutionUpdate) int
		UpdatePokemonEvolutionMatchupByFields func(childComplexity int, id int, data table.PokemonEvolutionMatchupUpdate) int
		UpdatePokemonTypesByFields            func(childComplexity int, id int, data table.PokemonTypesUpdate) int
		UpdateTypesByFields                   func(childComplexity int, id int, data table.TypesUpdate) int
	}

	Pokemon struct {
		Active                                  func(childComplexity int) int
		BaseStatsThroughFkPokemon               func(childComplexity int, filter *table.BaseStatsFilter, pagination *internal.Pagination) int
		CreatedAt                               func(childComplexity int) int
		ID                                      func(childComplexity int) int
		PokemonAbilitiesThroughFkPokemon        func(childComplexity int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) int
		PokemonBaseExperience                   func(childComplexity int) int
		PokemonEvolutionMatchupThroughPokemonID func(childComplexity int, filter *table.PokemonEvolutionMatchupFilter, pagination *internal.Pagination) int
		PokemonHeight                           func(childComplexity int) int
		PokemonName                             func(childComplexity int) int
		PokemonTypesThroughPokemonID            func(childComplexity int, filter *table.PokemonTypesFilter, pagination *internal.Pagination) int
		PokemonWeight                           func(childComplexity int) int
		UpdatedAt                               func(childComplexity int) int
	}

	PokemonAbilities struct {
		AbilitiesThroughFkAbility func(childComplexity int, filter *table.AbilitiesFilter) int
		Active                    func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		FkAbility                 func(childComplexity int) int
		FkPokemon                 func(childComplexity int) int
		ID                        func(childComplexity int) int
		IsHidden                  func(childComplexity int) int
		PokemonThroughFkPokemon   func(childComplexity int, filter *table.PokemonFilter) int
		Slot                      func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
	}

	PokemonEvolution struct {
		Active                                         func(childComplexity int) int
		CreatedAt                                      func(childComplexity int) int
		EvolMinimumLevel                               func(childComplexity int) int
		EvolvedSpeciesID                               func(childComplexity int) int
		ID                                             func(childComplexity int) int
		PokemonEvolutionMatchupThroughEvolvedSpeciesID func(childComplexity int, filter *table.PokemonEvolutionMatchupFilter) int
		UpdatedAt                                      func(childComplexity int) int
	}

	PokemonEvolutionMatchup struct {
		Active                                  func(childComplexity int) int
		BaseHappiness                           func(childComplexity int) int
		CaptureRate                             func(childComplexity int) int
		CreatedAt                               func(childComplexity int) int
		EvolvesFromSpeciesID                    func(childComplexity int) int
		GenderRate                              func(childComplexity int) int
		Habitat                                 func(childComplexity int) int
		ID                                      func(childComplexity int) int
		PokemonEvolutionThroughEvolvedSpeciesID func(childComplexity int, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination) int
		PokemonID                               func(childComplexity int) int
		PokemonThroughPokemonID                 func(childComplexity int, filter *table.PokemonFilter) int
		UpdatedAt                               func(childComplexity int) int
	}

	PokemonTypes struct {
		Active                  func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		ID                      func(childComplexity int) int
		PokemonID               func(childComplexity int) int
		PokemonThroughPokemonID func(childComplexity int, filter *table.PokemonFilter) int
		Slot                    func(childComplexity int) int
		TypeID                  func(childComplexity int) int
		TypesThroughTypeID      func(childComplexity int, filter *table.TypesFilter) int
		UpdatedAt               func(childComplexity int) int
	}

	Query struct {
		AbilitiesByAbilityName             func(childComplexity int, abilityName string, filter *table.AbilitiesFilter, pagination *internal.Pagination) int
		AbilitiesByID                      func(childComplexity int, iD int, filter *table.AbilitiesFilter) int
		BaseStatsByFkPokemon               func(childComplexity int, fkPokemon int, filter *table.BaseStatsFilter, pagination *internal.Pagination) int
		BaseStatsByID                      func(childComplexity int, iD int, filter *table.BaseStatsFilter) int
		FindAllAbilities                   func(childComplexity int, filter *table.AbilitiesFilter, pagination *internal.Pagination) int
		FindAllBaseStats                   func(childComplexity int, filter *table.BaseStatsFilter, pagination *internal.Pagination) int
		FindAllPokemon                     func(childComplexity int, filter *table.PokemonFilter, pagination *internal.Pagination) int
		FindAllPokemonAbilities            func(childComplexity int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) int
		FindAllPokemonEvolution            func(childComplexity int, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination) int
		FindAllPokemonEvolutionMatchup     func(childComplexity int, filter *table.PokemonEvolutionMatchupFilter, pagination *internal.Pagination) int
		FindAllPokemonTypes                func(childComplexity int, filter *table.PokemonTypesFilter, pagination *internal.Pagination) int
		FindAllTypes                       func(childComplexity int, filter *table.TypesFilter, pagination *internal.Pagination) int
		PokemonAbilitiesByFkAbility        func(childComplexity int, fkAbility int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) int
		PokemonAbilitiesByFkPokemon        func(childComplexity int, fkPokemon int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) int
		PokemonAbilitiesByID               func(childComplexity int, iD int, filter *table.PokemonAbilitiesFilter) int
		PokemonByID                        func(childComplexity int, iD int, filter *table.PokemonFilter) int
		PokemonByPokemonName               func(childComplexity int, pokemonName string, filter *table.PokemonFilter, pagination *internal.Pagination) int
		PokemonEvolutionByEvolvedSpeciesID func(childComplexity int, evolvedSpeciesID int, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination) int
		PokemonEvolutionByID               func(childComplexity int, iD int, filter *table.PokemonEvolutionFilter) int
		PokemonEvolutionMatchupByID        func(childComplexity int, iD int, filter *table.PokemonEvolutionMatchupFilter) int
		PokemonEvolutionMatchupByPokemonID func(childComplexity int, pokemonID int, filter *table.PokemonEvolutionMatchupFilter, pagination *internal.Pagination) int
		PokemonTypesByID                   func(childComplexity int, iD int, filter *table.PokemonTypesFilter) int
		PokemonTypesByPokemonID            func(childComplexity int, pokemonID int, filter *table.PokemonTypesFilter, pagination *internal.Pagination) int
		PokemonTypesByTypeID               func(childComplexity int, typeID int, filter *table.PokemonTypesFilter, pagination *internal.Pagination) int
		TypesByID                          func(childComplexity int, iD int, filter *table.TypesFilter) int
	}

	Types struct {
		Active                    func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		ID                        func(childComplexity int) int
		PokemonTypesThroughTypeID func(childComplexity int, filter *table.PokemonTypesFilter, pagination *internal.Pagination) int
		TypeName                  func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
	}
}

type AbilitiesResolver interface {
	PokemonAbilitiesThroughFkAbility(ctx context.Context, obj *table.Abilities, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error)
}
type BaseStatsResolver interface {
	PokemonThroughFkPokemon(ctx context.Context, obj *table.BaseStats, filter *table.PokemonFilter) (*table.Pokemon, error)
}
type MutationResolver interface {
	InsertAbilities(ctx context.Context, data table.AbilitiesCreate) (*table.Abilities, error)
	UpdateAbilitiesByFields(ctx context.Context, id int, data table.AbilitiesUpdate) (*table.Abilities, error)
	DeleteAbilitiesByID(ctx context.Context, id int) (bool, error)
	InsertBaseStats(ctx context.Context, data table.BaseStatsCreate) (*table.BaseStats, error)
	UpdateBaseStatsByFields(ctx context.Context, id int, data table.BaseStatsUpdate) (*table.BaseStats, error)
	DeleteBaseStatsByID(ctx context.Context, id int) (bool, error)
	InsertPokemon(ctx context.Context, data table.PokemonCreate) (*table.Pokemon, error)
	UpdatePokemonByFields(ctx context.Context, id int, data table.PokemonUpdate) (*table.Pokemon, error)
	DeletePokemonByID(ctx context.Context, id int) (bool, error)
	InsertPokemonAbilities(ctx context.Context, data table.PokemonAbilitiesCreate) (*table.PokemonAbilities, error)
	UpdatePokemonAbilitiesByFields(ctx context.Context, id int, data table.PokemonAbilitiesUpdate) (*table.PokemonAbilities, error)
	DeletePokemonAbilitiesByID(ctx context.Context, id int) (bool, error)
	InsertPokemonEvolution(ctx context.Context, data table.PokemonEvolutionCreate) (*table.PokemonEvolution, error)
	UpdatePokemonEvolutionByFields(ctx context.Context, id int, data table.PokemonEvolutionUpdate) (*table.PokemonEvolution, error)
	DeletePokemonEvolutionByID(ctx context.Context, id int) (bool, error)
	InsertPokemonEvolutionMatchup(ctx context.Context, data table.PokemonEvolutionMatchupCreate) (*table.PokemonEvolutionMatchup, error)
	UpdatePokemonEvolutionMatchupByFields(ctx context.Context, id int, data table.PokemonEvolutionMatchupUpdate) (*table.PokemonEvolutionMatchup, error)
	DeletePokemonEvolutionMatchupByID(ctx context.Context, id int) (bool, error)
	InsertPokemonTypes(ctx context.Context, data table.PokemonTypesCreate) (*table.PokemonTypes, error)
	UpdatePokemonTypesByFields(ctx context.Context, id int, data table.PokemonTypesUpdate) (*table.PokemonTypes, error)
	DeletePokemonTypesByID(ctx context.Context, id int) (bool, error)
	InsertTypes(ctx context.Context, data table.TypesCreate) (*table.Types, error)
	UpdateTypesByFields(ctx context.Context, id int, data table.TypesUpdate) (*table.Types, error)
	DeleteTypesByID(ctx context.Context, id int) (bool, error)
}
type PokemonResolver interface {
	BaseStatsThroughFkPokemon(ctx context.Context, obj *table.Pokemon, filter *table.BaseStatsFilter, pagination *internal.Pagination) (*table.ListBaseStats, error)
	PokemonAbilitiesThroughFkPokemon(ctx context.Context, obj *table.Pokemon, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error)
	PokemonEvolutionMatchupThroughPokemonID(ctx context.Context, obj *table.Pokemon, filter *table.PokemonEvolutionMatchupFilter, pagination *internal.Pagination) (*table.ListPokemonEvolutionMatchup, error)
	PokemonTypesThroughPokemonID(ctx context.Context, obj *table.Pokemon, filter *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error)
}
type PokemonAbilitiesResolver interface {
	PokemonThroughFkPokemon(ctx context.Context, obj *table.PokemonAbilities, filter *table.PokemonFilter) (*table.Pokemon, error)
	AbilitiesThroughFkAbility(ctx context.Context, obj *table.PokemonAbilities, filter *table.AbilitiesFilter) (*table.Abilities, error)
}
type PokemonEvolutionResolver interface {
	PokemonEvolutionMatchupThroughEvolvedSpeciesID(ctx context.Context, obj *table.PokemonEvolution, filter *table.PokemonEvolutionMatchupFilter) (*table.PokemonEvolutionMatchup, error)
}
type PokemonEvolutionMatchupResolver interface {
	PokemonThroughPokemonID(ctx context.Context, obj *table.PokemonEvolutionMatchup, filter *table.PokemonFilter) (*table.Pokemon, error)
	PokemonEvolutionThroughEvolvedSpeciesID(ctx context.Context, obj *table.PokemonEvolutionMatchup, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination) (*table.ListPokemonEvolution, error)
}
type PokemonTypesResolver interface {
	PokemonThroughPokemonID(ctx context.Context, obj *table.PokemonTypes, filter *table.PokemonFilter) (*table.Pokemon, error)
	TypesThroughTypeID(ctx context.Context, obj *table.PokemonTypes, filter *table.TypesFilter) (*table.Types, error)
}
type QueryResolver interface {
	FindAllAbilities(ctx context.Context, filter *table.AbilitiesFilter, pagination *internal.Pagination) (*table.ListAbilities, error)
	AbilitiesByAbilityName(ctx context.Context, abilityName string, filter *table.AbilitiesFilter, pagination *internal.Pagination) (*table.ListAbilities, error)
	AbilitiesByID(ctx context.Context, iD int, filter *table.AbilitiesFilter) (*table.Abilities, error)
	FindAllBaseStats(ctx context.Context, filter *table.BaseStatsFilter, pagination *internal.Pagination) (*table.ListBaseStats, error)
	BaseStatsByFkPokemon(ctx context.Context, fkPokemon int, filter *table.BaseStatsFilter, pagination *internal.Pagination) (*table.ListBaseStats, error)
	BaseStatsByID(ctx context.Context, iD int, filter *table.BaseStatsFilter) (*table.BaseStats, error)
	FindAllPokemon(ctx context.Context, filter *table.PokemonFilter, pagination *internal.Pagination) (*table.ListPokemon, error)
	PokemonByID(ctx context.Context, iD int, filter *table.PokemonFilter) (*table.Pokemon, error)
	PokemonByPokemonName(ctx context.Context, pokemonName string, filter *table.PokemonFilter, pagination *internal.Pagination) (*table.ListPokemon, error)
	FindAllPokemonAbilities(ctx context.Context, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error)
	PokemonAbilitiesByFkPokemon(ctx context.Context, fkPokemon int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error)
	PokemonAbilitiesByID(ctx context.Context, iD int, filter *table.PokemonAbilitiesFilter) (*table.PokemonAbilities, error)
	PokemonAbilitiesByFkAbility(ctx context.Context, fkAbility int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error)
	FindAllPokemonEvolution(ctx context.Context, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination) (*table.ListPokemonEvolution, error)
	PokemonEvolutionByEvolvedSpeciesID(ctx context.Context, evolvedSpeciesID int, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination) (*table.ListPokemonEvolution, error)
	PokemonEvolutionByID(ctx context.Context, iD int, filter *table.PokemonEvolutionFilter) (*table.PokemonEvolution, error)
	FindAllPokemonEvolutionMatchup(ctx context.Context, filter *table.PokemonEvolutionMatchupFilter, pagination *internal.Pagination) (*table.ListPokemonEvolutionMatchup, error)
	PokemonEvolutionMatchupByPokemonID(ctx context.Context, pokemonID int, filter *table.PokemonEvolutionMatchupFilter, pagination *internal.Pagination) (*table.ListPokemonEvolutionMatchup, error)
	PokemonEvolutionMatchupByID(ctx context.Context, iD int, filter *table.PokemonEvolutionMatchupFilter) (*table.PokemonEvolutionMatchup, error)
	FindAllPokemonTypes(ctx context.Context, filter *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error)
	PokemonTypesByPokemonID(ctx context.Context, pokemonID int, filter *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error)
	PokemonTypesByID(ctx context.Context, iD int, filter *table.PokemonTypesFilter) (*table.PokemonTypes, error)
	PokemonTypesByTypeID(ctx context.Context, typeID int, filter *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error)
	FindAllTypes(ctx context.Context, filter *table.TypesFilter, pagination *internal.Pagination) (*table.ListTypes, error)
	TypesByID(ctx context.Context, iD int, filter *table.TypesFilter) (*table.Types, error)
}
type TypesResolver interface {
	PokemonTypesThroughTypeID(ctx context.Context, obj *table.Types, filter *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Abilities.abilityName":
		if e.complexity.Abilities.AbilityName == nil {
			break
		}

		return e.complexity.Abilities.AbilityName(childComplexity), true

	case "Abilities.active":
		if e.complexity.Abilities.Active == nil {
			break
		}

		return e.complexity.Abilities.Active(childComplexity), true

	case "Abilities.createdAt":
		if e.complexity.Abilities.CreatedAt == nil {
			break
		}

		return e.complexity.Abilities.CreatedAt(childComplexity), true

	case "Abilities.iD":
		if e.complexity.Abilities.ID == nil {
			break
		}

		return e.complexity.Abilities.ID(childComplexity), true

	case "Abilities.pokemonAbilitiesThroughFkAbility":
		if e.complexity.Abilities.PokemonAbilitiesThroughFkAbility == nil {
			break
		}

		args, err := ec.field_Abilities_pokemonAbilitiesThroughFkAbility_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Abilities.PokemonAbilitiesThroughFkAbility(childComplexity, args["filter"].(*table.PokemonAbilitiesFilter), args["pagination"].(*internal.Pagination)), true

	case "Abilities.updatedAt":
		if e.complexity.Abilities.UpdatedAt == nil {
			break
		}

		return e.complexity.Abilities.UpdatedAt(childComplexity), true

	case "BaseStats.active":
		if e.complexity.BaseStats.Active == nil {
			break
		}

		return e.complexity.BaseStats.Active(childComplexity), true

	case "BaseStats.bAtk":
		if e.complexity.BaseStats.BAtk == nil {
			break
		}

		return e.complexity.BaseStats.BAtk(childComplexity), true

	case "BaseStats.bDef":
		if e.complexity.BaseStats.BDef == nil {
			break
		}

		return e.complexity.BaseStats.BDef(childComplexity), true

	case "BaseStats.bHp":
		if e.complexity.BaseStats.BHp == nil {
			break
		}

		return e.complexity.BaseStats.BHp(childComplexity), true

	case "BaseStats.bSpAtk":
		if e.complexity.BaseStats.BSpAtk == nil {
			break
		}

		return e.complexity.BaseStats.BSpAtk(childComplexity), true

	case "BaseStats.bSpDef":
		if e.complexity.BaseStats.BSpDef == nil {
			break
		}

		return e.complexity.BaseStats.BSpDef(childComplexity), true

	case "BaseStats.bSpeed":
		if e.complexity.BaseStats.BSpeed == nil {
			break
		}

		return e.complexity.BaseStats.BSpeed(childComplexity), true

	case "BaseStats.createdAt":
		if e.complexity.BaseStats.CreatedAt == nil {
			break
		}

		return e.complexity.BaseStats.CreatedAt(childComplexity), true

	case "BaseStats.fkPokemon":
		if e.complexity.BaseStats.FkPokemon == nil {
			break
		}

		return e.complexity.BaseStats.FkPokemon(childComplexity), true

	case "BaseStats.iD":
		if e.complexity.BaseStats.ID == nil {
			break
		}

		return e.complexity.BaseStats.ID(childComplexity), true

	case "BaseStats.pokemonThroughFkPokemon":
		if e.complexity.BaseStats.PokemonThroughFkPokemon == nil {
			break
		}

		args, err := ec.field_BaseStats_pokemonThroughFkPokemon_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.BaseStats.PokemonThroughFkPokemon(childComplexity, args["filter"].(*table.PokemonFilter)), true

	case "BaseStats.updatedAt":
		if e.complexity.BaseStats.UpdatedAt == nil {
			break
		}

		return e.complexity.BaseStats.UpdatedAt(childComplexity), true

	case "ListAbilities.data":
		if e.complexity.ListAbilities.Data == nil {
			break
		}

		return e.complexity.ListAbilities.Data(childComplexity), true

	case "ListAbilities.totalCount":
		if e.complexity.ListAbilities.TotalCount == nil {
			break
		}

		return e.complexity.ListAbilities.TotalCount(childComplexity), true

	case "ListBaseStats.data":
		if e.complexity.ListBaseStats.Data == nil {
			break
		}

		return e.complexity.ListBaseStats.Data(childComplexity), true

	case "ListBaseStats.totalCount":
		if e.complexity.ListBaseStats.TotalCount == nil {
			break
		}

		return e.complexity.ListBaseStats.TotalCount(childComplexity), true

	case "ListPokemon.data":
		if e.complexity.ListPokemon.Data == nil {
			break
		}

		return e.complexity.ListPokemon.Data(childComplexity), true

	case "ListPokemon.totalCount":
		if e.complexity.ListPokemon.TotalCount == nil {
			break
		}

		return e.complexity.ListPokemon.TotalCount(childComplexity), true

	case "ListPokemonAbilities.data":
		if e.complexity.ListPokemonAbilities.Data == nil {
			break
		}

		return e.complexity.ListPokemonAbilities.Data(childComplexity), true

	case "ListPokemonAbilities.totalCount":
		if e.complexity.ListPokemonAbilities.TotalCount == nil {
			break
		}

		return e.complexity.ListPokemonAbilities.TotalCount(childComplexity), true

	case "ListPokemonEvolution.data":
		if e.complexity.ListPokemonEvolution.Data == nil {
			break
		}

		return e.complexity.ListPokemonEvolution.Data(childComplexity), true

	case "ListPokemonEvolution.totalCount":
		if e.complexity.ListPokemonEvolution.TotalCount == nil {
			break
		}

		return e.complexity.ListPokemonEvolution.TotalCount(childComplexity), true

	case "ListPokemonEvolutionMatchup.data":
		if e.complexity.ListPokemonEvolutionMatchup.Data == nil {
			break
		}

		return e.complexity.ListPokemonEvolutionMatchup.Data(childComplexity), true

	case "ListPokemonEvolutionMatchup.totalCount":
		if e.complexity.ListPokemonEvolutionMatchup.TotalCount == nil {
			break
		}

		return e.complexity.ListPokemonEvolutionMatchup.TotalCount(childComplexity), true

	case "ListPokemonTypes.data":
		if e.complexity.ListPokemonTypes.Data == nil {
			break
		}

		return e.complexity.ListPokemonTypes.Data(childComplexity), true

	case "ListPokemonTypes.totalCount":
		if e.complexity.ListPokemonTypes.TotalCount == nil {
			break
		}

		return e.complexity.ListPokemonTypes.TotalCount(childComplexity), true

	case "ListTypes.data":
		if e.complexity.ListTypes.Data == nil {
			break
		}

		return e.complexity.ListTypes.Data(childComplexity), true

	case "ListTypes.totalCount":
		if e.complexity.ListTypes.TotalCount == nil {
			break
		}

		return e.complexity.ListTypes.TotalCount(childComplexity), true

	case "Mutation.deleteAbilitiesByID":
		if e.complexity.Mutation.DeleteAbilitiesByID == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAbilitiesByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAbilitiesByID(childComplexity, args["id"].(int)), true

	case "Mutation.deleteBaseStatsByID":
		if e.complexity.Mutation.DeleteBaseStatsByID == nil {
			break
		}

		args, err := ec.field_Mutation_deleteBaseStatsByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBaseStatsByID(childComplexity, args["id"].(int)), true

	case "Mutation.deletePokemonAbilitiesByID":
		if e.complexity.Mutation.DeletePokemonAbilitiesByID == nil {
			break
		}

		args, err := ec.field_Mutation_deletePokemonAbilitiesByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePokemonAbilitiesByID(childComplexity, args["id"].(int)), true

	case "Mutation.deletePokemonByID":
		if e.complexity.Mutation.DeletePokemonByID == nil {
			break
		}

		args, err := ec.field_Mutation_deletePokemonByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePokemonByID(childComplexity, args["id"].(int)), true

	case "Mutation.deletePokemonEvolutionByID":
		if e.complexity.Mutation.DeletePokemonEvolutionByID == nil {
			break
		}

		args, err := ec.field_Mutation_deletePokemonEvolutionByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePokemonEvolutionByID(childComplexity, args["id"].(int)), true

	case "Mutation.deletePokemonEvolutionMatchupByID":
		if e.complexity.Mutation.DeletePokemonEvolutionMatchupByID == nil {
			break
		}

		args, err := ec.field_Mutation_deletePokemonEvolutionMatchupByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePokemonEvolutionMatchupByID(childComplexity, args["id"].(int)), true

	case "Mutation.deletePokemonTypesByID":
		if e.complexity.Mutation.DeletePokemonTypesByID == nil {
			break
		}

		args, err := ec.field_Mutation_deletePokemonTypesByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePokemonTypesByID(childComplexity, args["id"].(int)), true

	case "Mutation.deleteTypesByID":
		if e.complexity.Mutation.DeleteTypesByID == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTypesByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTypesByID(childComplexity, args["id"].(int)), true

	case "Mutation.insertAbilities":
		if e.complexity.Mutation.InsertAbilities == nil {
			break
		}

		args, err := ec.field_Mutation_insertAbilities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertAbilities(childComplexity, args["data"].(table.AbilitiesCreate)), true

	case "Mutation.insertBaseStats":
		if e.complexity.Mutation.InsertBaseStats == nil {
			break
		}

		args, err := ec.field_Mutation_insertBaseStats_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertBaseStats(childComplexity, args["data"].(table.BaseStatsCreate)), true

	case "Mutation.insertPokemon":
		if e.complexity.Mutation.InsertPokemon == nil {
			break
		}

		args, err := ec.field_Mutation_insertPokemon_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertPokemon(childComplexity, args["data"].(table.PokemonCreate)), true

	case "Mutation.insertPokemonAbilities":
		if e.complexity.Mutation.InsertPokemonAbilities == nil {
			break
		}

		args, err := ec.field_Mutation_insertPokemonAbilities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertPokemonAbilities(childComplexity, args["data"].(table.PokemonAbilitiesCreate)), true

	case "Mutation.insertPokemonEvolution":
		if e.complexity.Mutation.InsertPokemonEvolution == nil {
			break
		}

		args, err := ec.field_Mutation_insertPokemonEvolution_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertPokemonEvolution(childComplexity, args["data"].(table.PokemonEvolutionCreate)), true

	case "Mutation.insertPokemonEvolutionMatchup":
		if e.complexity.Mutation.InsertPokemonEvolutionMatchup == nil {
			break
		}

		args, err := ec.field_Mutation_insertPokemonEvolutionMatchup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertPokemonEvolutionMatchup(childComplexity, args["data"].(table.PokemonEvolutionMatchupCreate)), true

	case "Mutation.insertPokemonTypes":
		if e.complexity.Mutation.InsertPokemonTypes == nil {
			break
		}

		args, err := ec.field_Mutation_insertPokemonTypes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertPokemonTypes(childComplexity, args["data"].(table.PokemonTypesCreate)), true

	case "Mutation.insertTypes":
		if e.complexity.Mutation.InsertTypes == nil {
			break
		}

		args, err := ec.field_Mutation_insertTypes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertTypes(childComplexity, args["data"].(table.TypesCreate)), true

	case "Mutation.updateAbilitiesByFields":
		if e.complexity.Mutation.UpdateAbilitiesByFields == nil {
			break
		}

		args, err := ec.field_Mutation_updateAbilitiesByFields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAbilitiesByFields(childComplexity, args["id"].(int), args["data"].(table.AbilitiesUpdate)), true

	case "Mutation.updateBaseStatsByFields":
		if e.complexity.Mutation.UpdateBaseStatsByFields == nil {
			break
		}

		args, err := ec.field_Mutation_updateBaseStatsByFields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBaseStatsByFields(childComplexity, args["id"].(int), args["data"].(table.BaseStatsUpdate)), true

	case "Mutation.updatePokemonAbilitiesByFields":
		if e.complexity.Mutation.UpdatePokemonAbilitiesByFields == nil {
			break
		}

		args, err := ec.field_Mutation_updatePokemonAbilitiesByFields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePokemonAbilitiesByFields(childComplexity, args["id"].(int), args["data"].(table.PokemonAbilitiesUpdate)), true

	case "Mutation.updatePokemonByFields":
		if e.complexity.Mutation.UpdatePokemonByFields == nil {
			break
		}

		args, err := ec.field_Mutation_updatePokemonByFields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePokemonByFields(childComplexity, args["id"].(int), args["data"].(table.PokemonUpdate)), true

	case "Mutation.updatePokemonEvolutionByFields":
		if e.complexity.Mutation.UpdatePokemonEvolutionByFields == nil {
			break
		}

		args, err := ec.field_Mutation_updatePokemonEvolutionByFields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePokemonEvolutionByFields(childComplexity, args["id"].(int), args["data"].(table.PokemonEvolutionUpdate)), true

	case "Mutation.updatePokemonEvolutionMatchupByFields":
		if e.complexity.Mutation.UpdatePokemonEvolutionMatchupByFields == nil {
			break
		}

		args, err := ec.field_Mutation_updatePokemonEvolutionMatchupByFields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePokemonEvolutionMatchupByFields(childComplexity, args["id"].(int), args["data"].(table.PokemonEvolutionMatchupUpdate)), true

	case "Mutation.updatePokemonTypesByFields":
		if e.complexity.Mutation.UpdatePokemonTypesByFields == nil {
			break
		}

		args, err := ec.field_Mutation_updatePokemonTypesByFields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePokemonTypesByFields(childComplexity, args["id"].(int), args["data"].(table.PokemonTypesUpdate)), true

	case "Mutation.updateTypesByFields":
		if e.complexity.Mutation.UpdateTypesByFields == nil {
			break
		}

		args, err := ec.field_Mutation_updateTypesByFields_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTypesByFields(childComplexity, args["id"].(int), args["data"].(table.TypesUpdate)), true

	case "Pokemon.active":
		if e.complexity.Pokemon.Active == nil {
			break
		}

		return e.complexity.Pokemon.Active(childComplexity), true

	case "Pokemon.baseStatsThroughFkPokemon":
		if e.complexity.Pokemon.BaseStatsThroughFkPokemon == nil {
			break
		}

		args, err := ec.field_Pokemon_baseStatsThroughFkPokemon_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Pokemon.BaseStatsThroughFkPokemon(childComplexity, args["filter"].(*table.BaseStatsFilter), args["pagination"].(*internal.Pagination)), true

	case "Pokemon.createdAt":
		if e.complexity.Pokemon.CreatedAt == nil {
			break
		}

		return e.complexity.Pokemon.CreatedAt(childComplexity), true

	case "Pokemon.iD":
		if e.complexity.Pokemon.ID == nil {
			break
		}

		return e.complexity.Pokemon.ID(childComplexity), true

	case "Pokemon.pokemonAbilitiesThroughFkPokemon":
		if e.complexity.Pokemon.PokemonAbilitiesThroughFkPokemon == nil {
			break
		}

		args, err := ec.field_Pokemon_pokemonAbilitiesThroughFkPokemon_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Pokemon.PokemonAbilitiesThroughFkPokemon(childComplexity, args["filter"].(*table.PokemonAbilitiesFilter), args["pagination"].(*internal.Pagination)), true

	case "Pokemon.pokemonBaseExperience":
		if e.complexity.Pokemon.PokemonBaseExperience == nil {
			break
		}

		return e.complexity.Pokemon.PokemonBaseExperience(childComplexity), true

	case "Pokemon.pokemonEvolutionMatchupThroughPokemonID":
		if e.complexity.Pokemon.PokemonEvolutionMatchupThroughPokemonID == nil {
			break
		}

		args, err := ec.field_Pokemon_pokemonEvolutionMatchupThroughPokemonID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Pokemon.PokemonEvolutionMatchupThroughPokemonID(childComplexity, args["filter"].(*table.PokemonEvolutionMatchupFilter), args["pagination"].(*internal.Pagination)), true

	case "Pokemon.pokemonHeight":
		if e.complexity.Pokemon.PokemonHeight == nil {
			break
		}

		return e.complexity.Pokemon.PokemonHeight(childComplexity), true

	case "Pokemon.pokemonName":
		if e.complexity.Pokemon.PokemonName == nil {
			break
		}

		return e.complexity.Pokemon.PokemonName(childComplexity), true

	case "Pokemon.pokemonTypesThroughPokemonID":
		if e.complexity.Pokemon.PokemonTypesThroughPokemonID == nil {
			break
		}

		args, err := ec.field_Pokemon_pokemonTypesThroughPokemonID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Pokemon.PokemonTypesThroughPokemonID(childComplexity, args["filter"].(*table.PokemonTypesFilter), args["pagination"].(*internal.Pagination)), true

	case "Pokemon.pokemonWeight":
		if e.complexity.Pokemon.PokemonWeight == nil {
			break
		}

		return e.complexity.Pokemon.PokemonWeight(childComplexity), true

	case "Pokemon.updatedAt":
		if e.complexity.Pokemon.UpdatedAt == nil {
			break
		}

		return e.complexity.Pokemon.UpdatedAt(childComplexity), true

	case "PokemonAbilities.abilitiesThroughFkAbility":
		if e.complexity.PokemonAbilities.AbilitiesThroughFkAbility == nil {
			break
		}

		args, err := ec.field_PokemonAbilities_abilitiesThroughFkAbility_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PokemonAbilities.AbilitiesThroughFkAbility(childComplexity, args["filter"].(*table.AbilitiesFilter)), true

	case "PokemonAbilities.active":
		if e.complexity.PokemonAbilities.Active == nil {
			break
		}

		return e.complexity.PokemonAbilities.Active(childComplexity), true

	case "PokemonAbilities.createdAt":
		if e.complexity.PokemonAbilities.CreatedAt == nil {
			break
		}

		return e.complexity.PokemonAbilities.CreatedAt(childComplexity), true

	case "PokemonAbilities.fkAbility":
		if e.complexity.PokemonAbilities.FkAbility == nil {
			break
		}

		return e.complexity.PokemonAbilities.FkAbility(childComplexity), true

	case "PokemonAbilities.fkPokemon":
		if e.complexity.PokemonAbilities.FkPokemon == nil {
			break
		}

		return e.complexity.PokemonAbilities.FkPokemon(childComplexity), true

	case "PokemonAbilities.iD":
		if e.complexity.PokemonAbilities.ID == nil {
			break
		}

		return e.complexity.PokemonAbilities.ID(childComplexity), true

	case "PokemonAbilities.isHidden":
		if e.complexity.PokemonAbilities.IsHidden == nil {
			break
		}

		return e.complexity.PokemonAbilities.IsHidden(childComplexity), true

	case "PokemonAbilities.pokemonThroughFkPokemon":
		if e.complexity.PokemonAbilities.PokemonThroughFkPokemon == nil {
			break
		}

		args, err := ec.field_PokemonAbilities_pokemonThroughFkPokemon_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PokemonAbilities.PokemonThroughFkPokemon(childComplexity, args["filter"].(*table.PokemonFilter)), true

	case "PokemonAbilities.slot":
		if e.complexity.PokemonAbilities.Slot == nil {
			break
		}

		return e.complexity.PokemonAbilities.Slot(childComplexity), true

	case "PokemonAbilities.updatedAt":
		if e.complexity.PokemonAbilities.UpdatedAt == nil {
			break
		}

		return e.complexity.PokemonAbilities.UpdatedAt(childComplexity), true

	case "PokemonEvolution.active":
		if e.complexity.PokemonEvolution.Active == nil {
			break
		}

		return e.complexity.PokemonEvolution.Active(childComplexity), true

	case "PokemonEvolution.createdAt":
		if e.complexity.PokemonEvolution.CreatedAt == nil {
			break
		}

		return e.complexity.PokemonEvolution.CreatedAt(childComplexity), true

	case "PokemonEvolution.evolMinimumLevel":
		if e.complexity.PokemonEvolution.EvolMinimumLevel == nil {
			break
		}

		return e.complexity.PokemonEvolution.EvolMinimumLevel(childComplexity), true

	case "PokemonEvolution.evolvedSpeciesID":
		if e.complexity.PokemonEvolution.EvolvedSpeciesID == nil {
			break
		}

		return e.complexity.PokemonEvolution.EvolvedSpeciesID(childComplexity), true

	case "PokemonEvolution.iD":
		if e.complexity.PokemonEvolution.ID == nil {
			break
		}

		return e.complexity.PokemonEvolution.ID(childComplexity), true

	case "PokemonEvolution.pokemonEvolutionMatchupThroughEvolvedSpeciesID":
		if e.complexity.PokemonEvolution.PokemonEvolutionMatchupThroughEvolvedSpeciesID == nil {
			break
		}

		args, err := ec.field_PokemonEvolution_pokemonEvolutionMatchupThroughEvolvedSpeciesID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PokemonEvolution.PokemonEvolutionMatchupThroughEvolvedSpeciesID(childComplexity, args["filter"].(*table.PokemonEvolutionMatchupFilter)), true

	case "PokemonEvolution.updatedAt":
		if e.complexity.PokemonEvolution.UpdatedAt == nil {
			break
		}

		return e.complexity.PokemonEvolution.UpdatedAt(childComplexity), true

	case "PokemonEvolutionMatchup.active":
		if e.complexity.PokemonEvolutionMatchup.Active == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.Active(childComplexity), true

	case "PokemonEvolutionMatchup.baseHappiness":
		if e.complexity.PokemonEvolutionMatchup.BaseHappiness == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.BaseHappiness(childComplexity), true

	case "PokemonEvolutionMatchup.captureRate":
		if e.complexity.PokemonEvolutionMatchup.CaptureRate == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.CaptureRate(childComplexity), true

	case "PokemonEvolutionMatchup.createdAt":
		if e.complexity.PokemonEvolutionMatchup.CreatedAt == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.CreatedAt(childComplexity), true

	case "PokemonEvolutionMatchup.evolvesFromSpeciesID":
		if e.complexity.PokemonEvolutionMatchup.EvolvesFromSpeciesID == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.EvolvesFromSpeciesID(childComplexity), true

	case "PokemonEvolutionMatchup.genderRate":
		if e.complexity.PokemonEvolutionMatchup.GenderRate == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.GenderRate(childComplexity), true

	case "PokemonEvolutionMatchup.habitat":
		if e.complexity.PokemonEvolutionMatchup.Habitat == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.Habitat(childComplexity), true

	case "PokemonEvolutionMatchup.iD":
		if e.complexity.PokemonEvolutionMatchup.ID == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.ID(childComplexity), true

	case "PokemonEvolutionMatchup.pokemonEvolutionThroughEvolvedSpeciesID":
		if e.complexity.PokemonEvolutionMatchup.PokemonEvolutionThroughEvolvedSpeciesID == nil {
			break
		}

		args, err := ec.field_PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PokemonEvolutionMatchup.PokemonEvolutionThroughEvolvedSpeciesID(childComplexity, args["filter"].(*table.PokemonEvolutionFilter), args["pagination"].(*internal.Pagination)), true

	case "PokemonEvolutionMatchup.pokemonID":
		if e.complexity.PokemonEvolutionMatchup.PokemonID == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.PokemonID(childComplexity), true

	case "PokemonEvolutionMatchup.pokemonThroughPokemonID":
		if e.complexity.PokemonEvolutionMatchup.PokemonThroughPokemonID == nil {
			break
		}

		args, err := ec.field_PokemonEvolutionMatchup_pokemonThroughPokemonID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PokemonEvolutionMatchup.PokemonThroughPokemonID(childComplexity, args["filter"].(*table.PokemonFilter)), true

	case "PokemonEvolutionMatchup.updatedAt":
		if e.complexity.PokemonEvolutionMatchup.UpdatedAt == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.UpdatedAt(childComplexity), true

	case "PokemonTypes.active":
		if e.complexity.PokemonTypes.Active == nil {
			break
		}

		return e.complexity.PokemonTypes.Active(childComplexity), true

	case "PokemonTypes.createdAt":
		if e.complexity.PokemonTypes.CreatedAt == nil {
			break
		}

		return e.complexity.PokemonTypes.CreatedAt(childComplexity), true

	case "PokemonTypes.iD":
		if e.complexity.PokemonTypes.ID == nil {
			break
		}

		return e.complexity.PokemonTypes.ID(childComplexity), true

	case "PokemonTypes.pokemonID":
		if e.complexity.PokemonTypes.PokemonID == nil {
			break
		}

		return e.complexity.PokemonTypes.PokemonID(childComplexity), true

	case "PokemonTypes.pokemonThroughPokemonID":
		if e.complexity.PokemonTypes.PokemonThroughPokemonID == nil {
			break
		}

		args, err := ec.field_PokemonTypes_pokemonThroughPokemonID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PokemonTypes.PokemonThroughPokemonID(childComplexity, args["filter"].(*table.PokemonFilter)), true

	case "PokemonTypes.slot":
		if e.complexity.PokemonTypes.Slot == nil {
			break
		}

		return e.complexity.PokemonTypes.Slot(childComplexity), true

	case "PokemonTypes.typeID":
		if e.complexity.PokemonTypes.TypeID == nil {
			break
		}

		return e.complexity.PokemonTypes.TypeID(childComplexity), true

	case "PokemonTypes.typesThroughTypeID":
		if e.complexity.PokemonTypes.TypesThroughTypeID == nil {
			break
		}

		args, err := ec.field_PokemonTypes_typesThroughTypeID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PokemonTypes.TypesThroughTypeID(childComplexity, args["filter"].(*table.TypesFilter)), true

	case "PokemonTypes.updatedAt":
		if e.complexity.PokemonTypes.UpdatedAt == nil {
			break
		}

		return e.complexity.PokemonTypes.UpdatedAt(childComplexity), true

	case "Query.abilitiesByAbilityName":
		if e.complexity.Query.AbilitiesByAbilityName == nil {
			break
		}

		args, err := ec.field_Query_abilitiesByAbilityName_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AbilitiesByAbilityName(childComplexity, args["abilityName"].(string), args["filter"].(*table.AbilitiesFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.abilitiesByID":
		if e.complexity.Query.AbilitiesByID == nil {
			break
		}

		args, err := ec.field_Query_abilitiesByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AbilitiesByID(childComplexity, args["iD"].(int), args["filter"].(*table.AbilitiesFilter)), true

	case "Query.baseStatsByFkPokemon":
		if e.complexity.Query.BaseStatsByFkPokemon == nil {
			break
		}

		args, err := ec.field_Query_baseStatsByFkPokemon_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BaseStatsByFkPokemon(childComplexity, args["fkPokemon"].(int), args["filter"].(*table.BaseStatsFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.baseStatsByID":
		if e.complexity.Query.BaseStatsByID == nil {
			break
		}

		args, err := ec.field_Query_baseStatsByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BaseStatsByID(childComplexity, args["iD"].(int), args["filter"].(*table.BaseStatsFilter)), true

	case "Query.findAllAbilities":
		if e.complexity.Query.FindAllAbilities == nil {
			break
		}

		args, err := ec.field_Query_findAllAbilities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllAbilities(childComplexity, args["filter"].(*table.AbilitiesFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.findAllBaseStats":
		if e.complexity.Query.FindAllBaseStats == nil {
			break
		}

		args, err := ec.field_Query_findAllBaseStats_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllBaseStats(childComplexity, args["filter"].(*table.BaseStatsFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.findAllPokemon":
		if e.complexity.Query.FindAllPokemon == nil {
			break
		}

		args, err := ec.field_Query_findAllPokemon_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllPokemon(childComplexity, args["filter"].(*table.PokemonFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.findAllPokemonAbilities":
		if e.complexity.Query.FindAllPokemonAbilities == nil {
			break
		}

		args, err := ec.field_Query_findAllPokemonAbilities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllPokemonAbilities(childComplexity, args["filter"].(*table.PokemonAbilitiesFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.findAllPokemonEvolution":
		if e.complexity.Query.FindAllPokemonEvolution == nil {
			break
		}

		args, err := ec.field_Query_findAllPokemonEvolution_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllPokemonEvolution(childComplexity, args["filter"].(*table.PokemonEvolutionFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.findAllPokemonEvolutionMatchup":
		if e.complexity.Query.FindAllPokemonEvolutionMatchup == nil {
			break
		}

		args, err := ec.field_Query_findAllPokemonEvolutionMatchup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllPokemonEvolutionMatchup(childComplexity, args["filter"].(*table.PokemonEvolutionMatchupFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.findAllPokemonTypes":
		if e.complexity.Query.FindAllPokemonTypes == nil {
			break
		}

		args, err := ec.field_Query_findAllPokemonTypes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllPokemonTypes(childComplexity, args["filter"].(*table.PokemonTypesFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.findAllTypes":
		if e.complexity.Query.FindAllTypes == nil {
			break
		}

		args, err := ec.field_Query_findAllTypes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllTypes(childComplexity, args["filter"].(*table.TypesFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.pokemonAbilitiesByFkAbility":
		if e.complexity.Query.PokemonAbilitiesByFkAbility == nil {
			break
		}

		args, err := ec.field_Query_pokemonAbilitiesByFkAbility_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PokemonAbilitiesByFkAbility(childComplexity, args["fkAbility"].(int), args["filter"].(*table.PokemonAbilitiesFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.pokemonAbilitiesByFkPokemon":
		if e.complexity.Query.PokemonAbilitiesByFkPokemon == nil {
			break
		}

		args, err := ec.field_Query_pokemonAbilitiesByFkPokemon_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PokemonAbilitiesByFkPokemon(childComplexity, args["fkPokemon"].(int), args["filter"].(*table.PokemonAbilitiesFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.pokemonAbilitiesByID":
		if e.complexity.Query.PokemonAbilitiesByID == nil {
			break
		}

		args, err := ec.field_Query_pokemonAbilitiesByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PokemonAbilitiesByID(childComplexity, args["iD"].(int), args["filter"].(*table.PokemonAbilitiesFilter)), true

	case "Query.pokemonByID":
		if e.complexity.Query.PokemonByID == nil {
			break
		}

		args, err := ec.field_Query_pokemonByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PokemonByID(childComplexity, args["iD"].(int), args["filter"].(*table.PokemonFilter)), true

	case "Query.pokemonByPokemonName":
		if e.complexity.Query.PokemonByPokemonName == nil {
			break
		}

		args, err := ec.field_Query_pokemonByPokemonName_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PokemonByPokemonName(childComplexity, args["pokemonName"].(string), args["filter"].(*table.PokemonFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.pokemonEvolutionByEvolvedSpeciesID":
		if e.complexity.Query.PokemonEvolutionByEvolvedSpeciesID == nil {
			break
		}

		args, err := ec.field_Query_pokemonEvolutionByEvolvedSpeciesID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PokemonEvolutionByEvolvedSpeciesID(childComplexity, args["evolvedSpeciesID"].(int), args["filter"].(*table.PokemonEvolutionFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.pokemonEvolutionByID":
		if e.complexity.Query.PokemonEvolutionByID == nil {
			break
		}

		args, err := ec.field_Query_pokemonEvolutionByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PokemonEvolutionByID(childComplexity, args["iD"].(int), args["filter"].(*table.PokemonEvolutionFilter)), true

	case "Query.pokemonEvolutionMatchupByID":
		if e.complexity.Query.PokemonEvolutionMatchupByID == nil {
			break
		}

		args, err := ec.field_Query_pokemonEvolutionMatchupByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PokemonEvolutionMatchupByID(childComplexity, args["iD"].(int), args["filter"].(*table.PokemonEvolutionMatchupFilter)), true

	case "Query.pokemonEvolutionMatchupByPokemonID":
		if e.complexity.Query.PokemonEvolutionMatchupByPokemonID == nil {
			break
		}

		args, err := ec.field_Query_pokemonEvolutionMatchupByPokemonID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PokemonEvolutionMatchupByPokemonID(childComplexity, args["pokemonID"].(int), args["filter"].(*table.PokemonEvolutionMatchupFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.pokemonTypesByID":
		if e.complexity.Query.PokemonTypesByID == nil {
			break
		}

		args, err := ec.field_Query_pokemonTypesByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PokemonTypesByID(childComplexity, args["iD"].(int), args["filter"].(*table.PokemonTypesFilter)), true

	case "Query.pokemonTypesByPokemonID":
		if e.complexity.Query.PokemonTypesByPokemonID == nil {
			break
		}

		args, err := ec.field_Query_pokemonTypesByPokemonID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PokemonTypesByPokemonID(childComplexity, args["pokemonID"].(int), args["filter"].(*table.PokemonTypesFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.pokemonTypesByTypeID":
		if e.complexity.Query.PokemonTypesByTypeID == nil {
			break
		}

		args, err := ec.field_Query_pokemonTypesByTypeID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PokemonTypesByTypeID(childComplexity, args["typeID"].(int), args["filter"].(*table.PokemonTypesFilter), args["pagination"].(*internal.Pagination)), true

	case "Query.typesByID":
		if e.complexity.Query.TypesByID == nil {
			break
		}

		args, err := ec.field_Query_typesByID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TypesByID(childComplexity, args["iD"].(int), args["filter"].(*table.TypesFilter)), true

	case "Types.active":
		if e.complexity.Types.Active == nil {
			break
		}

		return e.complexity.Types.Active(childComplexity), true

	case "Types.createdAt":
		if e.complexity.Types.CreatedAt == nil {
			break
		}

		return e.complexity.Types.CreatedAt(childComplexity), true

	case "Types.iD":
		if e.complexity.Types.ID == nil {
			break
		}

		return e.complexity.Types.ID(childComplexity), true

	case "Types.pokemonTypesThroughTypeID":
		if e.complexity.Types.PokemonTypesThroughTypeID == nil {
			break
		}

		args, err := ec.field_Types_pokemonTypesThroughTypeID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Types.PokemonTypesThroughTypeID(childComplexity, args["filter"].(*table.PokemonTypesFilter), args["pagination"].(*internal.Pagination)), true

	case "Types.typeName":
		if e.complexity.Types.TypeName == nil {
			break
		}

		return e.complexity.Types.TypeName(childComplexity), true

	case "Types.updatedAt":
		if e.complexity.Types.UpdatedAt == nil {
			break
		}

		return e.complexity.Types.UpdatedAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAbilitiesCreate,
		ec.unmarshalInputAbilitiesFilter,
		ec.unmarshalInputAbilitiesUpdate,
		ec.unmarshalInputBaseStatsCreate,
		ec.unmarshalInputBaseStatsFilter,
		ec.unmarshalInputBaseStatsUpdate,
		ec.unmarshalInputPagination,
		ec.unmarshalInputPokemonAbilitiesCreate,
		ec.unmarshalInputPokemonAbilitiesFilter,
		ec.unmarshalInputPokemonAbilitiesUpdate,
		ec.unmarshalInputPokemonCreate,
		ec.unmarshalInputPokemonEvolutionCreate,
		ec.unmarshalInputPokemonEvolutionFilter,
		ec.unmarshalInputPokemonEvolutionMatchupCreate,
		ec.unmarshalInputPokemonEvolutionMatchupFilter,
		ec.unmarshalInputPokemonEvolutionMatchupUpdate,
		ec.unmarshalInputPokemonEvolutionUpdate,
		ec.unmarshalInputPokemonFilter,
		ec.unmarshalInputPokemonTypesCreate,
		ec.unmarshalInputPokemonTypesFilter,
		ec.unmarshalInputPokemonTypesUpdate,
		ec.unmarshalInputPokemonUpdate,
		ec.unmarshalInputTypesCreate,
		ec.unmarshalInputTypesFilter,
		ec.unmarshalInputTypesUpdate,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/query_mutation.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.


type Query {

    # table --> Abilities
    findAllAbilities(filter: AbilitiesFilter, pagination: Pagination): ListAbilities!

    # Indexes
    abilitiesByAbilityName( abilityName: String!,filter: AbilitiesFilter, pagination: Pagination): ListAbilities
    abilitiesByID( iD: Int!,filter: AbilitiesFilter): Abilities

    # table --> BaseStats
    findAllBaseStats(filter: BaseStatsFilter, pagination: Pagination): ListBaseStats!

    # Indexes
    baseStatsByFkPokemon( fkPokemon: Int!,filter: BaseStatsFilter, pagination: Pagination): ListBaseStats
    baseStatsByID( iD: Int!,filter: BaseStatsFilter): BaseStats

    # table --> Pokemon
    findAllPokemon(filter: PokemonFilter, pagination: Pagination): ListPokemon!

    # Indexes
    pokemonByID( iD: Int!,filter: PokemonFilter): Pokemon
    pokemonByPokemonName( pokemonName: String!,filter: PokemonFilter, pagination: Pagination): ListPokemon

    # table --> PokemonAbilities
    findAllPokemonAbilities(filter: PokemonAbilitiesFilter, pagination: Pagination): ListPokemonAbilities!

    # Indexes
    pokemonAbilitiesByFkPokemon( fkPokemon: Int!,filter: PokemonAbilitiesFilter, pagination: Pagination): ListPokemonAbilities
    pokemonAbilitiesByID( iD: Int!,filter: PokemonAbilitiesFilter): PokemonAbilities
    pokemonAbilitiesByFkAbility( fkAbility: Int!,filter: PokemonAbilitiesFilter, pagination: Pagination): ListPokemonAbilities

    # table --> PokemonEvolution
    findAllPokemonEvolution(filter: PokemonEvolutionFilter, pagination: Pagination): ListPokemonEvolution!

    # Indexes
    pokemonEvolutionByEvolvedSpeciesID( evolvedSpeciesID: Int!,filter: PokemonEvolutionFilter, pagination: Pagination): ListPokemonEvolution
    pokemonEvolutionByID( iD: Int!,filter: PokemonEvolutionFilter): PokemonEvolution

    # table --> PokemonEvolutionMatchup
    findAllPokemonEvolutionMatchup(filter: PokemonEvolutionMatchupFilter, pagination: Pagination): ListPokemonEvolutionMatchup!

    # Indexes
    pokemonEvolutionMatchupByPokemonID( pokemonID: Int!,filter: PokemonEvolutionMatchupFilter, pagination: Pagination): ListPokemonEvolutionMatchup
    pokemonEvolutionMatchupByID( iD: Int!,filter: PokemonEvolutionMatchupFilter): PokemonEvolutionMatchup

    # table --> PokemonTypes
    findAllPokemonTypes(filter: PokemonTypesFilter, pagination: Pagination): ListPokemonTypes!

    # Indexes
    pokemonTypesByPokemonID( pokemonID: Int!,filter: PokemonTypesFilter, pagination: Pagination): ListPokemonTypes
    pokemonTypesByID( iD: Int!,filter: PokemonTypesFilter): PokemonTypes
    pokemonTypesByTypeID( typeID: Int!,filter: PokemonTypesFilter, pagination: Pagination): ListPokemonTypes

    # table --> Types
    findAllTypes(filter: TypesFilter, pagination: Pagination): ListTypes!

    # Indexes
    typesByID( iD: Int!,filter: TypesFilter): Types
}


type Mutation {
  
    insertAbilities(data: AbilitiesCreate!): Abilities
    updateAbilitiesByFields(id: Int!, data: AbilitiesUpdate!): Abilities
    deleteAbilitiesByID(id: Int!): Boolean!
  
    insertBaseStats(data: BaseStatsCreate!): BaseStats
    updateBaseStatsByFields(id: Int!, data: BaseStatsUpdate!): BaseStats
    deleteBaseStatsByID(id: Int!): Boolean!
  
    insertPokemon(data: PokemonCreate!): Pokemon
    updatePokemonByFields(id: Int!, data: PokemonUpdate!): Pokemon
    deletePokemonByID(id: Int!): Boolean!
  
    insertPokemonAbilities(data: PokemonAbilitiesCreate!): PokemonAbilities
    updatePokemonAbilitiesByFields(id: Int!, data: PokemonAbilitiesUpdate!): PokemonAbilities
    deletePokemonAbilitiesByID(id: Int!): Boolean!
  
    insertPokemonEvolution(data: PokemonEvolutionCreate!): PokemonEvolution
    updatePokemonEvolutionByFields(id: Int!, data: PokemonEvolutionUpdate!): PokemonEvolution
    deletePokemonEvolutionByID(id: Int!): Boolean!
  
    insertPokemonEvolutionMatchup(data: PokemonEvolutionMatchupCreate!): PokemonEvolutionMatchup
    updatePokemonEvolutionMatchupByFields(id: Int!, data: PokemonEvolutionMatchupUpdate!): PokemonEvolutionMatchup
    deletePokemonEvolutionMatchupByID(id: Int!): Boolean!
  
    insertPokemonTypes(data: PokemonTypesCreate!): PokemonTypes
    updatePokemonTypesByFields(id: Int!, data: PokemonTypesUpdate!): PokemonTypes
    deletePokemonTypesByID(id: Int!): Boolean!
  
    insertTypes(data: TypesCreate!): Types
    updateTypesByFields(id: Int!, data: TypesUpdate!): Types
    deleteTypesByID(id: Int!): Boolean!
  

}

`, BuiltIn: false},
	{Name: "../../sql2gql/schema/abilities.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type Abilities {
    iD: Int !
    abilityName: String !
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 
# ManyToOne
# OneToMany
    pokemonAbilitiesThroughFkAbility(filter: PokemonAbilitiesFilter, pagination: Pagination): ListPokemonAbilities!
}
input AbilitiesFilter {
    iD: FilterOnField
    abilityName: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input AbilitiesCreate {
    abilityName: String !
}

input AbilitiesUpdate {
    abilityName: String 
    active: Boolean 

}

type ListAbilities {
    totalCount: Int!
    data: [Abilities!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/base_stats.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type BaseStats {
    iD: Int !
    fkPokemon: Int !
    bHp: NullInt64 
    bAtk: NullInt64 
    bDef: NullInt64 
    bSpAtk: NullInt64 
    bSpDef: NullInt64 
    bSpeed: NullInt64 
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 
# ManyToOne
    pokemonThroughFkPokemon(filter: PokemonFilter): Pokemon
# OneToMany
}
input BaseStatsFilter {
    iD: FilterOnField
    fkPokemon: FilterOnField
    bHp: FilterOnField
    bAtk: FilterOnField
    bDef: FilterOnField
    bSpAtk: FilterOnField
    bSpDef: FilterOnField
    bSpeed: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input BaseStatsCreate {
    fkPokemon: Int !
    bHp: NullInt64 
    bAtk: NullInt64 
    bDef: NullInt64 
    bSpAtk: NullInt64 
    bSpDef: NullInt64 
    bSpeed: NullInt64 
}

input BaseStatsUpdate {
    fkPokemon: Int 
    bHp: NullInt64 
    bAtk: NullInt64 
    bDef: NullInt64 
    bSpAtk: NullInt64 
    bSpDef: NullInt64 
    bSpeed: NullInt64 
    active: Boolean 

}

type ListBaseStats {
    totalCount: Int!
    data: [BaseStats!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/pokemon.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type Pokemon {
    iD: Int !
    pokemonName: String !
    pokemonHeight: NullInt64 
    pokemonWeight: NullInt64 
    pokemonBaseExperience: NullInt64 
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 
# ManyToOne
# OneToMany
    baseStatsThroughFkPokemon(filter: BaseStatsFilter, pagination: Pagination): ListBaseStats!
    pokemonAbilitiesThroughFkPokemon(filter: PokemonAbilitiesFilter, pagination: Pagination): ListPokemonAbilities!
    pokemonEvolutionMatchupThroughPokemonID(filter: PokemonEvolutionMatchupFilter, pagination: Pagination): ListPokemonEvolutionMatchup!
    pokemonTypesThroughPokemonID(filter: PokemonTypesFilter, pagination: Pagination): ListPokemonTypes!
}
input PokemonFilter {
    iD: FilterOnField
    pokemonName: FilterOnField
    pokemonHeight: FilterOnField
    pokemonWeight: FilterOnField
    pokemonBaseExperience: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input PokemonCreate {
    pokemonName: String !
    pokemonHeight: NullInt64 
    pokemonWeight: NullInt64 
    pokemonBaseExperience: NullInt64 
}

input PokemonUpdate {
    pokemonName: String 
    pokemonHeight: NullInt64 
    pokemonWeight: NullInt64 
    pokemonBaseExperience: NullInt64 
    active: Boolean 

}

type ListPokemon {
    totalCount: Int!
    data: [Pokemon!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/pokemon_abilities.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type PokemonAbilities {
    iD: Int !
    fkPokemon: Int !
    fkAbility: Int !
    isHidden: Boolean !
    slot: Int !
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 
# ManyToOne
    pokemonThroughFkPokemon(filter: PokemonFilter): Pokemon
    abilitiesThroughFkAbility(filter: AbilitiesFilter): Abilities
# OneToMany
}
input PokemonAbilitiesFilter {
    iD: FilterOnField
    fkPokemon: FilterOnField
    fkAbility: FilterOnField
    isHidden: FilterOnField
    slot: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input PokemonAbilitiesCreate {
    fkPokemon: Int !
    fkAbility: Int !
    isHidden: Boolean !
    slot: Int !
}

input PokemonAbilitiesUpdate {
    fkPokemon: Int 
    fkAbility: Int 
    isHidden: Boolean 
    slot: Int 
    active: Boolean 

}

type ListPokemonAbilities {
    totalCount: Int!
    data: [PokemonAbilities!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/pokemon_evolution.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type PokemonEvolution {
    iD: Int !
    evolvedSpeciesID: Int !
    evolMinimumLevel: NullInt64 
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 
# ManyToOne
    pokemonEvolutionMatchupThroughEvolvedSpeciesID(filter: PokemonEvolutionMatchupFilter): PokemonEvolutionMatchup
# OneToMany
}
input PokemonEvolutionFilter {
    iD: FilterOnField
    evolvedSpeciesID: FilterOnField
    evolMinimumLevel: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input PokemonEvolutionCreate {
    evolvedSpeciesID: Int !
    evolMinimumLevel: NullInt64 
}

input PokemonEvolutionUpdate {
    evolvedSpeciesID: Int 
    evolMinimumLevel: NullInt64 
    active: Boolean 

}

type ListPokemonEvolution {
    totalCount: Int!
    data: [PokemonEvolution!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/pokemon_evolution_matchup.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type PokemonEvolutionMatchup {
    iD: Int !
    pokemonID: Int !
    evolvesFromSpeciesID: NullInt64 
    habitat:  PokemonEvolutionMatchupHabitat 
    genderRate: Int !
    captureRate: Int !
    baseHappiness: Int !
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 
# ManyToOne
    pokemonThroughPokemonID(filter: PokemonFilter): Pokemon
# OneToMany
    pokemonEvolutionThroughEvolvedSpeciesID(filter: PokemonEvolutionFilter, pagination: Pagination): ListPokemonEvolution!
}
input PokemonEvolutionMatchupFilter {
    iD: FilterOnField
    pokemonID: FilterOnField
    evolvesFromSpeciesID: FilterOnField
    habitat: FilterOnField
    genderRate: FilterOnField
    captureRate: FilterOnField
    baseHappiness: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input PokemonEvolutionMatchupCreate {
    pokemonID: Int !
    evolvesFromSpeciesID: NullInt64 
    habitat:  PokemonEvolutionMatchupHabitat 
    genderRate: Int !
    captureRate: Int !
    baseHappiness: Int !
}

input PokemonEvolutionMatchupUpdate {
    pokemonID: Int 
    evolvesFromSpeciesID: NullInt64 
    habitat:  PokemonEvolutionMatchupHabitat 
    genderRate: Int 
    captureRate: Int 
    baseHappiness: Int 
    active: Boolean 

}

type ListPokemonEvolutionMatchup {
    totalCount: Int!
    data: [PokemonEvolutionMatchup!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/pokemon_types.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type PokemonTypes {
    iD: Int !
    pokemonID: Int !
    typeID: Int !
    slot: Int !
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 
# ManyToOne
    pokemonThroughPokemonID(filter: PokemonFilter): Pokemon
    typesThroughTypeID(filter: TypesFilter): Types
# OneToMany
}
input PokemonTypesFilter {
    iD: FilterOnField
    pokemonID: FilterOnField
    typeID: FilterOnField
    slot: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input PokemonTypesCreate {
    pokemonID: Int !
    typeID: Int !
    slot: Int !
}

input PokemonTypesUpdate {
    pokemonID: Int 
    typeID: Int 
    slot: Int 
    active: Boolean 

}

type ListPokemonTypes {
    totalCount: Int!
    data: [PokemonTypes!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/types.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type Types {
    iD: Int !
    typeName: String !
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 
# ManyToOne
# OneToMany
    pokemonTypesThroughTypeID(filter: PokemonTypesFilter, pagination: Pagination): ListPokemonTypes!
}
input TypesFilter {
    iD: FilterOnField
    typeName: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input TypesCreate {
    typeName: String !
}

input TypesUpdate {
    typeName: String 
    active: Boolean 

}

type ListTypes {
    totalCount: Int!
    data: [Types!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/scalar.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

scalar PokemonEvolutionMatchupHabitat


scalar Datetime
scalar IntBool
scalar NullTime
scalar NullInt64
scalar NullFloat64
scalar NullString
scalar NullBool
scalar Map
scalar FilterOnField

input Pagination {
    page: Int
    perPage: Int
    sort: [String!]
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Abilities_pokemonAbilitiesThroughFkAbility_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Abilities_pokemonAbilitiesThroughFkAbility_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Abilities_pokemonAbilitiesThroughFkAbility_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Abilities_pokemonAbilitiesThroughFkAbility_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonAbilitiesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonAbilitiesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonAbilitiesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Abilities_pokemonAbilitiesThroughFkAbility_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_BaseStats_pokemonThroughFkPokemon_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_BaseStats_pokemonThroughFkPokemon_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_BaseStats_pokemonThroughFkPokemon_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteAbilitiesByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteAbilitiesByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteAbilitiesByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteBaseStatsByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteBaseStatsByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteBaseStatsByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deletePokemonAbilitiesByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deletePokemonAbilitiesByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deletePokemonAbilitiesByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deletePokemonByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deletePokemonByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deletePokemonByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deletePokemonEvolutionByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deletePokemonEvolutionByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deletePokemonEvolutionByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deletePokemonEvolutionMatchupByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deletePokemonEvolutionMatchupByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deletePokemonEvolutionMatchupByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deletePokemonTypesByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deletePokemonTypesByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deletePokemonTypesByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteTypesByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteTypesByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteTypesByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_insertAbilities_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_insertAbilities_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_insertAbilities_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.AbilitiesCreate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.AbilitiesCreate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNAbilitiesCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesCreate(ctx, tmp)
	}

	var zeroVal table.AbilitiesCreate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_insertBaseStats_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_insertBaseStats_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_insertBaseStats_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.BaseStatsCreate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.BaseStatsCreate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNBaseStatsCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsCreate(ctx, tmp)
	}

	var zeroVal table.BaseStatsCreate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_insertPokemonAbilities_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_insertPokemonAbilities_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_insertPokemonAbilities_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.PokemonAbilitiesCreate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.PokemonAbilitiesCreate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNPokemonAbilitiesCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesCreate(ctx, tmp)
	}

	var zeroVal table.PokemonAbilitiesCreate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_insertPokemonEvolutionMatchup_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_insertPokemonEvolutionMatchup_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_insertPokemonEvolutionMatchup_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.PokemonEvolutionMatchupCreate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.PokemonEvolutionMatchupCreate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNPokemonEvolutionMatchupCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupCreate(ctx, tmp)
	}

	var zeroVal table.PokemonEvolutionMatchupCreate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_insertPokemonEvolution_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_insertPokemonEvolution_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_insertPokemonEvolution_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.PokemonEvolutionCreate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.PokemonEvolutionCreate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNPokemonEvolutionCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionCreate(ctx, tmp)
	}

	var zeroVal table.PokemonEvolutionCreate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_insertPokemonTypes_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_insertPokemonTypes_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_insertPokemonTypes_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.PokemonTypesCreate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.PokemonTypesCreate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNPokemonTypesCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesCreate(ctx, tmp)
	}

	var zeroVal table.PokemonTypesCreate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_insertPokemon_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_insertPokemon_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_insertPokemon_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.PokemonCreate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.PokemonCreate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNPokemonCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonCreate(ctx, tmp)
	}

	var zeroVal table.PokemonCreate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_insertTypes_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_insertTypes_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_insertTypes_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.TypesCreate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.TypesCreate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNTypesCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypesCreate(ctx, tmp)
	}

	var zeroVal table.TypesCreate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateAbilitiesByFields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateAbilitiesByFields_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateAbilitiesByFields_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateAbilitiesByFields_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateAbilitiesByFields_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.AbilitiesUpdate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.AbilitiesUpdate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNAbilitiesUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesUpdate(ctx, tmp)
	}

	var zeroVal table.AbilitiesUpdate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateBaseStatsByFields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateBaseStatsByFields_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateBaseStatsByFields_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateBaseStatsByFields_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateBaseStatsByFields_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.BaseStatsUpdate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.BaseStatsUpdate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNBaseStatsUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsUpdate(ctx, tmp)
	}

	var zeroVal table.BaseStatsUpdate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updatePokemonAbilitiesByFields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updatePokemonAbilitiesByFields_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updatePokemonAbilitiesByFields_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updatePokemonAbilitiesByFields_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updatePokemonAbilitiesByFields_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.PokemonAbilitiesUpdate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.PokemonAbilitiesUpdate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNPokemonAbilitiesUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesUpdate(ctx, tmp)
	}

	var zeroVal table.PokemonAbilitiesUpdate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updatePokemonByFields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updatePokemonByFields_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updatePokemonByFields_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updatePokemonByFields_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updatePokemonByFields_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.PokemonUpdate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.PokemonUpdate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNPokemonUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonUpdate(ctx, tmp)
	}

	var zeroVal table.PokemonUpdate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updatePokemonEvolutionByFields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updatePokemonEvolutionByFields_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updatePokemonEvolutionByFields_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updatePokemonEvolutionByFields_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updatePokemonEvolutionByFields_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.PokemonEvolutionUpdate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.PokemonEvolutionUpdate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNPokemonEvolutionUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionUpdate(ctx, tmp)
	}

	var zeroVal table.PokemonEvolutionUpdate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updatePokemonEvolutionMatchupByFields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updatePokemonEvolutionMatchupByFields_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updatePokemonEvolutionMatchupByFields_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updatePokemonEvolutionMatchupByFields_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updatePokemonEvolutionMatchupByFields_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.PokemonEvolutionMatchupUpdate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.PokemonEvolutionMatchupUpdate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNPokemonEvolutionMatchupUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupUpdate(ctx, tmp)
	}

	var zeroVal table.PokemonEvolutionMatchupUpdate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updatePokemonTypesByFields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updatePokemonTypesByFields_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updatePokemonTypesByFields_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updatePokemonTypesByFields_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updatePokemonTypesByFields_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.PokemonTypesUpdate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.PokemonTypesUpdate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNPokemonTypesUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesUpdate(ctx, tmp)
	}

	var zeroVal table.PokemonTypesUpdate
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTypesByFields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateTypesByFields_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateTypesByFields_argsData(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["data"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateTypesByFields_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTypesByFields_argsData(
	ctx context.Context,
	rawArgs map[string]any,
) (table.TypesUpdate, error) {
	if _, ok := rawArgs["data"]; !ok {
		var zeroVal table.TypesUpdate
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
	if tmp, ok := rawArgs["data"]; ok {
		return ec.unmarshalNTypesUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypesUpdate(ctx, tmp)
	}

	var zeroVal table.TypesUpdate
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonAbilities_abilitiesThroughFkAbility_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PokemonAbilities_abilitiesThroughFkAbility_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_PokemonAbilities_abilitiesThroughFkAbility_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.AbilitiesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.AbilitiesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesFilter(ctx, tmp)
	}

	var zeroVal *table.AbilitiesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonAbilities_pokemonThroughFkPokemon_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PokemonAbilities_pokemonThroughFkPokemon_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_PokemonAbilities_pokemonThroughFkPokemon_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonFilter
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonEvolutionFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonEvolutionFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonEvolutionFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonEvolutionFilter
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonEvolutionMatchup_pokemonThroughPokemonID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PokemonEvolutionMatchup_pokemonThroughPokemonID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_PokemonEvolutionMatchup_pokemonThroughPokemonID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonFilter
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonEvolution_pokemonEvolutionMatchupThroughEvolvedSpeciesID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PokemonEvolution_pokemonEvolutionMatchupThroughEvolvedSpeciesID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_PokemonEvolution_pokemonEvolutionMatchupThroughEvolvedSpeciesID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonEvolutionMatchupFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonEvolutionMatchupFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonEvolutionMatchupFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonEvolutionMatchupFilter
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonTypes_pokemonThroughPokemonID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PokemonTypes_pokemonThroughPokemonID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_PokemonTypes_pokemonThroughPokemonID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonFilter
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonTypes_typesThroughTypeID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PokemonTypes_typesThroughTypeID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_PokemonTypes_typesThroughTypeID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.TypesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.TypesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypesFilter(ctx, tmp)
	}

	var zeroVal *table.TypesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_baseStatsThroughFkPokemon_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Pokemon_baseStatsThroughFkPokemon_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Pokemon_baseStatsThroughFkPokemon_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Pokemon_baseStatsThroughFkPokemon_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.BaseStatsFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.BaseStatsFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOBaseStatsFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsFilter(ctx, tmp)
	}

	var zeroVal *table.BaseStatsFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_baseStatsThroughFkPokemon_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_pokemonAbilitiesThroughFkPokemon_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Pokemon_pokemonAbilitiesThroughFkPokemon_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Pokemon_pokemonAbilitiesThroughFkPokemon_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Pokemon_pokemonAbilitiesThroughFkPokemon_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonAbilitiesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonAbilitiesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonAbilitiesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_pokemonAbilitiesThroughFkPokemon_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_pokemonEvolutionMatchupThroughPokemonID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Pokemon_pokemonEvolutionMatchupThroughPokemonID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Pokemon_pokemonEvolutionMatchupThroughPokemonID_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Pokemon_pokemonEvolutionMatchupThroughPokemonID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonEvolutionMatchupFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonEvolutionMatchupFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonEvolutionMatchupFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonEvolutionMatchupFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_pokemonEvolutionMatchupThroughPokemonID_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_pokemonTypesThroughPokemonID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Pokemon_pokemonTypesThroughPokemonID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Pokemon_pokemonTypesThroughPokemonID_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Pokemon_pokemonTypesThroughPokemonID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonTypesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonTypesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonTypesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_pokemonTypesThroughPokemonID_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["name"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_abilitiesByAbilityName_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_abilitiesByAbilityName_argsAbilityName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["abilityName"] = arg0
	arg1, err := ec.field_Query_abilitiesByAbilityName_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	arg2, err := ec.field_Query_abilitiesByAbilityName_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_abilitiesByAbilityName_argsAbilityName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["abilityName"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("abilityName"))
	if tmp, ok := rawArgs["abilityName"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_abilitiesByAbilityName_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.AbilitiesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.AbilitiesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesFilter(ctx, tmp)
	}

	var zeroVal *table.AbilitiesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_abilitiesByAbilityName_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_abilitiesByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_abilitiesByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["iD"] = arg0
	arg1, err := ec.field_Query_abilitiesByID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_abilitiesByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["iD"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
	if tmp, ok := rawArgs["iD"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_abilitiesByID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.AbilitiesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.AbilitiesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesFilter(ctx, tmp)
	}

	var zeroVal *table.AbilitiesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_baseStatsByFkPokemon_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_baseStatsByFkPokemon_argsFkPokemon(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["fkPokemon"] = arg0
	arg1, err := ec.field_Query_baseStatsByFkPokemon_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	arg2, err := ec.field_Query_baseStatsByFkPokemon_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_baseStatsByFkPokemon_argsFkPokemon(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["fkPokemon"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("fkPokemon"))
	if tmp, ok := rawArgs["fkPokemon"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_baseStatsByFkPokemon_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.BaseStatsFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.BaseStatsFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOBaseStatsFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsFilter(ctx, tmp)
	}

	var zeroVal *table.BaseStatsFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_baseStatsByFkPokemon_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_baseStatsByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_baseStatsByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["iD"] = arg0
	arg1, err := ec.field_Query_baseStatsByID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_baseStatsByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["iD"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
	if tmp, ok := rawArgs["iD"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_baseStatsByID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.BaseStatsFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.BaseStatsFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOBaseStatsFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsFilter(ctx, tmp)
	}

	var zeroVal *table.BaseStatsFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllAbilities_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findAllAbilities_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_findAllAbilities_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_findAllAbilities_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.AbilitiesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.AbilitiesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesFilter(ctx, tmp)
	}

	var zeroVal *table.AbilitiesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllAbilities_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllBaseStats_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findAllBaseStats_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_findAllBaseStats_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_findAllBaseStats_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.BaseStatsFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.BaseStatsFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOBaseStatsFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsFilter(ctx, tmp)
	}

	var zeroVal *table.BaseStatsFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllBaseStats_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllPokemonAbilities_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findAllPokemonAbilities_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_findAllPokemonAbilities_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_findAllPokemonAbilities_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonAbilitiesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonAbilitiesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonAbilitiesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllPokemonAbilities_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllPokemonEvolutionMatchup_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findAllPokemonEvolutionMatchup_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_findAllPokemonEvolutionMatchup_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_findAllPokemonEvolutionMatchup_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonEvolutionMatchupFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonEvolutionMatchupFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonEvolutionMatchupFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonEvolutionMatchupFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllPokemonEvolutionMatchup_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllPokemonEvolution_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findAllPokemonEvolution_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_findAllPokemonEvolution_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_findAllPokemonEvolution_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonEvolutionFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonEvolutionFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonEvolutionFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonEvolutionFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllPokemonEvolution_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllPokemonTypes_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findAllPokemonTypes_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_findAllPokemonTypes_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_findAllPokemonTypes_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonTypesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonTypesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonTypesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllPokemonTypes_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllPokemon_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findAllPokemon_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_findAllPokemon_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_findAllPokemon_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllPokemon_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllTypes_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findAllTypes_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_findAllTypes_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_findAllTypes_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.TypesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.TypesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypesFilter(ctx, tmp)
	}

	var zeroVal *table.TypesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllTypes_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonAbilitiesByFkAbility_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pokemonAbilitiesByFkAbility_argsFkAbility(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["fkAbility"] = arg0
	arg1, err := ec.field_Query_pokemonAbilitiesByFkAbility_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	arg2, err := ec.field_Query_pokemonAbilitiesByFkAbility_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_pokemonAbilitiesByFkAbility_argsFkAbility(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["fkAbility"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("fkAbility"))
	if tmp, ok := rawArgs["fkAbility"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonAbilitiesByFkAbility_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonAbilitiesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonAbilitiesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonAbilitiesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonAbilitiesByFkAbility_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonAbilitiesByFkPokemon_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pokemonAbilitiesByFkPokemon_argsFkPokemon(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["fkPokemon"] = arg0
	arg1, err := ec.field_Query_pokemonAbilitiesByFkPokemon_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	arg2, err := ec.field_Query_pokemonAbilitiesByFkPokemon_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_pokemonAbilitiesByFkPokemon_argsFkPokemon(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["fkPokemon"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("fkPokemon"))
	if tmp, ok := rawArgs["fkPokemon"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonAbilitiesByFkPokemon_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonAbilitiesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonAbilitiesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonAbilitiesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonAbilitiesByFkPokemon_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonAbilitiesByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pokemonAbilitiesByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["iD"] = arg0
	arg1, err := ec.field_Query_pokemonAbilitiesByID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_pokemonAbilitiesByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["iD"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
	if tmp, ok := rawArgs["iD"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonAbilitiesByID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonAbilitiesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonAbilitiesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonAbilitiesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pokemonByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["iD"] = arg0
	arg1, err := ec.field_Query_pokemonByID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_pokemonByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["iD"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
	if tmp, ok := rawArgs["iD"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonByID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonByPokemonName_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pokemonByPokemonName_argsPokemonName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pokemonName"] = arg0
	arg1, err := ec.field_Query_pokemonByPokemonName_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	arg2, err := ec.field_Query_pokemonByPokemonName_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_pokemonByPokemonName_argsPokemonName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["pokemonName"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonName"))
	if tmp, ok := rawArgs["pokemonName"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonByPokemonName_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonByPokemonName_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonEvolutionByEvolvedSpeciesID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pokemonEvolutionByEvolvedSpeciesID_argsEvolvedSpeciesID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["evolvedSpeciesID"] = arg0
	arg1, err := ec.field_Query_pokemonEvolutionByEvolvedSpeciesID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	arg2, err := ec.field_Query_pokemonEvolutionByEvolvedSpeciesID_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_pokemonEvolutionByEvolvedSpeciesID_argsEvolvedSpeciesID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["evolvedSpeciesID"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("evolvedSpeciesID"))
	if tmp, ok := rawArgs["evolvedSpeciesID"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonEvolutionByEvolvedSpeciesID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonEvolutionFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonEvolutionFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonEvolutionFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonEvolutionFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonEvolutionByEvolvedSpeciesID_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonEvolutionByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pokemonEvolutionByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["iD"] = arg0
	arg1, err := ec.field_Query_pokemonEvolutionByID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_pokemonEvolutionByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["iD"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
	if tmp, ok := rawArgs["iD"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonEvolutionByID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonEvolutionFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonEvolutionFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonEvolutionFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonEvolutionFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonEvolutionMatchupByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pokemonEvolutionMatchupByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["iD"] = arg0
	arg1, err := ec.field_Query_pokemonEvolutionMatchupByID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_pokemonEvolutionMatchupByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["iD"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
	if tmp, ok := rawArgs["iD"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonEvolutionMatchupByID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonEvolutionMatchupFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonEvolutionMatchupFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonEvolutionMatchupFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonEvolutionMatchupFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonEvolutionMatchupByPokemonID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pokemonEvolutionMatchupByPokemonID_argsPokemonID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pokemonID"] = arg0
	arg1, err := ec.field_Query_pokemonEvolutionMatchupByPokemonID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	arg2, err := ec.field_Query_pokemonEvolutionMatchupByPokemonID_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_pokemonEvolutionMatchupByPokemonID_argsPokemonID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["pokemonID"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonID"))
	if tmp, ok := rawArgs["pokemonID"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonEvolutionMatchupByPokemonID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonEvolutionMatchupFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonEvolutionMatchupFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonEvolutionMatchupFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonEvolutionMatchupFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonEvolutionMatchupByPokemonID_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonTypesByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pokemonTypesByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["iD"] = arg0
	arg1, err := ec.field_Query_pokemonTypesByID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_pokemonTypesByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["iD"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
	if tmp, ok := rawArgs["iD"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonTypesByID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonTypesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonTypesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonTypesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonTypesByPokemonID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pokemonTypesByPokemonID_argsPokemonID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pokemonID"] = arg0
	arg1, err := ec.field_Query_pokemonTypesByPokemonID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	arg2, err := ec.field_Query_pokemonTypesByPokemonID_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_pokemonTypesByPokemonID_argsPokemonID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["pokemonID"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonID"))
	if tmp, ok := rawArgs["pokemonID"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonTypesByPokemonID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonTypesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonTypesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonTypesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonTypesByPokemonID_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonTypesByTypeID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pokemonTypesByTypeID_argsTypeID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["typeID"] = arg0
	arg1, err := ec.field_Query_pokemonTypesByTypeID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	arg2, err := ec.field_Query_pokemonTypesByTypeID_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_pokemonTypesByTypeID_argsTypeID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["typeID"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("typeID"))
	if tmp, ok := rawArgs["typeID"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonTypesByTypeID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonTypesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonTypesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonTypesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pokemonTypesByTypeID_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query_typesByID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_typesByID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["iD"] = arg0
	arg1, err := ec.field_Query_typesByID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_typesByID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["iD"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
	if tmp, ok := rawArgs["iD"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_typesByID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.TypesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.TypesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypesFilter(ctx, tmp)
	}

	var zeroVal *table.TypesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Types_pokemonTypesThroughTypeID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Types_pokemonTypesThroughTypeID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Types_pokemonTypesThroughTypeID_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Types_pokemonTypesThroughTypeID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonTypesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonTypesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonTypesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Types_pokemonTypesThroughTypeID_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Directive_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Directive_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Field_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Field_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Abilities_iD(ctx context.Context, field graphql.CollectedField, obj *table.Abilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Abilities_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Abilities_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Abilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Abilities_abilityName(ctx context.Context, field graphql.CollectedField, obj *table.Abilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Abilities_abilityName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbilityName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Abilities_abilityName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Abilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Abilities_active(ctx context.Context, field graphql.CollectedField, obj *table.Abilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Abilities_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Abilities_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Abilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Abilities_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.Abilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Abilities_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Abilities_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Abilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Abilities_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.Abilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Abilities_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Abilities_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Abilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Abilities_pokemonAbilitiesThroughFkAbility(ctx context.Context, field graphql.CollectedField, obj *table.Abilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Abilities_pokemonAbilitiesThroughFkAbility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Abilities().PokemonAbilitiesThroughFkAbility(rctx, obj, fc.Args["filter"].(*table.PokemonAbilitiesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonAbilities)
	fc.Result = res
	return ec.marshalNListPokemonAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Abilities_pokemonAbilitiesThroughFkAbility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Abilities",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonAbilities_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonAbilities_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonAbilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Abilities_pokemonAbilitiesThroughFkAbility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_iD(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_fkPokemon(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_fkPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkPokemon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_fkPokemon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_bHp(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_bHp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BHp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_bHp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_bAtk(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_bAtk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BAtk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_bAtk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_bDef(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_bDef(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BDef, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_bDef(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_bSpAtk(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_bSpAtk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BSpAtk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_bSpAtk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_bSpDef(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_bSpDef(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BSpDef, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_bSpDef(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_bSpeed(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_bSpeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_bSpeed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_active(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_pokemonThroughFkPokemon(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_pokemonThroughFkPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BaseStats().PokemonThroughFkPokemon(rctx, obj, fc.Args["filter"].(*table.PokemonFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Pokemon)
	fc.Result = res
	return ec.marshalOPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_pokemonThroughFkPokemon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Pokemon_iD(ctx, field)
			case "pokemonName":
				return ec.fieldContext_Pokemon_pokemonName(ctx, field)
			case "pokemonHeight":
				return ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
			case "pokemonWeight":
				return ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
			case "pokemonBaseExperience":
				return ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
			case "active":
				return ec.fieldContext_Pokemon_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Pokemon_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Pokemon_updatedAt(ctx, field)
			case "baseStatsThroughFkPokemon":
				return ec.fieldContext_Pokemon_baseStatsThroughFkPokemon(ctx, field)
			case "pokemonAbilitiesThroughFkPokemon":
				return ec.fieldContext_Pokemon_pokemonAbilitiesThroughFkPokemon(ctx, field)
			case "pokemonEvolutionMatchupThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonEvolutionMatchupThroughPokemonID(ctx, field)
			case "pokemonTypesThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonTypesThroughPokemonID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pokemon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_BaseStats_pokemonThroughFkPokemon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ListAbilities_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListAbilities_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListAbilities_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListAbilities_data(ctx context.Context, field graphql.CollectedField, obj *table.ListAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListAbilities_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.Abilities)
	fc.Result = res
	return ec.marshalNAbilities2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListAbilities_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Abilities_iD(ctx, field)
			case "abilityName":
				return ec.fieldContext_Abilities_abilityName(ctx, field)
			case "active":
				return ec.fieldContext_Abilities_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Abilities_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Abilities_updatedAt(ctx, field)
			case "pokemonAbilitiesThroughFkAbility":
				return ec.fieldContext_Abilities_pokemonAbilitiesThroughFkAbility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Abilities", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListBaseStats_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListBaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListBaseStats_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListBaseStats_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListBaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListBaseStats_data(ctx context.Context, field graphql.CollectedField, obj *table.ListBaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListBaseStats_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.BaseStats)
	fc.Result = res
	return ec.marshalNBaseStats2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListBaseStats_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListBaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_BaseStats_iD(ctx, field)
			case "fkPokemon":
				return ec.fieldContext_BaseStats_fkPokemon(ctx, field)
			case "bHp":
				return ec.fieldContext_BaseStats_bHp(ctx, field)
			case "bAtk":
				return ec.fieldContext_BaseStats_bAtk(ctx, field)
			case "bDef":
				return ec.fieldContext_BaseStats_bDef(ctx, field)
			case "bSpAtk":
				return ec.fieldContext_BaseStats_bSpAtk(ctx, field)
			case "bSpDef":
				return ec.fieldContext_BaseStats_bSpDef(ctx, field)
			case "bSpeed":
				return ec.fieldContext_BaseStats_bSpeed(ctx, field)
			case "active":
				return ec.fieldContext_BaseStats_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_BaseStats_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_BaseStats_updatedAt(ctx, field)
			case "pokemonThroughFkPokemon":
				return ec.fieldContext_BaseStats_pokemonThroughFkPokemon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BaseStats", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemon_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemon_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemon_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemon_data(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemon_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.Pokemon)
	fc.Result = res
	return ec.marshalNPokemon2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemon_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Pokemon_iD(ctx, field)
			case "pokemonName":
				return ec.fieldContext_Pokemon_pokemonName(ctx, field)
			case "pokemonHeight":
				return ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
			case "pokemonWeight":
				return ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
			case "pokemonBaseExperience":
				return ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
			case "active":
				return ec.fieldContext_Pokemon_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Pokemon_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Pokemon_updatedAt(ctx, field)
			case "baseStatsThroughFkPokemon":
				return ec.fieldContext_Pokemon_baseStatsThroughFkPokemon(ctx, field)
			case "pokemonAbilitiesThroughFkPokemon":
				return ec.fieldContext_Pokemon_pokemonAbilitiesThroughFkPokemon(ctx, field)
			case "pokemonEvolutionMatchupThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonEvolutionMatchupThroughPokemonID(ctx, field)
			case "pokemonTypesThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonTypesThroughPokemonID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pokemon", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonAbilities_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonAbilities_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonAbilities_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonAbilities_data(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonAbilities_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.PokemonAbilities)
	fc.Result = res
	return ec.marshalNPokemonAbilities2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonAbilities_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonAbilities_iD(ctx, field)
			case "fkPokemon":
				return ec.fieldContext_PokemonAbilities_fkPokemon(ctx, field)
			case "fkAbility":
				return ec.fieldContext_PokemonAbilities_fkAbility(ctx, field)
			case "isHidden":
				return ec.fieldContext_PokemonAbilities_isHidden(ctx, field)
			case "slot":
				return ec.fieldContext_PokemonAbilities_slot(ctx, field)
			case "active":
				return ec.fieldContext_PokemonAbilities_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonAbilities_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonAbilities_updatedAt(ctx, field)
			case "pokemonThroughFkPokemon":
				return ec.fieldContext_PokemonAbilities_pokemonThroughFkPokemon(ctx, field)
			case "abilitiesThroughFkAbility":
				return ec.fieldContext_PokemonAbilities_abilitiesThroughFkAbility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonAbilities", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonEvolution_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonEvolution_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonEvolution_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonEvolution_data(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonEvolution_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.PokemonEvolution)
	fc.Result = res
	return ec.marshalNPokemonEvolution2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonEvolution_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonEvolution_iD(ctx, field)
			case "evolvedSpeciesID":
				return ec.fieldContext_PokemonEvolution_evolvedSpeciesID(ctx, field)
			case "evolMinimumLevel":
				return ec.fieldContext_PokemonEvolution_evolMinimumLevel(ctx, field)
			case "active":
				return ec.fieldContext_PokemonEvolution_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonEvolution_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonEvolution_updatedAt(ctx, field)
			case "pokemonEvolutionMatchupThroughEvolvedSpeciesID":
				return ec.fieldContext_PokemonEvolution_pokemonEvolutionMatchupThroughEvolvedSpeciesID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonEvolution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonEvolutionMatchup_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonEvolutionMatchup_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonEvolutionMatchup_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonEvolutionMatchup_data(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonEvolutionMatchup_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.PokemonEvolutionMatchup)
	fc.Result = res
	return ec.marshalNPokemonEvolutionMatchup2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonEvolutionMatchup_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonEvolutionMatchup_iD(ctx, field)
			case "pokemonID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonID(ctx, field)
			case "evolvesFromSpeciesID":
				return ec.fieldContext_PokemonEvolutionMatchup_evolvesFromSpeciesID(ctx, field)
			case "habitat":
				return ec.fieldContext_PokemonEvolutionMatchup_habitat(ctx, field)
			case "genderRate":
				return ec.fieldContext_PokemonEvolutionMatchup_genderRate(ctx, field)
			case "captureRate":
				return ec.fieldContext_PokemonEvolutionMatchup_captureRate(ctx, field)
			case "baseHappiness":
				return ec.fieldContext_PokemonEvolutionMatchup_baseHappiness(ctx, field)
			case "active":
				return ec.fieldContext_PokemonEvolutionMatchup_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonEvolutionMatchup_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonEvolutionMatchup_updatedAt(ctx, field)
			case "pokemonThroughPokemonID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonThroughPokemonID(ctx, field)
			case "pokemonEvolutionThroughEvolvedSpeciesID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonEvolutionMatchup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonTypes_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonTypes_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonTypes_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonTypes_data(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonTypes_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.PokemonTypes)
	fc.Result = res
	return ec.marshalNPokemonTypes2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonTypes_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonTypes_iD(ctx, field)
			case "pokemonID":
				return ec.fieldContext_PokemonTypes_pokemonID(ctx, field)
			case "typeID":
				return ec.fieldContext_PokemonTypes_typeID(ctx, field)
			case "slot":
				return ec.fieldContext_PokemonTypes_slot(ctx, field)
			case "active":
				return ec.fieldContext_PokemonTypes_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonTypes_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonTypes_updatedAt(ctx, field)
			case "pokemonThroughPokemonID":
				return ec.fieldContext_PokemonTypes_pokemonThroughPokemonID(ctx, field)
			case "typesThroughTypeID":
				return ec.fieldContext_PokemonTypes_typesThroughTypeID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonTypes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListTypes_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListTypes_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListTypes_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListTypes_data(ctx context.Context, field graphql.CollectedField, obj *table.ListTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListTypes_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.Types)
	fc.Result = res
	return ec.marshalNTypes2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListTypes_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Types_iD(ctx, field)
			case "typeName":
				return ec.fieldContext_Types_typeName(ctx, field)
			case "active":
				return ec.fieldContext_Types_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Types_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Types_updatedAt(ctx, field)
			case "pokemonTypesThroughTypeID":
				return ec.fieldContext_Types_pokemonTypesThroughTypeID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Types", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_insertAbilities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_insertAbilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertAbilities(rctx, fc.Args["data"].(table.AbilitiesCreate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Abilities)
	fc.Result = res
	return ec.marshalOAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_insertAbilities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Abilities_iD(ctx, field)
			case "abilityName":
				return ec.fieldContext_Abilities_abilityName(ctx, field)
			case "active":
				return ec.fieldContext_Abilities_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Abilities_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Abilities_updatedAt(ctx, field)
			case "pokemonAbilitiesThroughFkAbility":
				return ec.fieldContext_Abilities_pokemonAbilitiesThroughFkAbility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Abilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_insertAbilities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAbilitiesByFields(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAbilitiesByFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAbilitiesByFields(rctx, fc.Args["id"].(int), fc.Args["data"].(table.AbilitiesUpdate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Abilities)
	fc.Result = res
	return ec.marshalOAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAbilitiesByFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Abilities_iD(ctx, field)
			case "abilityName":
				return ec.fieldContext_Abilities_abilityName(ctx, field)
			case "active":
				return ec.fieldContext_Abilities_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Abilities_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Abilities_updatedAt(ctx, field)
			case "pokemonAbilitiesThroughFkAbility":
				return ec.fieldContext_Abilities_pokemonAbilitiesThroughFkAbility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Abilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAbilitiesByFields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAbilitiesByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteAbilitiesByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAbilitiesByID(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteAbilitiesByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteAbilitiesByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_insertBaseStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_insertBaseStats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertBaseStats(rctx, fc.Args["data"].(table.BaseStatsCreate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.BaseStats)
	fc.Result = res
	return ec.marshalOBaseStats2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStats(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_insertBaseStats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_BaseStats_iD(ctx, field)
			case "fkPokemon":
				return ec.fieldContext_BaseStats_fkPokemon(ctx, field)
			case "bHp":
				return ec.fieldContext_BaseStats_bHp(ctx, field)
			case "bAtk":
				return ec.fieldContext_BaseStats_bAtk(ctx, field)
			case "bDef":
				return ec.fieldContext_BaseStats_bDef(ctx, field)
			case "bSpAtk":
				return ec.fieldContext_BaseStats_bSpAtk(ctx, field)
			case "bSpDef":
				return ec.fieldContext_BaseStats_bSpDef(ctx, field)
			case "bSpeed":
				return ec.fieldContext_BaseStats_bSpeed(ctx, field)
			case "active":
				return ec.fieldContext_BaseStats_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_BaseStats_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_BaseStats_updatedAt(ctx, field)
			case "pokemonThroughFkPokemon":
				return ec.fieldContext_BaseStats_pokemonThroughFkPokemon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BaseStats", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_insertBaseStats_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateBaseStatsByFields(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateBaseStatsByFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBaseStatsByFields(rctx, fc.Args["id"].(int), fc.Args["data"].(table.BaseStatsUpdate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.BaseStats)
	fc.Result = res
	return ec.marshalOBaseStats2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStats(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateBaseStatsByFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_BaseStats_iD(ctx, field)
			case "fkPokemon":
				return ec.fieldContext_BaseStats_fkPokemon(ctx, field)
			case "bHp":
				return ec.fieldContext_BaseStats_bHp(ctx, field)
			case "bAtk":
				return ec.fieldContext_BaseStats_bAtk(ctx, field)
			case "bDef":
				return ec.fieldContext_BaseStats_bDef(ctx, field)
			case "bSpAtk":
				return ec.fieldContext_BaseStats_bSpAtk(ctx, field)
			case "bSpDef":
				return ec.fieldContext_BaseStats_bSpDef(ctx, field)
			case "bSpeed":
				return ec.fieldContext_BaseStats_bSpeed(ctx, field)
			case "active":
				return ec.fieldContext_BaseStats_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_BaseStats_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_BaseStats_updatedAt(ctx, field)
			case "pokemonThroughFkPokemon":
				return ec.fieldContext_BaseStats_pokemonThroughFkPokemon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BaseStats", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateBaseStatsByFields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteBaseStatsByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteBaseStatsByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBaseStatsByID(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteBaseStatsByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteBaseStatsByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_insertPokemon(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_insertPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertPokemon(rctx, fc.Args["data"].(table.PokemonCreate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Pokemon)
	fc.Result = res
	return ec.marshalOPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_insertPokemon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Pokemon_iD(ctx, field)
			case "pokemonName":
				return ec.fieldContext_Pokemon_pokemonName(ctx, field)
			case "pokemonHeight":
				return ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
			case "pokemonWeight":
				return ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
			case "pokemonBaseExperience":
				return ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
			case "active":
				return ec.fieldContext_Pokemon_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Pokemon_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Pokemon_updatedAt(ctx, field)
			case "baseStatsThroughFkPokemon":
				return ec.fieldContext_Pokemon_baseStatsThroughFkPokemon(ctx, field)
			case "pokemonAbilitiesThroughFkPokemon":
				return ec.fieldContext_Pokemon_pokemonAbilitiesThroughFkPokemon(ctx, field)
			case "pokemonEvolutionMatchupThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonEvolutionMatchupThroughPokemonID(ctx, field)
			case "pokemonTypesThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonTypesThroughPokemonID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pokemon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_insertPokemon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePokemonByFields(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePokemonByFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePokemonByFields(rctx, fc.Args["id"].(int), fc.Args["data"].(table.PokemonUpdate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Pokemon)
	fc.Result = res
	return ec.marshalOPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePokemonByFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Pokemon_iD(ctx, field)
			case "pokemonName":
				return ec.fieldContext_Pokemon_pokemonName(ctx, field)
			case "pokemonHeight":
				return ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
			case "pokemonWeight":
				return ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
			case "pokemonBaseExperience":
				return ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
			case "active":
				return ec.fieldContext_Pokemon_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Pokemon_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Pokemon_updatedAt(ctx, field)
			case "baseStatsThroughFkPokemon":
				return ec.fieldContext_Pokemon_baseStatsThroughFkPokemon(ctx, field)
			case "pokemonAbilitiesThroughFkPokemon":
				return ec.fieldContext_Pokemon_pokemonAbilitiesThroughFkPokemon(ctx, field)
			case "pokemonEvolutionMatchupThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonEvolutionMatchupThroughPokemonID(ctx, field)
			case "pokemonTypesThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonTypesThroughPokemonID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pokemon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePokemonByFields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePokemonByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePokemonByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePokemonByID(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePokemonByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePokemonByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_insertPokemonAbilities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_insertPokemonAbilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertPokemonAbilities(rctx, fc.Args["data"].(table.PokemonAbilitiesCreate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.PokemonAbilities)
	fc.Result = res
	return ec.marshalOPokemonAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_insertPokemonAbilities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonAbilities_iD(ctx, field)
			case "fkPokemon":
				return ec.fieldContext_PokemonAbilities_fkPokemon(ctx, field)
			case "fkAbility":
				return ec.fieldContext_PokemonAbilities_fkAbility(ctx, field)
			case "isHidden":
				return ec.fieldContext_PokemonAbilities_isHidden(ctx, field)
			case "slot":
				return ec.fieldContext_PokemonAbilities_slot(ctx, field)
			case "active":
				return ec.fieldContext_PokemonAbilities_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonAbilities_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonAbilities_updatedAt(ctx, field)
			case "pokemonThroughFkPokemon":
				return ec.fieldContext_PokemonAbilities_pokemonThroughFkPokemon(ctx, field)
			case "abilitiesThroughFkAbility":
				return ec.fieldContext_PokemonAbilities_abilitiesThroughFkAbility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonAbilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_insertPokemonAbilities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePokemonAbilitiesByFields(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePokemonAbilitiesByFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePokemonAbilitiesByFields(rctx, fc.Args["id"].(int), fc.Args["data"].(table.PokemonAbilitiesUpdate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.PokemonAbilities)
	fc.Result = res
	return ec.marshalOPokemonAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePokemonAbilitiesByFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonAbilities_iD(ctx, field)
			case "fkPokemon":
				return ec.fieldContext_PokemonAbilities_fkPokemon(ctx, field)
			case "fkAbility":
				return ec.fieldContext_PokemonAbilities_fkAbility(ctx, field)
			case "isHidden":
				return ec.fieldContext_PokemonAbilities_isHidden(ctx, field)
			case "slot":
				return ec.fieldContext_PokemonAbilities_slot(ctx, field)
			case "active":
				return ec.fieldContext_PokemonAbilities_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonAbilities_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonAbilities_updatedAt(ctx, field)
			case "pokemonThroughFkPokemon":
				return ec.fieldContext_PokemonAbilities_pokemonThroughFkPokemon(ctx, field)
			case "abilitiesThroughFkAbility":
				return ec.fieldContext_PokemonAbilities_abilitiesThroughFkAbility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonAbilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePokemonAbilitiesByFields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePokemonAbilitiesByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePokemonAbilitiesByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePokemonAbilitiesByID(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePokemonAbilitiesByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePokemonAbilitiesByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_insertPokemonEvolution(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_insertPokemonEvolution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertPokemonEvolution(rctx, fc.Args["data"].(table.PokemonEvolutionCreate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.PokemonEvolution)
	fc.Result = res
	return ec.marshalOPokemonEvolution2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_insertPokemonEvolution(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonEvolution_iD(ctx, field)
			case "evolvedSpeciesID":
				return ec.fieldContext_PokemonEvolution_evolvedSpeciesID(ctx, field)
			case "evolMinimumLevel":
				return ec.fieldContext_PokemonEvolution_evolMinimumLevel(ctx, field)
			case "active":
				return ec.fieldContext_PokemonEvolution_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonEvolution_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonEvolution_updatedAt(ctx, field)
			case "pokemonEvolutionMatchupThroughEvolvedSpeciesID":
				return ec.fieldContext_PokemonEvolution_pokemonEvolutionMatchupThroughEvolvedSpeciesID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonEvolution", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_insertPokemonEvolution_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePokemonEvolutionByFields(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePokemonEvolutionByFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePokemonEvolutionByFields(rctx, fc.Args["id"].(int), fc.Args["data"].(table.PokemonEvolutionUpdate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.PokemonEvolution)
	fc.Result = res
	return ec.marshalOPokemonEvolution2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePokemonEvolutionByFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonEvolution_iD(ctx, field)
			case "evolvedSpeciesID":
				return ec.fieldContext_PokemonEvolution_evolvedSpeciesID(ctx, field)
			case "evolMinimumLevel":
				return ec.fieldContext_PokemonEvolution_evolMinimumLevel(ctx, field)
			case "active":
				return ec.fieldContext_PokemonEvolution_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonEvolution_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonEvolution_updatedAt(ctx, field)
			case "pokemonEvolutionMatchupThroughEvolvedSpeciesID":
				return ec.fieldContext_PokemonEvolution_pokemonEvolutionMatchupThroughEvolvedSpeciesID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonEvolution", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePokemonEvolutionByFields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePokemonEvolutionByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePokemonEvolutionByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePokemonEvolutionByID(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePokemonEvolutionByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePokemonEvolutionByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_insertPokemonEvolutionMatchup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_insertPokemonEvolutionMatchup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertPokemonEvolutionMatchup(rctx, fc.Args["data"].(table.PokemonEvolutionMatchupCreate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.PokemonEvolutionMatchup)
	fc.Result = res
	return ec.marshalOPokemonEvolutionMatchup2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_insertPokemonEvolutionMatchup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonEvolutionMatchup_iD(ctx, field)
			case "pokemonID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonID(ctx, field)
			case "evolvesFromSpeciesID":
				return ec.fieldContext_PokemonEvolutionMatchup_evolvesFromSpeciesID(ctx, field)
			case "habitat":
				return ec.fieldContext_PokemonEvolutionMatchup_habitat(ctx, field)
			case "genderRate":
				return ec.fieldContext_PokemonEvolutionMatchup_genderRate(ctx, field)
			case "captureRate":
				return ec.fieldContext_PokemonEvolutionMatchup_captureRate(ctx, field)
			case "baseHappiness":
				return ec.fieldContext_PokemonEvolutionMatchup_baseHappiness(ctx, field)
			case "active":
				return ec.fieldContext_PokemonEvolutionMatchup_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonEvolutionMatchup_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonEvolutionMatchup_updatedAt(ctx, field)
			case "pokemonThroughPokemonID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonThroughPokemonID(ctx, field)
			case "pokemonEvolutionThroughEvolvedSpeciesID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonEvolutionMatchup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_insertPokemonEvolutionMatchup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePokemonEvolutionMatchupByFields(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePokemonEvolutionMatchupByFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePokemonEvolutionMatchupByFields(rctx, fc.Args["id"].(int), fc.Args["data"].(table.PokemonEvolutionMatchupUpdate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.PokemonEvolutionMatchup)
	fc.Result = res
	return ec.marshalOPokemonEvolutionMatchup2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePokemonEvolutionMatchupByFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonEvolutionMatchup_iD(ctx, field)
			case "pokemonID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonID(ctx, field)
			case "evolvesFromSpeciesID":
				return ec.fieldContext_PokemonEvolutionMatchup_evolvesFromSpeciesID(ctx, field)
			case "habitat":
				return ec.fieldContext_PokemonEvolutionMatchup_habitat(ctx, field)
			case "genderRate":
				return ec.fieldContext_PokemonEvolutionMatchup_genderRate(ctx, field)
			case "captureRate":
				return ec.fieldContext_PokemonEvolutionMatchup_captureRate(ctx, field)
			case "baseHappiness":
				return ec.fieldContext_PokemonEvolutionMatchup_baseHappiness(ctx, field)
			case "active":
				return ec.fieldContext_PokemonEvolutionMatchup_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonEvolutionMatchup_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonEvolutionMatchup_updatedAt(ctx, field)
			case "pokemonThroughPokemonID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonThroughPokemonID(ctx, field)
			case "pokemonEvolutionThroughEvolvedSpeciesID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonEvolutionMatchup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePokemonEvolutionMatchupByFields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePokemonEvolutionMatchupByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePokemonEvolutionMatchupByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePokemonEvolutionMatchupByID(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePokemonEvolutionMatchupByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePokemonEvolutionMatchupByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_insertPokemonTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_insertPokemonTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertPokemonTypes(rctx, fc.Args["data"].(table.PokemonTypesCreate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.PokemonTypes)
	fc.Result = res
	return ec.marshalOPokemonTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_insertPokemonTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonTypes_iD(ctx, field)
			case "pokemonID":
				return ec.fieldContext_PokemonTypes_pokemonID(ctx, field)
			case "typeID":
				return ec.fieldContext_PokemonTypes_typeID(ctx, field)
			case "slot":
				return ec.fieldContext_PokemonTypes_slot(ctx, field)
			case "active":
				return ec.fieldContext_PokemonTypes_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonTypes_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonTypes_updatedAt(ctx, field)
			case "pokemonThroughPokemonID":
				return ec.fieldContext_PokemonTypes_pokemonThroughPokemonID(ctx, field)
			case "typesThroughTypeID":
				return ec.fieldContext_PokemonTypes_typesThroughTypeID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonTypes", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_insertPokemonTypes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePokemonTypesByFields(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePokemonTypesByFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePokemonTypesByFields(rctx, fc.Args["id"].(int), fc.Args["data"].(table.PokemonTypesUpdate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.PokemonTypes)
	fc.Result = res
	return ec.marshalOPokemonTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePokemonTypesByFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonTypes_iD(ctx, field)
			case "pokemonID":
				return ec.fieldContext_PokemonTypes_pokemonID(ctx, field)
			case "typeID":
				return ec.fieldContext_PokemonTypes_typeID(ctx, field)
			case "slot":
				return ec.fieldContext_PokemonTypes_slot(ctx, field)
			case "active":
				return ec.fieldContext_PokemonTypes_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonTypes_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonTypes_updatedAt(ctx, field)
			case "pokemonThroughPokemonID":
				return ec.fieldContext_PokemonTypes_pokemonThroughPokemonID(ctx, field)
			case "typesThroughTypeID":
				return ec.fieldContext_PokemonTypes_typesThroughTypeID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonTypes", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePokemonTypesByFields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePokemonTypesByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePokemonTypesByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePokemonTypesByID(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePokemonTypesByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePokemonTypesByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_insertTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_insertTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertTypes(rctx, fc.Args["data"].(table.TypesCreate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Types)
	fc.Result = res
	return ec.marshalOTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_insertTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Types_iD(ctx, field)
			case "typeName":
				return ec.fieldContext_Types_typeName(ctx, field)
			case "active":
				return ec.fieldContext_Types_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Types_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Types_updatedAt(ctx, field)
			case "pokemonTypesThroughTypeID":
				return ec.fieldContext_Types_pokemonTypesThroughTypeID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Types", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_insertTypes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTypesByFields(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTypesByFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTypesByFields(rctx, fc.Args["id"].(int), fc.Args["data"].(table.TypesUpdate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Types)
	fc.Result = res
	return ec.marshalOTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTypesByFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Types_iD(ctx, field)
			case "typeName":
				return ec.fieldContext_Types_typeName(ctx, field)
			case "active":
				return ec.fieldContext_Types_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Types_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Types_updatedAt(ctx, field)
			case "pokemonTypesThroughTypeID":
				return ec.fieldContext_Types_pokemonTypesThroughTypeID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Types", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTypesByFields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTypesByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTypesByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTypesByID(rctx, fc.Args["id"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTypesByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTypesByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_iD(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_pokemonName(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_pokemonName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PokemonName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_pokemonName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_pokemonHeight(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PokemonHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_pokemonHeight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_pokemonWeight(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PokemonWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_pokemonWeight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_pokemonBaseExperience(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PokemonBaseExperience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_pokemonBaseExperience(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_active(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_baseStatsThroughFkPokemon(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_baseStatsThroughFkPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Pokemon().BaseStatsThroughFkPokemon(rctx, obj, fc.Args["filter"].(*table.BaseStatsFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListBaseStats)
	fc.Result = res
	return ec.marshalNListBaseStats2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListBaseStats(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_baseStatsThroughFkPokemon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListBaseStats_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListBaseStats_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListBaseStats", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Pokemon_baseStatsThroughFkPokemon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_pokemonAbilitiesThroughFkPokemon(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_pokemonAbilitiesThroughFkPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Pokemon().PokemonAbilitiesThroughFkPokemon(rctx, obj, fc.Args["filter"].(*table.PokemonAbilitiesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonAbilities)
	fc.Result = res
	return ec.marshalNListPokemonAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_pokemonAbilitiesThroughFkPokemon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonAbilities_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonAbilities_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonAbilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Pokemon_pokemonAbilitiesThroughFkPokemon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_pokemonEvolutionMatchupThroughPokemonID(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_pokemonEvolutionMatchupThroughPokemonID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Pokemon().PokemonEvolutionMatchupThroughPokemonID(rctx, obj, fc.Args["filter"].(*table.PokemonEvolutionMatchupFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonEvolutionMatchup)
	fc.Result = res
	return ec.marshalNListPokemonEvolutionMatchup2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolutionMatchup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_pokemonEvolutionMatchupThroughPokemonID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonEvolutionMatchup_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonEvolutionMatchup_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonEvolutionMatchup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Pokemon_pokemonEvolutionMatchupThroughPokemonID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_pokemonTypesThroughPokemonID(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_pokemonTypesThroughPokemonID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Pokemon().PokemonTypesThroughPokemonID(rctx, obj, fc.Args["filter"].(*table.PokemonTypesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonTypes)
	fc.Result = res
	return ec.marshalNListPokemonTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_pokemonTypesThroughPokemonID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonTypes_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonTypes_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonTypes", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Pokemon_pokemonTypesThroughPokemonID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_iD(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_fkPokemon(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_fkPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkPokemon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_fkPokemon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_fkAbility(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_fkAbility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkAbility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_fkAbility(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_isHidden(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_isHidden(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHidden, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_isHidden(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_slot(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_slot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_slot(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_active(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_pokemonThroughFkPokemon(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_pokemonThroughFkPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PokemonAbilities().PokemonThroughFkPokemon(rctx, obj, fc.Args["filter"].(*table.PokemonFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Pokemon)
	fc.Result = res
	return ec.marshalOPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_pokemonThroughFkPokemon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Pokemon_iD(ctx, field)
			case "pokemonName":
				return ec.fieldContext_Pokemon_pokemonName(ctx, field)
			case "pokemonHeight":
				return ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
			case "pokemonWeight":
				return ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
			case "pokemonBaseExperience":
				return ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
			case "active":
				return ec.fieldContext_Pokemon_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Pokemon_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Pokemon_updatedAt(ctx, field)
			case "baseStatsThroughFkPokemon":
				return ec.fieldContext_Pokemon_baseStatsThroughFkPokemon(ctx, field)
			case "pokemonAbilitiesThroughFkPokemon":
				return ec.fieldContext_Pokemon_pokemonAbilitiesThroughFkPokemon(ctx, field)
			case "pokemonEvolutionMatchupThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonEvolutionMatchupThroughPokemonID(ctx, field)
			case "pokemonTypesThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonTypesThroughPokemonID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pokemon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PokemonAbilities_pokemonThroughFkPokemon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_abilitiesThroughFkAbility(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_abilitiesThroughFkAbility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PokemonAbilities().AbilitiesThroughFkAbility(rctx, obj, fc.Args["filter"].(*table.AbilitiesFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Abilities)
	fc.Result = res
	return ec.marshalOAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_abilitiesThroughFkAbility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Abilities_iD(ctx, field)
			case "abilityName":
				return ec.fieldContext_Abilities_abilityName(ctx, field)
			case "active":
				return ec.fieldContext_Abilities_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Abilities_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Abilities_updatedAt(ctx, field)
			case "pokemonAbilitiesThroughFkAbility":
				return ec.fieldContext_Abilities_pokemonAbilitiesThroughFkAbility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Abilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PokemonAbilities_abilitiesThroughFkAbility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolution_iD(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolution_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolution_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolution_evolvedSpeciesID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolution_evolvedSpeciesID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvolvedSpeciesID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolution_evolvedSpeciesID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolution_evolMinimumLevel(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolution_evolMinimumLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvolMinimumLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolution_evolMinimumLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolution_active(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolution_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolution_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolution_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolution_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolution_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolution_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolution_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolution_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolution_pokemonEvolutionMatchupThroughEvolvedSpeciesID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolution_pokemonEvolutionMatchupThroughEvolvedSpeciesID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PokemonEvolution().PokemonEvolutionMatchupThroughEvolvedSpeciesID(rctx, obj, fc.Args["filter"].(*table.PokemonEvolutionMatchupFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.PokemonEvolutionMatchup)
	fc.Result = res
	return ec.marshalOPokemonEvolutionMatchup2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolution_pokemonEvolutionMatchupThroughEvolvedSpeciesID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolution",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonEvolutionMatchup_iD(ctx, field)
			case "pokemonID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonID(ctx, field)
			case "evolvesFromSpeciesID":
				return ec.fieldContext_PokemonEvolutionMatchup_evolvesFromSpeciesID(ctx, field)
			case "habitat":
				return ec.fieldContext_PokemonEvolutionMatchup_habitat(ctx, field)
			case "genderRate":
				return ec.fieldContext_PokemonEvolutionMatchup_genderRate(ctx, field)
			case "captureRate":
				return ec.fieldContext_PokemonEvolutionMatchup_captureRate(ctx, field)
			case "baseHappiness":
				return ec.fieldContext_PokemonEvolutionMatchup_baseHappiness(ctx, field)
			case "active":
				return ec.fieldContext_PokemonEvolutionMatchup_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonEvolutionMatchup_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonEvolutionMatchup_updatedAt(ctx, field)
			case "pokemonThroughPokemonID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonThroughPokemonID(ctx, field)
			case "pokemonEvolutionThroughEvolvedSpeciesID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonEvolutionMatchup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PokemonEvolution_pokemonEvolutionMatchupThroughEvolvedSpeciesID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_iD(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_pokemonID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_pokemonID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PokemonID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_pokemonID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_evolvesFromSpeciesID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_evolvesFromSpeciesID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvolvesFromSpeciesID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_evolvesFromSpeciesID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_habitat(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_habitat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Habitat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*enum.PokemonEvolutionMatchupHabitat)
	fc.Result = res
	return ec.marshalOPokemonEvolutionMatchupHabitat2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋenumᚐPokemonEvolutionMatchupHabitat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_habitat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PokemonEvolutionMatchupHabitat does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_genderRate(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_genderRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GenderRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_genderRate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_captureRate(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_captureRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaptureRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_captureRate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_baseHappiness(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_baseHappiness(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseHappiness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_baseHappiness(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_active(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_pokemonThroughPokemonID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_pokemonThroughPokemonID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PokemonEvolutionMatchup().PokemonThroughPokemonID(rctx, obj, fc.Args["filter"].(*table.PokemonFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Pokemon)
	fc.Result = res
	return ec.marshalOPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_pokemonThroughPokemonID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Pokemon_iD(ctx, field)
			case "pokemonName":
				return ec.fieldContext_Pokemon_pokemonName(ctx, field)
			case "pokemonHeight":
				return ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
			case "pokemonWeight":
				return ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
			case "pokemonBaseExperience":
				return ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
			case "active":
				return ec.fieldContext_Pokemon_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Pokemon_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Pokemon_updatedAt(ctx, field)
			case "baseStatsThroughFkPokemon":
				return ec.fieldContext_Pokemon_baseStatsThroughFkPokemon(ctx, field)
			case "pokemonAbilitiesThroughFkPokemon":
				return ec.fieldContext_Pokemon_pokemonAbilitiesThroughFkPokemon(ctx, field)
			case "pokemonEvolutionMatchupThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonEvolutionMatchupThroughPokemonID(ctx, field)
			case "pokemonTypesThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonTypesThroughPokemonID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pokemon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PokemonEvolutionMatchup_pokemonThroughPokemonID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PokemonEvolutionMatchup().PokemonEvolutionThroughEvolvedSpeciesID(rctx, obj, fc.Args["filter"].(*table.PokemonEvolutionFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonEvolution)
	fc.Result = res
	return ec.marshalNListPokemonEvolution2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonEvolution_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonEvolution_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonEvolution", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_iD(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_pokemonID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_pokemonID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PokemonID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_pokemonID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_typeID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_typeID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_typeID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_slot(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_slot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_slot(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_active(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_pokemonThroughPokemonID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_pokemonThroughPokemonID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PokemonTypes().PokemonThroughPokemonID(rctx, obj, fc.Args["filter"].(*table.PokemonFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Pokemon)
	fc.Result = res
	return ec.marshalOPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_pokemonThroughPokemonID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Pokemon_iD(ctx, field)
			case "pokemonName":
				return ec.fieldContext_Pokemon_pokemonName(ctx, field)
			case "pokemonHeight":
				return ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
			case "pokemonWeight":
				return ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
			case "pokemonBaseExperience":
				return ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
			case "active":
				return ec.fieldContext_Pokemon_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Pokemon_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Pokemon_updatedAt(ctx, field)
			case "baseStatsThroughFkPokemon":
				return ec.fieldContext_Pokemon_baseStatsThroughFkPokemon(ctx, field)
			case "pokemonAbilitiesThroughFkPokemon":
				return ec.fieldContext_Pokemon_pokemonAbilitiesThroughFkPokemon(ctx, field)
			case "pokemonEvolutionMatchupThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonEvolutionMatchupThroughPokemonID(ctx, field)
			case "pokemonTypesThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonTypesThroughPokemonID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pokemon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PokemonTypes_pokemonThroughPokemonID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_typesThroughTypeID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_typesThroughTypeID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PokemonTypes().TypesThroughTypeID(rctx, obj, fc.Args["filter"].(*table.TypesFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Types)
	fc.Result = res
	return ec.marshalOTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_typesThroughTypeID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Types_iD(ctx, field)
			case "typeName":
				return ec.fieldContext_Types_typeName(ctx, field)
			case "active":
				return ec.fieldContext_Types_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Types_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Types_updatedAt(ctx, field)
			case "pokemonTypesThroughTypeID":
				return ec.fieldContext_Types_pokemonTypesThroughTypeID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Types", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PokemonTypes_typesThroughTypeID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllAbilities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findAllAbilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindAllAbilities(rctx, fc.Args["filter"].(*table.AbilitiesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListAbilities)
	fc.Result = res
	return ec.marshalNListAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findAllAbilities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListAbilities_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListAbilities_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListAbilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllAbilities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_abilitiesByAbilityName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_abilitiesByAbilityName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AbilitiesByAbilityName(rctx, fc.Args["abilityName"].(string), fc.Args["filter"].(*table.AbilitiesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.ListAbilities)
	fc.Result = res
	return ec.marshalOListAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_abilitiesByAbilityName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListAbilities_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListAbilities_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListAbilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_abilitiesByAbilityName_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_abilitiesByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_abilitiesByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AbilitiesByID(rctx, fc.Args["iD"].(int), fc.Args["filter"].(*table.AbilitiesFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Abilities)
	fc.Result = res
	return ec.marshalOAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_abilitiesByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Abilities_iD(ctx, field)
			case "abilityName":
				return ec.fieldContext_Abilities_abilityName(ctx, field)
			case "active":
				return ec.fieldContext_Abilities_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Abilities_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Abilities_updatedAt(ctx, field)
			case "pokemonAbilitiesThroughFkAbility":
				return ec.fieldContext_Abilities_pokemonAbilitiesThroughFkAbility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Abilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_abilitiesByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllBaseStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findAllBaseStats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindAllBaseStats(rctx, fc.Args["filter"].(*table.BaseStatsFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListBaseStats)
	fc.Result = res
	return ec.marshalNListBaseStats2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListBaseStats(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findAllBaseStats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListBaseStats_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListBaseStats_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListBaseStats", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllBaseStats_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_baseStatsByFkPokemon(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_baseStatsByFkPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BaseStatsByFkPokemon(rctx, fc.Args["fkPokemon"].(int), fc.Args["filter"].(*table.BaseStatsFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.ListBaseStats)
	fc.Result = res
	return ec.marshalOListBaseStats2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListBaseStats(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_baseStatsByFkPokemon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListBaseStats_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListBaseStats_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListBaseStats", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_baseStatsByFkPokemon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_baseStatsByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_baseStatsByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BaseStatsByID(rctx, fc.Args["iD"].(int), fc.Args["filter"].(*table.BaseStatsFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.BaseStats)
	fc.Result = res
	return ec.marshalOBaseStats2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStats(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_baseStatsByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_BaseStats_iD(ctx, field)
			case "fkPokemon":
				return ec.fieldContext_BaseStats_fkPokemon(ctx, field)
			case "bHp":
				return ec.fieldContext_BaseStats_bHp(ctx, field)
			case "bAtk":
				return ec.fieldContext_BaseStats_bAtk(ctx, field)
			case "bDef":
				return ec.fieldContext_BaseStats_bDef(ctx, field)
			case "bSpAtk":
				return ec.fieldContext_BaseStats_bSpAtk(ctx, field)
			case "bSpDef":
				return ec.fieldContext_BaseStats_bSpDef(ctx, field)
			case "bSpeed":
				return ec.fieldContext_BaseStats_bSpeed(ctx, field)
			case "active":
				return ec.fieldContext_BaseStats_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_BaseStats_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_BaseStats_updatedAt(ctx, field)
			case "pokemonThroughFkPokemon":
				return ec.fieldContext_BaseStats_pokemonThroughFkPokemon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BaseStats", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_baseStatsByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllPokemon(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findAllPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindAllPokemon(rctx, fc.Args["filter"].(*table.PokemonFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemon)
	fc.Result = res
	return ec.marshalNListPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findAllPokemon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemon_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemon_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllPokemon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pokemonByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pokemonByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PokemonByID(rctx, fc.Args["iD"].(int), fc.Args["filter"].(*table.PokemonFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Pokemon)
	fc.Result = res
	return ec.marshalOPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pokemonByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Pokemon_iD(ctx, field)
			case "pokemonName":
				return ec.fieldContext_Pokemon_pokemonName(ctx, field)
			case "pokemonHeight":
				return ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
			case "pokemonWeight":
				return ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
			case "pokemonBaseExperience":
				return ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
			case "active":
				return ec.fieldContext_Pokemon_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Pokemon_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Pokemon_updatedAt(ctx, field)
			case "baseStatsThroughFkPokemon":
				return ec.fieldContext_Pokemon_baseStatsThroughFkPokemon(ctx, field)
			case "pokemonAbilitiesThroughFkPokemon":
				return ec.fieldContext_Pokemon_pokemonAbilitiesThroughFkPokemon(ctx, field)
			case "pokemonEvolutionMatchupThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonEvolutionMatchupThroughPokemonID(ctx, field)
			case "pokemonTypesThroughPokemonID":
				return ec.fieldContext_Pokemon_pokemonTypesThroughPokemonID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pokemon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pokemonByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pokemonByPokemonName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pokemonByPokemonName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PokemonByPokemonName(rctx, fc.Args["pokemonName"].(string), fc.Args["filter"].(*table.PokemonFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemon)
	fc.Result = res
	return ec.marshalOListPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pokemonByPokemonName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemon_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemon_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pokemonByPokemonName_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllPokemonAbilities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findAllPokemonAbilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindAllPokemonAbilities(rctx, fc.Args["filter"].(*table.PokemonAbilitiesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonAbilities)
	fc.Result = res
	return ec.marshalNListPokemonAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findAllPokemonAbilities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonAbilities_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonAbilities_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonAbilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllPokemonAbilities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pokemonAbilitiesByFkPokemon(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pokemonAbilitiesByFkPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PokemonAbilitiesByFkPokemon(rctx, fc.Args["fkPokemon"].(int), fc.Args["filter"].(*table.PokemonAbilitiesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonAbilities)
	fc.Result = res
	return ec.marshalOListPokemonAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pokemonAbilitiesByFkPokemon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonAbilities_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonAbilities_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonAbilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pokemonAbilitiesByFkPokemon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pokemonAbilitiesByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pokemonAbilitiesByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PokemonAbilitiesByID(rctx, fc.Args["iD"].(int), fc.Args["filter"].(*table.PokemonAbilitiesFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.PokemonAbilities)
	fc.Result = res
	return ec.marshalOPokemonAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pokemonAbilitiesByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonAbilities_iD(ctx, field)
			case "fkPokemon":
				return ec.fieldContext_PokemonAbilities_fkPokemon(ctx, field)
			case "fkAbility":
				return ec.fieldContext_PokemonAbilities_fkAbility(ctx, field)
			case "isHidden":
				return ec.fieldContext_PokemonAbilities_isHidden(ctx, field)
			case "slot":
				return ec.fieldContext_PokemonAbilities_slot(ctx, field)
			case "active":
				return ec.fieldContext_PokemonAbilities_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonAbilities_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonAbilities_updatedAt(ctx, field)
			case "pokemonThroughFkPokemon":
				return ec.fieldContext_PokemonAbilities_pokemonThroughFkPokemon(ctx, field)
			case "abilitiesThroughFkAbility":
				return ec.fieldContext_PokemonAbilities_abilitiesThroughFkAbility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonAbilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pokemonAbilitiesByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pokemonAbilitiesByFkAbility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pokemonAbilitiesByFkAbility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PokemonAbilitiesByFkAbility(rctx, fc.Args["fkAbility"].(int), fc.Args["filter"].(*table.PokemonAbilitiesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonAbilities)
	fc.Result = res
	return ec.marshalOListPokemonAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pokemonAbilitiesByFkAbility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonAbilities_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonAbilities_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonAbilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pokemonAbilitiesByFkAbility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllPokemonEvolution(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findAllPokemonEvolution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindAllPokemonEvolution(rctx, fc.Args["filter"].(*table.PokemonEvolutionFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonEvolution)
	fc.Result = res
	return ec.marshalNListPokemonEvolution2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findAllPokemonEvolution(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonEvolution_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonEvolution_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonEvolution", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllPokemonEvolution_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pokemonEvolutionByEvolvedSpeciesID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pokemonEvolutionByEvolvedSpeciesID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PokemonEvolutionByEvolvedSpeciesID(rctx, fc.Args["evolvedSpeciesID"].(int), fc.Args["filter"].(*table.PokemonEvolutionFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonEvolution)
	fc.Result = res
	return ec.marshalOListPokemonEvolution2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pokemonEvolutionByEvolvedSpeciesID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonEvolution_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonEvolution_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonEvolution", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pokemonEvolutionByEvolvedSpeciesID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pokemonEvolutionByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pokemonEvolutionByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PokemonEvolutionByID(rctx, fc.Args["iD"].(int), fc.Args["filter"].(*table.PokemonEvolutionFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.PokemonEvolution)
	fc.Result = res
	return ec.marshalOPokemonEvolution2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pokemonEvolutionByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonEvolution_iD(ctx, field)
			case "evolvedSpeciesID":
				return ec.fieldContext_PokemonEvolution_evolvedSpeciesID(ctx, field)
			case "evolMinimumLevel":
				return ec.fieldContext_PokemonEvolution_evolMinimumLevel(ctx, field)
			case "active":
				return ec.fieldContext_PokemonEvolution_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonEvolution_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonEvolution_updatedAt(ctx, field)
			case "pokemonEvolutionMatchupThroughEvolvedSpeciesID":
				return ec.fieldContext_PokemonEvolution_pokemonEvolutionMatchupThroughEvolvedSpeciesID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonEvolution", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pokemonEvolutionByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllPokemonEvolutionMatchup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findAllPokemonEvolutionMatchup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindAllPokemonEvolutionMatchup(rctx, fc.Args["filter"].(*table.PokemonEvolutionMatchupFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonEvolutionMatchup)
	fc.Result = res
	return ec.marshalNListPokemonEvolutionMatchup2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolutionMatchup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findAllPokemonEvolutionMatchup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonEvolutionMatchup_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonEvolutionMatchup_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonEvolutionMatchup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllPokemonEvolutionMatchup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pokemonEvolutionMatchupByPokemonID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pokemonEvolutionMatchupByPokemonID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PokemonEvolutionMatchupByPokemonID(rctx, fc.Args["pokemonID"].(int), fc.Args["filter"].(*table.PokemonEvolutionMatchupFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonEvolutionMatchup)
	fc.Result = res
	return ec.marshalOListPokemonEvolutionMatchup2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolutionMatchup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pokemonEvolutionMatchupByPokemonID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonEvolutionMatchup_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonEvolutionMatchup_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonEvolutionMatchup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pokemonEvolutionMatchupByPokemonID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pokemonEvolutionMatchupByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pokemonEvolutionMatchupByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PokemonEvolutionMatchupByID(rctx, fc.Args["iD"].(int), fc.Args["filter"].(*table.PokemonEvolutionMatchupFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.PokemonEvolutionMatchup)
	fc.Result = res
	return ec.marshalOPokemonEvolutionMatchup2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pokemonEvolutionMatchupByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonEvolutionMatchup_iD(ctx, field)
			case "pokemonID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonID(ctx, field)
			case "evolvesFromSpeciesID":
				return ec.fieldContext_PokemonEvolutionMatchup_evolvesFromSpeciesID(ctx, field)
			case "habitat":
				return ec.fieldContext_PokemonEvolutionMatchup_habitat(ctx, field)
			case "genderRate":
				return ec.fieldContext_PokemonEvolutionMatchup_genderRate(ctx, field)
			case "captureRate":
				return ec.fieldContext_PokemonEvolutionMatchup_captureRate(ctx, field)
			case "baseHappiness":
				return ec.fieldContext_PokemonEvolutionMatchup_baseHappiness(ctx, field)
			case "active":
				return ec.fieldContext_PokemonEvolutionMatchup_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonEvolutionMatchup_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonEvolutionMatchup_updatedAt(ctx, field)
			case "pokemonThroughPokemonID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonThroughPokemonID(ctx, field)
			case "pokemonEvolutionThroughEvolvedSpeciesID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonEvolutionMatchup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pokemonEvolutionMatchupByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllPokemonTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findAllPokemonTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindAllPokemonTypes(rctx, fc.Args["filter"].(*table.PokemonTypesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonTypes)
	fc.Result = res
	return ec.marshalNListPokemonTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findAllPokemonTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonTypes_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonTypes_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonTypes", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllPokemonTypes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pokemonTypesByPokemonID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pokemonTypesByPokemonID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PokemonTypesByPokemonID(rctx, fc.Args["pokemonID"].(int), fc.Args["filter"].(*table.PokemonTypesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonTypes)
	fc.Result = res
	return ec.marshalOListPokemonTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pokemonTypesByPokemonID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonTypes_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonTypes_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonTypes", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pokemonTypesByPokemonID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pokemonTypesByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pokemonTypesByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PokemonTypesByID(rctx, fc.Args["iD"].(int), fc.Args["filter"].(*table.PokemonTypesFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.PokemonTypes)
	fc.Result = res
	return ec.marshalOPokemonTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pokemonTypesByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonTypes_iD(ctx, field)
			case "pokemonID":
				return ec.fieldContext_PokemonTypes_pokemonID(ctx, field)
			case "typeID":
				return ec.fieldContext_PokemonTypes_typeID(ctx, field)
			case "slot":
				return ec.fieldContext_PokemonTypes_slot(ctx, field)
			case "active":
				return ec.fieldContext_PokemonTypes_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonTypes_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonTypes_updatedAt(ctx, field)
			case "pokemonThroughPokemonID":
				return ec.fieldContext_PokemonTypes_pokemonThroughPokemonID(ctx, field)
			case "typesThroughTypeID":
				return ec.fieldContext_PokemonTypes_typesThroughTypeID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonTypes", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pokemonTypesByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pokemonTypesByTypeID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pokemonTypesByTypeID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PokemonTypesByTypeID(rctx, fc.Args["typeID"].(int), fc.Args["filter"].(*table.PokemonTypesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonTypes)
	fc.Result = res
	return ec.marshalOListPokemonTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pokemonTypesByTypeID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonTypes_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonTypes_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonTypes", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pokemonTypesByTypeID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findAllTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindAllTypes(rctx, fc.Args["filter"].(*table.TypesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListTypes)
	fc.Result = res
	return ec.marshalNListTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findAllTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListTypes_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListTypes_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListTypes", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllTypes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_typesByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_typesByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TypesByID(rctx, fc.Args["iD"].(int), fc.Args["filter"].(*table.TypesFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Types)
	fc.Result = res
	return ec.marshalOTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_typesByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Types_iD(ctx, field)
			case "typeName":
				return ec.fieldContext_Types_typeName(ctx, field)
			case "active":
				return ec.fieldContext_Types_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Types_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Types_updatedAt(ctx, field)
			case "pokemonTypesThroughTypeID":
				return ec.fieldContext_Types_pokemonTypesThroughTypeID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Types", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_typesByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Types_iD(ctx context.Context, field graphql.CollectedField, obj *table.Types) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Types_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Types_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Types",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Types_typeName(ctx context.Context, field graphql.CollectedField, obj *table.Types) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Types_typeName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Types_typeName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Types",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Types_active(ctx context.Context, field graphql.CollectedField, obj *table.Types) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Types_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Types_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Types",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Types_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.Types) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Types_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Types_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Types",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Types_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.Types) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Types_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Types_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Types",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Types_pokemonTypesThroughTypeID(ctx context.Context, field graphql.CollectedField, obj *table.Types) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Types_pokemonTypesThroughTypeID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Types().PokemonTypesThroughTypeID(rctx, obj, fc.Args["filter"].(*table.PokemonTypesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonTypes)
	fc.Result = res
	return ec.marshalNListPokemonTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Types_pokemonTypesThroughTypeID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Types",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonTypes_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonTypes_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonTypes", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Types_pokemonTypesThroughTypeID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_isOneOf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOneOf(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAbilitiesCreate(ctx context.Context, obj any) (table.AbilitiesCreate, error) {
	var it table.AbilitiesCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"abilityName"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "abilityName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abilityName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AbilityName = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAbilitiesFilter(ctx context.Context, obj any) (table.AbilitiesFilter, error) {
	var it table.AbilitiesFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "abilityName", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "abilityName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abilityName"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.AbilityName = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAbilitiesUpdate(ctx context.Context, obj any) (table.AbilitiesUpdate, error) {
	var it table.AbilitiesUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"abilityName", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "abilityName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abilityName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AbilityName = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBaseStatsCreate(ctx context.Context, obj any) (table.BaseStatsCreate, error) {
	var it table.BaseStatsCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"fkPokemon", "bHp", "bAtk", "bDef", "bSpAtk", "bSpDef", "bSpeed"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "fkPokemon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkPokemon"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkPokemon = data
		case "bHp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bHp"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BHp = data
		case "bAtk":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bAtk"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BAtk = data
		case "bDef":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bDef"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BDef = data
		case "bSpAtk":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpAtk"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpAtk = data
		case "bSpDef":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpDef"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpDef = data
		case "bSpeed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpeed"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpeed = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBaseStatsFilter(ctx context.Context, obj any) (table.BaseStatsFilter, error) {
	var it table.BaseStatsFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "fkPokemon", "bHp", "bAtk", "bDef", "bSpAtk", "bSpDef", "bSpeed", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "fkPokemon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkPokemon"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkPokemon = data
		case "bHp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bHp"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.BHp = data
		case "bAtk":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bAtk"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.BAtk = data
		case "bDef":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bDef"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.BDef = data
		case "bSpAtk":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpAtk"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpAtk = data
		case "bSpDef":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpDef"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpDef = data
		case "bSpeed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpeed"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpeed = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBaseStatsUpdate(ctx context.Context, obj any) (table.BaseStatsUpdate, error) {
	var it table.BaseStatsUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"fkPokemon", "bHp", "bAtk", "bDef", "bSpAtk", "bSpDef", "bSpeed", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "fkPokemon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkPokemon"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkPokemon = data
		case "bHp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bHp"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BHp = data
		case "bAtk":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bAtk"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BAtk = data
		case "bDef":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bDef"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BDef = data
		case "bSpAtk":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpAtk"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpAtk = data
		case "bSpDef":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpDef"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpDef = data
		case "bSpeed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpeed"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpeed = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPagination(ctx context.Context, obj any) (internal.Pagination, error) {
	var it internal.Pagination
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "perPage", "sort"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "perPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PerPage = data
		case "sort":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sort = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonAbilitiesCreate(ctx context.Context, obj any) (table.PokemonAbilitiesCreate, error) {
	var it table.PokemonAbilitiesCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"fkPokemon", "fkAbility", "isHidden", "slot"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "fkPokemon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkPokemon"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkPokemon = data
		case "fkAbility":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkAbility"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkAbility = data
		case "isHidden":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isHidden"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsHidden = data
		case "slot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slot"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slot = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonAbilitiesFilter(ctx context.Context, obj any) (table.PokemonAbilitiesFilter, error) {
	var it table.PokemonAbilitiesFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "fkPokemon", "fkAbility", "isHidden", "slot", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "fkPokemon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkPokemon"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkPokemon = data
		case "fkAbility":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkAbility"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkAbility = data
		case "isHidden":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isHidden"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsHidden = data
		case "slot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slot"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slot = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonAbilitiesUpdate(ctx context.Context, obj any) (table.PokemonAbilitiesUpdate, error) {
	var it table.PokemonAbilitiesUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"fkPokemon", "fkAbility", "isHidden", "slot", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "fkPokemon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkPokemon"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkPokemon = data
		case "fkAbility":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkAbility"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkAbility = data
		case "isHidden":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isHidden"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsHidden = data
		case "slot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slot"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slot = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonCreate(ctx context.Context, obj any) (table.PokemonCreate, error) {
	var it table.PokemonCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pokemonName", "pokemonHeight", "pokemonWeight", "pokemonBaseExperience"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pokemonName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonName = data
		case "pokemonHeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonHeight"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonHeight = data
		case "pokemonWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonWeight"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonWeight = data
		case "pokemonBaseExperience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonBaseExperience"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonBaseExperience = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonEvolutionCreate(ctx context.Context, obj any) (table.PokemonEvolutionCreate, error) {
	var it table.PokemonEvolutionCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"evolvedSpeciesID", "evolMinimumLevel"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "evolvedSpeciesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolvedSpeciesID"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolvedSpeciesID = data
		case "evolMinimumLevel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolMinimumLevel"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolMinimumLevel = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonEvolutionFilter(ctx context.Context, obj any) (table.PokemonEvolutionFilter, error) {
	var it table.PokemonEvolutionFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "evolvedSpeciesID", "evolMinimumLevel", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "evolvedSpeciesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolvedSpeciesID"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolvedSpeciesID = data
		case "evolMinimumLevel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolMinimumLevel"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolMinimumLevel = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonEvolutionMatchupCreate(ctx context.Context, obj any) (table.PokemonEvolutionMatchupCreate, error) {
	var it table.PokemonEvolutionMatchupCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pokemonID", "evolvesFromSpeciesID", "habitat", "genderRate", "captureRate", "baseHappiness"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pokemonID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonID"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonID = data
		case "evolvesFromSpeciesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolvesFromSpeciesID"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolvesFromSpeciesID = data
		case "habitat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("habitat"))
			data, err := ec.unmarshalOPokemonEvolutionMatchupHabitat2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋenumᚐPokemonEvolutionMatchupHabitat(ctx, v)
			if err != nil {
				return it, err
			}
			it.Habitat = data
		case "genderRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderRate"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderRate = data
		case "captureRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("captureRate"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.CaptureRate = data
		case "baseHappiness":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseHappiness"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseHappiness = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonEvolutionMatchupFilter(ctx context.Context, obj any) (table.PokemonEvolutionMatchupFilter, error) {
	var it table.PokemonEvolutionMatchupFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "pokemonID", "evolvesFromSpeciesID", "habitat", "genderRate", "captureRate", "baseHappiness", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "pokemonID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonID"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonID = data
		case "evolvesFromSpeciesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolvesFromSpeciesID"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolvesFromSpeciesID = data
		case "habitat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("habitat"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Habitat = data
		case "genderRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderRate"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderRate = data
		case "captureRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("captureRate"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CaptureRate = data
		case "baseHappiness":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseHappiness"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseHappiness = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonEvolutionMatchupUpdate(ctx context.Context, obj any) (table.PokemonEvolutionMatchupUpdate, error) {
	var it table.PokemonEvolutionMatchupUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pokemonID", "evolvesFromSpeciesID", "habitat", "genderRate", "captureRate", "baseHappiness", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pokemonID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonID = data
		case "evolvesFromSpeciesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolvesFromSpeciesID"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolvesFromSpeciesID = data
		case "habitat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("habitat"))
			data, err := ec.unmarshalOPokemonEvolutionMatchupHabitat2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋenumᚐPokemonEvolutionMatchupHabitat(ctx, v)
			if err != nil {
				return it, err
			}
			it.Habitat = data
		case "genderRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderRate"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderRate = data
		case "captureRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("captureRate"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CaptureRate = data
		case "baseHappiness":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseHappiness"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseHappiness = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonEvolutionUpdate(ctx context.Context, obj any) (table.PokemonEvolutionUpdate, error) {
	var it table.PokemonEvolutionUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"evolvedSpeciesID", "evolMinimumLevel", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "evolvedSpeciesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolvedSpeciesID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolvedSpeciesID = data
		case "evolMinimumLevel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolMinimumLevel"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolMinimumLevel = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonFilter(ctx context.Context, obj any) (table.PokemonFilter, error) {
	var it table.PokemonFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "pokemonName", "pokemonHeight", "pokemonWeight", "pokemonBaseExperience", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "pokemonName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonName"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonName = data
		case "pokemonHeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonHeight"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonHeight = data
		case "pokemonWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonWeight"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonWeight = data
		case "pokemonBaseExperience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonBaseExperience"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonBaseExperience = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonTypesCreate(ctx context.Context, obj any) (table.PokemonTypesCreate, error) {
	var it table.PokemonTypesCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pokemonID", "typeID", "slot"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pokemonID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonID"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonID = data
		case "typeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeID"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeID = data
		case "slot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slot"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slot = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonTypesFilter(ctx context.Context, obj any) (table.PokemonTypesFilter, error) {
	var it table.PokemonTypesFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "pokemonID", "typeID", "slot", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "pokemonID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonID"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonID = data
		case "typeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeID"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeID = data
		case "slot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slot"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slot = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonTypesUpdate(ctx context.Context, obj any) (table.PokemonTypesUpdate, error) {
	var it table.PokemonTypesUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pokemonID", "typeID", "slot", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pokemonID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonID = data
		case "typeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeID = data
		case "slot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slot"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slot = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonUpdate(ctx context.Context, obj any) (table.PokemonUpdate, error) {
	var it table.PokemonUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pokemonName", "pokemonHeight", "pokemonWeight", "pokemonBaseExperience", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pokemonName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonName = data
		case "pokemonHeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonHeight"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonHeight = data
		case "pokemonWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonWeight"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonWeight = data
		case "pokemonBaseExperience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonBaseExperience"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonBaseExperience = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTypesCreate(ctx context.Context, obj any) (table.TypesCreate, error) {
	var it table.TypesCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"typeName"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "typeName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeName = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTypesFilter(ctx context.Context, obj any) (table.TypesFilter, error) {
	var it table.TypesFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "typeName", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "typeName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeName"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeName = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTypesUpdate(ctx context.Context, obj any) (table.TypesUpdate, error) {
	var it table.TypesUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"typeName", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "typeName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeName = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var abilitiesImplementors = []string{"Abilities"}

func (ec *executionContext) _Abilities(ctx context.Context, sel ast.SelectionSet, obj *table.Abilities) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, abilitiesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Abilities")
		case "iD":
			out.Values[i] = ec._Abilities_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "abilityName":
			out.Values[i] = ec._Abilities_abilityName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "active":
			out.Values[i] = ec._Abilities_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Abilities_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Abilities_updatedAt(ctx, field, obj)
		case "pokemonAbilitiesThroughFkAbility":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Abilities_pokemonAbilitiesThroughFkAbility(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var baseStatsImplementors = []string{"BaseStats"}

func (ec *executionContext) _BaseStats(ctx context.Context, sel ast.SelectionSet, obj *table.BaseStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, baseStatsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BaseStats")
		case "iD":
			out.Values[i] = ec._BaseStats_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "fkPokemon":
			out.Values[i] = ec._BaseStats_fkPokemon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "bHp":
			out.Values[i] = ec._BaseStats_bHp(ctx, field, obj)
		case "bAtk":
			out.Values[i] = ec._BaseStats_bAtk(ctx, field, obj)
		case "bDef":
			out.Values[i] = ec._BaseStats_bDef(ctx, field, obj)
		case "bSpAtk":
			out.Values[i] = ec._BaseStats_bSpAtk(ctx, field, obj)
		case "bSpDef":
			out.Values[i] = ec._BaseStats_bSpDef(ctx, field, obj)
		case "bSpeed":
			out.Values[i] = ec._BaseStats_bSpeed(ctx, field, obj)
		case "active":
			out.Values[i] = ec._BaseStats_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._BaseStats_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BaseStats_updatedAt(ctx, field, obj)
		case "pokemonThroughFkPokemon":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BaseStats_pokemonThroughFkPokemon(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listAbilitiesImplementors = []string{"ListAbilities"}

func (ec *executionContext) _ListAbilities(ctx context.Context, sel ast.SelectionSet, obj *table.ListAbilities) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listAbilitiesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListAbilities")
		case "totalCount":
			out.Values[i] = ec._ListAbilities_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListAbilities_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listBaseStatsImplementors = []string{"ListBaseStats"}

func (ec *executionContext) _ListBaseStats(ctx context.Context, sel ast.SelectionSet, obj *table.ListBaseStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listBaseStatsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListBaseStats")
		case "totalCount":
			out.Values[i] = ec._ListBaseStats_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListBaseStats_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listPokemonImplementors = []string{"ListPokemon"}

func (ec *executionContext) _ListPokemon(ctx context.Context, sel ast.SelectionSet, obj *table.ListPokemon) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listPokemonImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListPokemon")
		case "totalCount":
			out.Values[i] = ec._ListPokemon_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListPokemon_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listPokemonAbilitiesImplementors = []string{"ListPokemonAbilities"}

func (ec *executionContext) _ListPokemonAbilities(ctx context.Context, sel ast.SelectionSet, obj *table.ListPokemonAbilities) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listPokemonAbilitiesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListPokemonAbilities")
		case "totalCount":
			out.Values[i] = ec._ListPokemonAbilities_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListPokemonAbilities_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listPokemonEvolutionImplementors = []string{"ListPokemonEvolution"}

func (ec *executionContext) _ListPokemonEvolution(ctx context.Context, sel ast.SelectionSet, obj *table.ListPokemonEvolution) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listPokemonEvolutionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListPokemonEvolution")
		case "totalCount":
			out.Values[i] = ec._ListPokemonEvolution_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListPokemonEvolution_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listPokemonEvolutionMatchupImplementors = []string{"ListPokemonEvolutionMatchup"}

func (ec *executionContext) _ListPokemonEvolutionMatchup(ctx context.Context, sel ast.SelectionSet, obj *table.ListPokemonEvolutionMatchup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listPokemonEvolutionMatchupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListPokemonEvolutionMatchup")
		case "totalCount":
			out.Values[i] = ec._ListPokemonEvolutionMatchup_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListPokemonEvolutionMatchup_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listPokemonTypesImplementors = []string{"ListPokemonTypes"}

func (ec *executionContext) _ListPokemonTypes(ctx context.Context, sel ast.SelectionSet, obj *table.ListPokemonTypes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listPokemonTypesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListPokemonTypes")
		case "totalCount":
			out.Values[i] = ec._ListPokemonTypes_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListPokemonTypes_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listTypesImplementors = []string{"ListTypes"}

func (ec *executionContext) _ListTypes(ctx context.Context, sel ast.SelectionSet, obj *table.ListTypes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listTypesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListTypes")
		case "totalCount":
			out.Values[i] = ec._ListTypes_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListTypes_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "insertAbilities":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_insertAbilities(ctx, field)
			})
		case "updateAbilitiesByFields":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAbilitiesByFields(ctx, field)
			})
		case "deleteAbilitiesByID":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAbilitiesByID(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "insertBaseStats":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_insertBaseStats(ctx, field)
			})
		case "updateBaseStatsByFields":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateBaseStatsByFields(ctx, field)
			})
		case "deleteBaseStatsByID":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteBaseStatsByID(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "insertPokemon":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_insertPokemon(ctx, field)
			})
		case "updatePokemonByFields":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePokemonByFields(ctx, field)
			})
		case "deletePokemonByID":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePokemonByID(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "insertPokemonAbilities":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_insertPokemonAbilities(ctx, field)
			})
		case "updatePokemonAbilitiesByFields":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePokemonAbilitiesByFields(ctx, field)
			})
		case "deletePokemonAbilitiesByID":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePokemonAbilitiesByID(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "insertPokemonEvolution":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_insertPokemonEvolution(ctx, field)
			})
		case "updatePokemonEvolutionByFields":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePokemonEvolutionByFields(ctx, field)
			})
		case "deletePokemonEvolutionByID":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePokemonEvolutionByID(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "insertPokemonEvolutionMatchup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_insertPokemonEvolutionMatchup(ctx, field)
			})
		case "updatePokemonEvolutionMatchupByFields":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePokemonEvolutionMatchupByFields(ctx, field)
			})
		case "deletePokemonEvolutionMatchupByID":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePokemonEvolutionMatchupByID(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "insertPokemonTypes":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_insertPokemonTypes(ctx, field)
			})
		case "updatePokemonTypesByFields":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePokemonTypesByFields(ctx, field)
			})
		case "deletePokemonTypesByID":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePokemonTypesByID(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "insertTypes":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_insertTypes(ctx, field)
			})
		case "updateTypesByFields":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTypesByFields(ctx, field)
			})
		case "deleteTypesByID":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTypesByID(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pokemonImplementors = []string{"Pokemon"}

func (ec *executionContext) _Pokemon(ctx context.Context, sel ast.SelectionSet, obj *table.Pokemon) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pokemonImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Pokemon")
		case "iD":
			out.Values[i] = ec._Pokemon_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "pokemonName":
			out.Values[i] = ec._Pokemon_pokemonName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "pokemonHeight":
			out.Values[i] = ec._Pokemon_pokemonHeight(ctx, field, obj)
		case "pokemonWeight":
			out.Values[i] = ec._Pokemon_pokemonWeight(ctx, field, obj)
		case "pokemonBaseExperience":
			out.Values[i] = ec._Pokemon_pokemonBaseExperience(ctx, field, obj)
		case "active":
			out.Values[i] = ec._Pokemon_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Pokemon_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Pokemon_updatedAt(ctx, field, obj)
		case "baseStatsThroughFkPokemon":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Pokemon_baseStatsThroughFkPokemon(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "pokemonAbilitiesThroughFkPokemon":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Pokemon_pokemonAbilitiesThroughFkPokemon(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "pokemonEvolutionMatchupThroughPokemonID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Pokemon_pokemonEvolutionMatchupThroughPokemonID(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "pokemonTypesThroughPokemonID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Pokemon_pokemonTypesThroughPokemonID(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pokemonAbilitiesImplementors = []string{"PokemonAbilities"}

func (ec *executionContext) _PokemonAbilities(ctx context.Context, sel ast.SelectionSet, obj *table.PokemonAbilities) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pokemonAbilitiesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PokemonAbilities")
		case "iD":
			out.Values[i] = ec._PokemonAbilities_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "fkPokemon":
			out.Values[i] = ec._PokemonAbilities_fkPokemon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "fkAbility":
			out.Values[i] = ec._PokemonAbilities_fkAbility(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isHidden":
			out.Values[i] = ec._PokemonAbilities_isHidden(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "slot":
			out.Values[i] = ec._PokemonAbilities_slot(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "active":
			out.Values[i] = ec._PokemonAbilities_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._PokemonAbilities_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._PokemonAbilities_updatedAt(ctx, field, obj)
		case "pokemonThroughFkPokemon":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PokemonAbilities_pokemonThroughFkPokemon(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "abilitiesThroughFkAbility":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PokemonAbilities_abilitiesThroughFkAbility(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pokemonEvolutionImplementors = []string{"PokemonEvolution"}

func (ec *executionContext) _PokemonEvolution(ctx context.Context, sel ast.SelectionSet, obj *table.PokemonEvolution) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pokemonEvolutionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PokemonEvolution")
		case "iD":
			out.Values[i] = ec._PokemonEvolution_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "evolvedSpeciesID":
			out.Values[i] = ec._PokemonEvolution_evolvedSpeciesID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "evolMinimumLevel":
			out.Values[i] = ec._PokemonEvolution_evolMinimumLevel(ctx, field, obj)
		case "active":
			out.Values[i] = ec._PokemonEvolution_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._PokemonEvolution_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._PokemonEvolution_updatedAt(ctx, field, obj)
		case "pokemonEvolutionMatchupThroughEvolvedSpeciesID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PokemonEvolution_pokemonEvolutionMatchupThroughEvolvedSpeciesID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pokemonEvolutionMatchupImplementors = []string{"PokemonEvolutionMatchup"}

func (ec *executionContext) _PokemonEvolutionMatchup(ctx context.Context, sel ast.SelectionSet, obj *table.PokemonEvolutionMatchup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pokemonEvolutionMatchupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PokemonEvolutionMatchup")
		case "iD":
			out.Values[i] = ec._PokemonEvolutionMatchup_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "pokemonID":
			out.Values[i] = ec._PokemonEvolutionMatchup_pokemonID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "evolvesFromSpeciesID":
			out.Values[i] = ec._PokemonEvolutionMatchup_evolvesFromSpeciesID(ctx, field, obj)
		case "habitat":
			out.Values[i] = ec._PokemonEvolutionMatchup_habitat(ctx, field, obj)
		case "genderRate":
			out.Values[i] = ec._PokemonEvolutionMatchup_genderRate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "captureRate":
			out.Values[i] = ec._PokemonEvolutionMatchup_captureRate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "baseHappiness":
			out.Values[i] = ec._PokemonEvolutionMatchup_baseHappiness(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "active":
			out.Values[i] = ec._PokemonEvolutionMatchup_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._PokemonEvolutionMatchup_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._PokemonEvolutionMatchup_updatedAt(ctx, field, obj)
		case "pokemonThroughPokemonID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PokemonEvolutionMatchup_pokemonThroughPokemonID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "pokemonEvolutionThroughEvolvedSpeciesID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PokemonEvolutionMatchup_pokemonEvolutionThroughEvolvedSpeciesID(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pokemonTypesImplementors = []string{"PokemonTypes"}

func (ec *executionContext) _PokemonTypes(ctx context.Context, sel ast.SelectionSet, obj *table.PokemonTypes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pokemonTypesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PokemonTypes")
		case "iD":
			out.Values[i] = ec._PokemonTypes_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "pokemonID":
			out.Values[i] = ec._PokemonTypes_pokemonID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeID":
			out.Values[i] = ec._PokemonTypes_typeID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "slot":
			out.Values[i] = ec._PokemonTypes_slot(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "active":
			out.Values[i] = ec._PokemonTypes_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._PokemonTypes_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._PokemonTypes_updatedAt(ctx, field, obj)
		case "pokemonThroughPokemonID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PokemonTypes_pokemonThroughPokemonID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "typesThroughTypeID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PokemonTypes_typesThroughTypeID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "findAllAbilities":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllAbilities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "abilitiesByAbilityName":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_abilitiesByAbilityName(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "abilitiesByID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_abilitiesByID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllBaseStats":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllBaseStats(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "baseStatsByFkPokemon":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_baseStatsByFkPokemon(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "baseStatsByID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_baseStatsByID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllPokemon":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllPokemon(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pokemonByID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pokemonByID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pokemonByPokemonName":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pokemonByPokemonName(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllPokemonAbilities":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllPokemonAbilities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pokemonAbilitiesByFkPokemon":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pokemonAbilitiesByFkPokemon(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pokemonAbilitiesByID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pokemonAbilitiesByID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pokemonAbilitiesByFkAbility":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pokemonAbilitiesByFkAbility(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllPokemonEvolution":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllPokemonEvolution(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pokemonEvolutionByEvolvedSpeciesID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pokemonEvolutionByEvolvedSpeciesID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pokemonEvolutionByID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pokemonEvolutionByID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllPokemonEvolutionMatchup":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllPokemonEvolutionMatchup(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pokemonEvolutionMatchupByPokemonID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pokemonEvolutionMatchupByPokemonID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pokemonEvolutionMatchupByID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pokemonEvolutionMatchupByID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllPokemonTypes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllPokemonTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pokemonTypesByPokemonID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pokemonTypesByPokemonID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pokemonTypesByID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pokemonTypesByID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pokemonTypesByTypeID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pokemonTypesByTypeID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllTypes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "typesByID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_typesByID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var typesImplementors = []string{"Types"}

func (ec *executionContext) _Types(ctx context.Context, sel ast.SelectionSet, obj *table.Types) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, typesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Types")
		case "iD":
			out.Values[i] = ec._Types_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeName":
			out.Values[i] = ec._Types_typeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "active":
			out.Values[i] = ec._Types_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Types_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Types_updatedAt(ctx, field, obj)
		case "pokemonTypesThroughTypeID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Types_pokemonTypesThroughTypeID(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAbilities2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilities(ctx context.Context, sel ast.SelectionSet, v table.Abilities) graphql.Marshaler {
	return ec._Abilities(ctx, sel, &v)
}

func (ec *executionContext) marshalNAbilities2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesᚄ(ctx context.Context, sel ast.SelectionSet, v []table.Abilities) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAbilities2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilities(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNAbilitiesCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesCreate(ctx context.Context, v any) (table.AbilitiesCreate, error) {
	res, err := ec.unmarshalInputAbilitiesCreate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAbilitiesUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesUpdate(ctx context.Context, v any) (table.AbilitiesUpdate, error) {
	res, err := ec.unmarshalInputAbilitiesUpdate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBaseStats2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStats(ctx context.Context, sel ast.SelectionSet, v table.BaseStats) graphql.Marshaler {
	return ec._BaseStats(ctx, sel, &v)
}

func (ec *executionContext) marshalNBaseStats2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsᚄ(ctx context.Context, sel ast.SelectionSet, v []table.BaseStats) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBaseStats2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStats(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNBaseStatsCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsCreate(ctx context.Context, v any) (table.BaseStatsCreate, error) {
	res, err := ec.unmarshalInputBaseStatsCreate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBaseStatsUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsUpdate(ctx context.Context, v any) (table.BaseStatsUpdate, error) {
	res, err := ec.unmarshalInputBaseStatsUpdate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNListAbilities2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListAbilities(ctx context.Context, sel ast.SelectionSet, v table.ListAbilities) graphql.Marshaler {
	return ec._ListAbilities(ctx, sel, &v)
}

func (ec *executionContext) marshalNListAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListAbilities(ctx context.Context, sel ast.SelectionSet, v *table.ListAbilities) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListAbilities(ctx, sel, v)
}

func (ec *executionContext) marshalNListBaseStats2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListBaseStats(ctx context.Context, sel ast.SelectionSet, v table.ListBaseStats) graphql.Marshaler {
	return ec._ListBaseStats(ctx, sel, &v)
}

func (ec *executionContext) marshalNListBaseStats2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListBaseStats(ctx context.Context, sel ast.SelectionSet, v *table.ListBaseStats) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListBaseStats(ctx, sel, v)
}

func (ec *executionContext) marshalNListPokemon2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemon(ctx context.Context, sel ast.SelectionSet, v table.ListPokemon) graphql.Marshaler {
	return ec._ListPokemon(ctx, sel, &v)
}

func (ec *executionContext) marshalNListPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemon(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemon) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListPokemon(ctx, sel, v)
}

func (ec *executionContext) marshalNListPokemonAbilities2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonAbilities(ctx context.Context, sel ast.SelectionSet, v table.ListPokemonAbilities) graphql.Marshaler {
	return ec._ListPokemonAbilities(ctx, sel, &v)
}

func (ec *executionContext) marshalNListPokemonAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonAbilities(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemonAbilities) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListPokemonAbilities(ctx, sel, v)
}

func (ec *executionContext) marshalNListPokemonEvolution2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolution(ctx context.Context, sel ast.SelectionSet, v table.ListPokemonEvolution) graphql.Marshaler {
	return ec._ListPokemonEvolution(ctx, sel, &v)
}

func (ec *executionContext) marshalNListPokemonEvolution2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolution(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemonEvolution) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListPokemonEvolution(ctx, sel, v)
}

func (ec *executionContext) marshalNListPokemonEvolutionMatchup2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolutionMatchup(ctx context.Context, sel ast.SelectionSet, v table.ListPokemonEvolutionMatchup) graphql.Marshaler {
	return ec._ListPokemonEvolutionMatchup(ctx, sel, &v)
}

func (ec *executionContext) marshalNListPokemonEvolutionMatchup2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolutionMatchup(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemonEvolutionMatchup) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListPokemonEvolutionMatchup(ctx, sel, v)
}

func (ec *executionContext) marshalNListPokemonTypes2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonTypes(ctx context.Context, sel ast.SelectionSet, v table.ListPokemonTypes) graphql.Marshaler {
	return ec._ListPokemonTypes(ctx, sel, &v)
}

func (ec *executionContext) marshalNListPokemonTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonTypes(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemonTypes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListPokemonTypes(ctx, sel, v)
}

func (ec *executionContext) marshalNListTypes2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListTypes(ctx context.Context, sel ast.SelectionSet, v table.ListTypes) graphql.Marshaler {
	return ec._ListTypes(ctx, sel, &v)
}

func (ec *executionContext) marshalNListTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListTypes(ctx context.Context, sel ast.SelectionSet, v *table.ListTypes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListTypes(ctx, sel, v)
}

func (ec *executionContext) marshalNPokemon2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx context.Context, sel ast.SelectionSet, v table.Pokemon) graphql.Marshaler {
	return ec._Pokemon(ctx, sel, &v)
}

func (ec *executionContext) marshalNPokemon2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonᚄ(ctx context.Context, sel ast.SelectionSet, v []table.Pokemon) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPokemon2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPokemonAbilities2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilities(ctx context.Context, sel ast.SelectionSet, v table.PokemonAbilities) graphql.Marshaler {
	return ec._PokemonAbilities(ctx, sel, &v)
}

func (ec *executionContext) marshalNPokemonAbilities2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesᚄ(ctx context.Context, sel ast.SelectionSet, v []table.PokemonAbilities) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPokemonAbilities2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilities(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPokemonAbilitiesCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesCreate(ctx context.Context, v any) (table.PokemonAbilitiesCreate, error) {
	res, err := ec.unmarshalInputPokemonAbilitiesCreate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPokemonAbilitiesUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesUpdate(ctx context.Context, v any) (table.PokemonAbilitiesUpdate, error) {
	res, err := ec.unmarshalInputPokemonAbilitiesUpdate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPokemonCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonCreate(ctx context.Context, v any) (table.PokemonCreate, error) {
	res, err := ec.unmarshalInputPokemonCreate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPokemonEvolution2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolution(ctx context.Context, sel ast.SelectionSet, v table.PokemonEvolution) graphql.Marshaler {
	return ec._PokemonEvolution(ctx, sel, &v)
}

func (ec *executionContext) marshalNPokemonEvolution2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionᚄ(ctx context.Context, sel ast.SelectionSet, v []table.PokemonEvolution) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPokemonEvolution2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolution(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPokemonEvolutionCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionCreate(ctx context.Context, v any) (table.PokemonEvolutionCreate, error) {
	res, err := ec.unmarshalInputPokemonEvolutionCreate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPokemonEvolutionMatchup2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchup(ctx context.Context, sel ast.SelectionSet, v table.PokemonEvolutionMatchup) graphql.Marshaler {
	return ec._PokemonEvolutionMatchup(ctx, sel, &v)
}

func (ec *executionContext) marshalNPokemonEvolutionMatchup2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupᚄ(ctx context.Context, sel ast.SelectionSet, v []table.PokemonEvolutionMatchup) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPokemonEvolutionMatchup2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPokemonEvolutionMatchupCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupCreate(ctx context.Context, v any) (table.PokemonEvolutionMatchupCreate, error) {
	res, err := ec.unmarshalInputPokemonEvolutionMatchupCreate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPokemonEvolutionMatchupUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupUpdate(ctx context.Context, v any) (table.PokemonEvolutionMatchupUpdate, error) {
	res, err := ec.unmarshalInputPokemonEvolutionMatchupUpdate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPokemonEvolutionUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionUpdate(ctx context.Context, v any) (table.PokemonEvolutionUpdate, error) {
	res, err := ec.unmarshalInputPokemonEvolutionUpdate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPokemonTypes2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypes(ctx context.Context, sel ast.SelectionSet, v table.PokemonTypes) graphql.Marshaler {
	return ec._PokemonTypes(ctx, sel, &v)
}

func (ec *executionContext) marshalNPokemonTypes2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesᚄ(ctx context.Context, sel ast.SelectionSet, v []table.PokemonTypes) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPokemonTypes2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPokemonTypesCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesCreate(ctx context.Context, v any) (table.PokemonTypesCreate, error) {
	res, err := ec.unmarshalInputPokemonTypesCreate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPokemonTypesUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesUpdate(ctx context.Context, v any) (table.PokemonTypesUpdate, error) {
	res, err := ec.unmarshalInputPokemonTypesUpdate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPokemonUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonUpdate(ctx context.Context, v any) (table.PokemonUpdate, error) {
	res, err := ec.unmarshalInputPokemonUpdate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTypes2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypes(ctx context.Context, sel ast.SelectionSet, v table.Types) graphql.Marshaler {
	return ec._Types(ctx, sel, &v)
}

func (ec *executionContext) marshalNTypes2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypesᚄ(ctx context.Context, sel ast.SelectionSet, v []table.Types) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTypes2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNTypesCreate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypesCreate(ctx context.Context, v any) (table.TypesCreate, error) {
	res, err := ec.unmarshalInputTypesCreate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTypesUpdate2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypesUpdate(ctx context.Context, v any) (table.TypesUpdate, error) {
	res, err := ec.unmarshalInputTypesUpdate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilities(ctx context.Context, sel ast.SelectionSet, v *table.Abilities) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Abilities(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesFilter(ctx context.Context, v any) (*table.AbilitiesFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAbilitiesFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBaseStats2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStats(ctx context.Context, sel ast.SelectionSet, v *table.BaseStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BaseStats(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBaseStatsFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsFilter(ctx context.Context, v any) (*table.BaseStatsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBaseStatsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx context.Context, v any) (internal.FilterOnField, error) {
	if v == nil {
		return nil, nil
	}
	var res internal.FilterOnField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx context.Context, sel ast.SelectionSet, v internal.FilterOnField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOListAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListAbilities(ctx context.Context, sel ast.SelectionSet, v *table.ListAbilities) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListAbilities(ctx, sel, v)
}

func (ec *executionContext) marshalOListBaseStats2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListBaseStats(ctx context.Context, sel ast.SelectionSet, v *table.ListBaseStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListBaseStats(ctx, sel, v)
}

func (ec *executionContext) marshalOListPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemon(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemon) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListPokemon(ctx, sel, v)
}

func (ec *executionContext) marshalOListPokemonAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonAbilities(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemonAbilities) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListPokemonAbilities(ctx, sel, v)
}

func (ec *executionContext) marshalOListPokemonEvolution2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolution(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemonEvolution) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListPokemonEvolution(ctx, sel, v)
}

func (ec *executionContext) marshalOListPokemonEvolutionMatchup2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolutionMatchup(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemonEvolutionMatchup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListPokemonEvolutionMatchup(ctx, sel, v)
}

func (ec *executionContext) marshalOListPokemonTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonTypes(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemonTypes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListPokemonTypes(ctx, sel, v)
}

func (ec *executionContext) unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx context.Context, v any) (sql.NullInt64, error) {
	res, err := internal.UnmarshalNullInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONullInt642databaseᚋsqlᚐNullInt64(ctx context.Context, sel ast.SelectionSet, v sql.NullInt64) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := internal.MarshalNullInt64(v)
	return res
}

func (ec *executionContext) unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx context.Context, v any) (*sql.NullInt64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := internal.UnmarshalNullInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx context.Context, sel ast.SelectionSet, v *sql.NullInt64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := internal.MarshalNullInt64(*v)
	return res
}

func (ec *executionContext) unmarshalONullTime2databaseᚋsqlᚐNullTime(ctx context.Context, v any) (sql.NullTime, error) {
	res, err := internal.UnmarshalNullTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONullTime2databaseᚋsqlᚐNullTime(ctx context.Context, sel ast.SelectionSet, v sql.NullTime) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := internal.MarshalNullTime(v)
	return res
}

func (ec *executionContext) unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx context.Context, v any) (*internal.Pagination, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPagination(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx context.Context, sel ast.SelectionSet, v *table.Pokemon) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Pokemon(ctx, sel, v)
}

func (ec *executionContext) marshalOPokemonAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilities(ctx context.Context, sel ast.SelectionSet, v *table.PokemonAbilities) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PokemonAbilities(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPokemonAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesFilter(ctx context.Context, v any) (*table.PokemonAbilitiesFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPokemonAbilitiesFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPokemonEvolution2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolution(ctx context.Context, sel ast.SelectionSet, v *table.PokemonEvolution) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PokemonEvolution(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPokemonEvolutionFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionFilter(ctx context.Context, v any) (*table.PokemonEvolutionFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPokemonEvolutionFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPokemonEvolutionMatchup2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchup(ctx context.Context, sel ast.SelectionSet, v *table.PokemonEvolutionMatchup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PokemonEvolutionMatchup(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPokemonEvolutionMatchupFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupFilter(ctx context.Context, v any) (*table.PokemonEvolutionMatchupFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPokemonEvolutionMatchupFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPokemonEvolutionMatchupHabitat2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋenumᚐPokemonEvolutionMatchupHabitat(ctx context.Context, v any) (*enum.PokemonEvolutionMatchupHabitat, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(enum.PokemonEvolutionMatchupHabitat)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPokemonEvolutionMatchupHabitat2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋenumᚐPokemonEvolutionMatchupHabitat(ctx context.Context, sel ast.SelectionSet, v *enum.PokemonEvolutionMatchupHabitat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPokemonFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonFilter(ctx context.Context, v any) (*table.PokemonFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPokemonFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPokemonTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypes(ctx context.Context, sel ast.SelectionSet, v *table.PokemonTypes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PokemonTypes(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPokemonTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesFilter(ctx context.Context, v any) (*table.PokemonTypesFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPokemonTypesFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypes(ctx context.Context, sel ast.SelectionSet, v *table.Types) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Types(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypesFilter(ctx context.Context, v any) (*table.TypesFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTypesFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
