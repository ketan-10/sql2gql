// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"bytes"
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/enum"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/table"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Abilities() AbilitiesResolver
	BaseStats() BaseStatsResolver
	Pokemon() PokemonResolver
	PokemonAbilities() PokemonAbilitiesResolver
	PokemonEvolution() PokemonEvolutionResolver
	PokemonEvolutionMatchup() PokemonEvolutionMatchupResolver
	PokemonTypes() PokemonTypesResolver
	Query() QueryResolver
	Types() TypesResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Abilities struct {
		AbilityName                 func(childComplexity int) int
		Active                      func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		ID                          func(childComplexity int) int
		PokemonAbilitiesByFkAbility func(childComplexity int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) int
		UpdatedAt                   func(childComplexity int) int
	}

	BaseStats struct {
		Active             func(childComplexity int) int
		BAtk               func(childComplexity int) int
		BDef               func(childComplexity int) int
		BHp                func(childComplexity int) int
		BSpAtk             func(childComplexity int) int
		BSpDef             func(childComplexity int) int
		BSpeed             func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		FkPokemon          func(childComplexity int) int
		ID                 func(childComplexity int) int
		PokemonByFkPokemon func(childComplexity int, filter *table.PokemonFilter) int
		UpdatedAt          func(childComplexity int) int
	}

	ListAbilities struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListBaseStats struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListPokemon struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListPokemonAbilities struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListPokemonEvolution struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListPokemonEvolutionMatchup struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListPokemonTypes struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListTypes struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Pokemon struct {
		Active                             func(childComplexity int) int
		BaseStatsByFkPokemon               func(childComplexity int, filter *table.BaseStatsFilter, pagination *internal.Pagination) int
		CreatedAt                          func(childComplexity int) int
		ID                                 func(childComplexity int) int
		PokemonAbilitiesByFkPokemon        func(childComplexity int, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) int
		PokemonBaseExperience              func(childComplexity int) int
		PokemonEvolutionMatchupByPokemonID func(childComplexity int, filter *table.PokemonEvolutionMatchupFilter, pagination *internal.Pagination) int
		PokemonHeight                      func(childComplexity int) int
		PokemonName                        func(childComplexity int) int
		PokemonTypesByPokemonID            func(childComplexity int, filter *table.PokemonTypesFilter, pagination *internal.Pagination) int
		PokemonWeight                      func(childComplexity int) int
		UpdatedAt                          func(childComplexity int) int
	}

	PokemonAbilities struct {
		AbilitiesByFkAbility func(childComplexity int, filter *table.AbilitiesFilter) int
		Active               func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		FkAbility            func(childComplexity int) int
		FkPokemon            func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsHidden             func(childComplexity int) int
		PokemonByFkPokemon   func(childComplexity int, filter *table.PokemonFilter) int
		Slot                 func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
	}

	PokemonEvolution struct {
		Active                                    func(childComplexity int) int
		CreatedAt                                 func(childComplexity int) int
		EvolMinimumLevel                          func(childComplexity int) int
		EvolvedSpeciesID                          func(childComplexity int) int
		ID                                        func(childComplexity int) int
		PokemonEvolutionMatchupByEvolvedSpeciesID func(childComplexity int, filter *table.PokemonEvolutionMatchupFilter) int
		UpdatedAt                                 func(childComplexity int) int
	}

	PokemonEvolutionMatchup struct {
		Active                             func(childComplexity int) int
		BaseHappiness                      func(childComplexity int) int
		CaptureRate                        func(childComplexity int) int
		CreatedAt                          func(childComplexity int) int
		EvolvesFromSpeciesID               func(childComplexity int) int
		GenderRate                         func(childComplexity int) int
		Habitat                            func(childComplexity int) int
		ID                                 func(childComplexity int) int
		PokemonByPokemonID                 func(childComplexity int, filter *table.PokemonFilter) int
		PokemonEvolutionByEvolvedSpeciesID func(childComplexity int, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination) int
		PokemonID                          func(childComplexity int) int
		UpdatedAt                          func(childComplexity int) int
	}

	PokemonTypes struct {
		Active             func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		ID                 func(childComplexity int) int
		PokemonByPokemonID func(childComplexity int, filter *table.PokemonFilter) int
		PokemonID          func(childComplexity int) int
		Slot               func(childComplexity int) int
		TypeID             func(childComplexity int) int
		TypesByTypeID      func(childComplexity int, filter *table.TypesFilter) int
		UpdatedAt          func(childComplexity int) int
	}

	Query struct {
		FindAllPokemon func(childComplexity int, filter *table.PokemonFilter, pagination *internal.Pagination) int
	}

	Types struct {
		Active               func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		ID                   func(childComplexity int) int
		PokemonTypesByTypeID func(childComplexity int, filter *table.PokemonTypesFilter, pagination *internal.Pagination) int
		TypeName             func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
	}
}

type AbilitiesResolver interface {
	PokemonAbilitiesByFkAbility(ctx context.Context, obj *table.Abilities, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error)
}
type BaseStatsResolver interface {
	PokemonByFkPokemon(ctx context.Context, obj *table.BaseStats, filter *table.PokemonFilter) (*table.Pokemon, error)
}
type PokemonResolver interface {
	BaseStatsByFkPokemon(ctx context.Context, obj *table.Pokemon, filter *table.BaseStatsFilter, pagination *internal.Pagination) (*table.ListBaseStats, error)
	PokemonAbilitiesByFkPokemon(ctx context.Context, obj *table.Pokemon, filter *table.PokemonAbilitiesFilter, pagination *internal.Pagination) (*table.ListPokemonAbilities, error)
	PokemonEvolutionMatchupByPokemonID(ctx context.Context, obj *table.Pokemon, filter *table.PokemonEvolutionMatchupFilter, pagination *internal.Pagination) (*table.ListPokemonEvolutionMatchup, error)
	PokemonTypesByPokemonID(ctx context.Context, obj *table.Pokemon, filter *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error)
}
type PokemonAbilitiesResolver interface {
	PokemonByFkPokemon(ctx context.Context, obj *table.PokemonAbilities, filter *table.PokemonFilter) (*table.Pokemon, error)
	AbilitiesByFkAbility(ctx context.Context, obj *table.PokemonAbilities, filter *table.AbilitiesFilter) (*table.Abilities, error)
}
type PokemonEvolutionResolver interface {
	PokemonEvolutionMatchupByEvolvedSpeciesID(ctx context.Context, obj *table.PokemonEvolution, filter *table.PokemonEvolutionMatchupFilter) (*table.PokemonEvolutionMatchup, error)
}
type PokemonEvolutionMatchupResolver interface {
	PokemonByPokemonID(ctx context.Context, obj *table.PokemonEvolutionMatchup, filter *table.PokemonFilter) (*table.Pokemon, error)
	PokemonEvolutionByEvolvedSpeciesID(ctx context.Context, obj *table.PokemonEvolutionMatchup, filter *table.PokemonEvolutionFilter, pagination *internal.Pagination) (*table.ListPokemonEvolution, error)
}
type PokemonTypesResolver interface {
	PokemonByPokemonID(ctx context.Context, obj *table.PokemonTypes, filter *table.PokemonFilter) (*table.Pokemon, error)
	TypesByTypeID(ctx context.Context, obj *table.PokemonTypes, filter *table.TypesFilter) (*table.Types, error)
}
type QueryResolver interface {
	FindAllPokemon(ctx context.Context, filter *table.PokemonFilter, pagination *internal.Pagination) (*table.ListPokemon, error)
}
type TypesResolver interface {
	PokemonTypesByTypeID(ctx context.Context, obj *table.Types, filter *table.PokemonTypesFilter, pagination *internal.Pagination) (*table.ListPokemonTypes, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Abilities.abilityName":
		if e.complexity.Abilities.AbilityName == nil {
			break
		}

		return e.complexity.Abilities.AbilityName(childComplexity), true

	case "Abilities.active":
		if e.complexity.Abilities.Active == nil {
			break
		}

		return e.complexity.Abilities.Active(childComplexity), true

	case "Abilities.createdAt":
		if e.complexity.Abilities.CreatedAt == nil {
			break
		}

		return e.complexity.Abilities.CreatedAt(childComplexity), true

	case "Abilities.iD":
		if e.complexity.Abilities.ID == nil {
			break
		}

		return e.complexity.Abilities.ID(childComplexity), true

	case "Abilities.pokemonAbilitiesByFkAbility":
		if e.complexity.Abilities.PokemonAbilitiesByFkAbility == nil {
			break
		}

		args, err := ec.field_Abilities_pokemonAbilitiesByFkAbility_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Abilities.PokemonAbilitiesByFkAbility(childComplexity, args["filter"].(*table.PokemonAbilitiesFilter), args["pagination"].(*internal.Pagination)), true

	case "Abilities.updatedAt":
		if e.complexity.Abilities.UpdatedAt == nil {
			break
		}

		return e.complexity.Abilities.UpdatedAt(childComplexity), true

	case "BaseStats.active":
		if e.complexity.BaseStats.Active == nil {
			break
		}

		return e.complexity.BaseStats.Active(childComplexity), true

	case "BaseStats.bAtk":
		if e.complexity.BaseStats.BAtk == nil {
			break
		}

		return e.complexity.BaseStats.BAtk(childComplexity), true

	case "BaseStats.bDef":
		if e.complexity.BaseStats.BDef == nil {
			break
		}

		return e.complexity.BaseStats.BDef(childComplexity), true

	case "BaseStats.bHp":
		if e.complexity.BaseStats.BHp == nil {
			break
		}

		return e.complexity.BaseStats.BHp(childComplexity), true

	case "BaseStats.bSpAtk":
		if e.complexity.BaseStats.BSpAtk == nil {
			break
		}

		return e.complexity.BaseStats.BSpAtk(childComplexity), true

	case "BaseStats.bSpDef":
		if e.complexity.BaseStats.BSpDef == nil {
			break
		}

		return e.complexity.BaseStats.BSpDef(childComplexity), true

	case "BaseStats.bSpeed":
		if e.complexity.BaseStats.BSpeed == nil {
			break
		}

		return e.complexity.BaseStats.BSpeed(childComplexity), true

	case "BaseStats.createdAt":
		if e.complexity.BaseStats.CreatedAt == nil {
			break
		}

		return e.complexity.BaseStats.CreatedAt(childComplexity), true

	case "BaseStats.fkPokemon":
		if e.complexity.BaseStats.FkPokemon == nil {
			break
		}

		return e.complexity.BaseStats.FkPokemon(childComplexity), true

	case "BaseStats.iD":
		if e.complexity.BaseStats.ID == nil {
			break
		}

		return e.complexity.BaseStats.ID(childComplexity), true

	case "BaseStats.pokemonByFkPokemon":
		if e.complexity.BaseStats.PokemonByFkPokemon == nil {
			break
		}

		args, err := ec.field_BaseStats_pokemonByFkPokemon_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.BaseStats.PokemonByFkPokemon(childComplexity, args["filter"].(*table.PokemonFilter)), true

	case "BaseStats.updatedAt":
		if e.complexity.BaseStats.UpdatedAt == nil {
			break
		}

		return e.complexity.BaseStats.UpdatedAt(childComplexity), true

	case "ListAbilities.data":
		if e.complexity.ListAbilities.Data == nil {
			break
		}

		return e.complexity.ListAbilities.Data(childComplexity), true

	case "ListAbilities.totalCount":
		if e.complexity.ListAbilities.TotalCount == nil {
			break
		}

		return e.complexity.ListAbilities.TotalCount(childComplexity), true

	case "ListBaseStats.data":
		if e.complexity.ListBaseStats.Data == nil {
			break
		}

		return e.complexity.ListBaseStats.Data(childComplexity), true

	case "ListBaseStats.totalCount":
		if e.complexity.ListBaseStats.TotalCount == nil {
			break
		}

		return e.complexity.ListBaseStats.TotalCount(childComplexity), true

	case "ListPokemon.data":
		if e.complexity.ListPokemon.Data == nil {
			break
		}

		return e.complexity.ListPokemon.Data(childComplexity), true

	case "ListPokemon.totalCount":
		if e.complexity.ListPokemon.TotalCount == nil {
			break
		}

		return e.complexity.ListPokemon.TotalCount(childComplexity), true

	case "ListPokemonAbilities.data":
		if e.complexity.ListPokemonAbilities.Data == nil {
			break
		}

		return e.complexity.ListPokemonAbilities.Data(childComplexity), true

	case "ListPokemonAbilities.totalCount":
		if e.complexity.ListPokemonAbilities.TotalCount == nil {
			break
		}

		return e.complexity.ListPokemonAbilities.TotalCount(childComplexity), true

	case "ListPokemonEvolution.data":
		if e.complexity.ListPokemonEvolution.Data == nil {
			break
		}

		return e.complexity.ListPokemonEvolution.Data(childComplexity), true

	case "ListPokemonEvolution.totalCount":
		if e.complexity.ListPokemonEvolution.TotalCount == nil {
			break
		}

		return e.complexity.ListPokemonEvolution.TotalCount(childComplexity), true

	case "ListPokemonEvolutionMatchup.data":
		if e.complexity.ListPokemonEvolutionMatchup.Data == nil {
			break
		}

		return e.complexity.ListPokemonEvolutionMatchup.Data(childComplexity), true

	case "ListPokemonEvolutionMatchup.totalCount":
		if e.complexity.ListPokemonEvolutionMatchup.TotalCount == nil {
			break
		}

		return e.complexity.ListPokemonEvolutionMatchup.TotalCount(childComplexity), true

	case "ListPokemonTypes.data":
		if e.complexity.ListPokemonTypes.Data == nil {
			break
		}

		return e.complexity.ListPokemonTypes.Data(childComplexity), true

	case "ListPokemonTypes.totalCount":
		if e.complexity.ListPokemonTypes.TotalCount == nil {
			break
		}

		return e.complexity.ListPokemonTypes.TotalCount(childComplexity), true

	case "ListTypes.data":
		if e.complexity.ListTypes.Data == nil {
			break
		}

		return e.complexity.ListTypes.Data(childComplexity), true

	case "ListTypes.totalCount":
		if e.complexity.ListTypes.TotalCount == nil {
			break
		}

		return e.complexity.ListTypes.TotalCount(childComplexity), true

	case "Pokemon.active":
		if e.complexity.Pokemon.Active == nil {
			break
		}

		return e.complexity.Pokemon.Active(childComplexity), true

	case "Pokemon.baseStatsByFkPokemon":
		if e.complexity.Pokemon.BaseStatsByFkPokemon == nil {
			break
		}

		args, err := ec.field_Pokemon_baseStatsByFkPokemon_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Pokemon.BaseStatsByFkPokemon(childComplexity, args["filter"].(*table.BaseStatsFilter), args["pagination"].(*internal.Pagination)), true

	case "Pokemon.createdAt":
		if e.complexity.Pokemon.CreatedAt == nil {
			break
		}

		return e.complexity.Pokemon.CreatedAt(childComplexity), true

	case "Pokemon.iD":
		if e.complexity.Pokemon.ID == nil {
			break
		}

		return e.complexity.Pokemon.ID(childComplexity), true

	case "Pokemon.pokemonAbilitiesByFkPokemon":
		if e.complexity.Pokemon.PokemonAbilitiesByFkPokemon == nil {
			break
		}

		args, err := ec.field_Pokemon_pokemonAbilitiesByFkPokemon_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Pokemon.PokemonAbilitiesByFkPokemon(childComplexity, args["filter"].(*table.PokemonAbilitiesFilter), args["pagination"].(*internal.Pagination)), true

	case "Pokemon.pokemonBaseExperience":
		if e.complexity.Pokemon.PokemonBaseExperience == nil {
			break
		}

		return e.complexity.Pokemon.PokemonBaseExperience(childComplexity), true

	case "Pokemon.pokemonEvolutionMatchupByPokemonID":
		if e.complexity.Pokemon.PokemonEvolutionMatchupByPokemonID == nil {
			break
		}

		args, err := ec.field_Pokemon_pokemonEvolutionMatchupByPokemonID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Pokemon.PokemonEvolutionMatchupByPokemonID(childComplexity, args["filter"].(*table.PokemonEvolutionMatchupFilter), args["pagination"].(*internal.Pagination)), true

	case "Pokemon.pokemonHeight":
		if e.complexity.Pokemon.PokemonHeight == nil {
			break
		}

		return e.complexity.Pokemon.PokemonHeight(childComplexity), true

	case "Pokemon.pokemonName":
		if e.complexity.Pokemon.PokemonName == nil {
			break
		}

		return e.complexity.Pokemon.PokemonName(childComplexity), true

	case "Pokemon.pokemonTypesByPokemonID":
		if e.complexity.Pokemon.PokemonTypesByPokemonID == nil {
			break
		}

		args, err := ec.field_Pokemon_pokemonTypesByPokemonID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Pokemon.PokemonTypesByPokemonID(childComplexity, args["filter"].(*table.PokemonTypesFilter), args["pagination"].(*internal.Pagination)), true

	case "Pokemon.pokemonWeight":
		if e.complexity.Pokemon.PokemonWeight == nil {
			break
		}

		return e.complexity.Pokemon.PokemonWeight(childComplexity), true

	case "Pokemon.updatedAt":
		if e.complexity.Pokemon.UpdatedAt == nil {
			break
		}

		return e.complexity.Pokemon.UpdatedAt(childComplexity), true

	case "PokemonAbilities.abilitiesByFkAbility":
		if e.complexity.PokemonAbilities.AbilitiesByFkAbility == nil {
			break
		}

		args, err := ec.field_PokemonAbilities_abilitiesByFkAbility_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PokemonAbilities.AbilitiesByFkAbility(childComplexity, args["filter"].(*table.AbilitiesFilter)), true

	case "PokemonAbilities.active":
		if e.complexity.PokemonAbilities.Active == nil {
			break
		}

		return e.complexity.PokemonAbilities.Active(childComplexity), true

	case "PokemonAbilities.createdAt":
		if e.complexity.PokemonAbilities.CreatedAt == nil {
			break
		}

		return e.complexity.PokemonAbilities.CreatedAt(childComplexity), true

	case "PokemonAbilities.fkAbility":
		if e.complexity.PokemonAbilities.FkAbility == nil {
			break
		}

		return e.complexity.PokemonAbilities.FkAbility(childComplexity), true

	case "PokemonAbilities.fkPokemon":
		if e.complexity.PokemonAbilities.FkPokemon == nil {
			break
		}

		return e.complexity.PokemonAbilities.FkPokemon(childComplexity), true

	case "PokemonAbilities.iD":
		if e.complexity.PokemonAbilities.ID == nil {
			break
		}

		return e.complexity.PokemonAbilities.ID(childComplexity), true

	case "PokemonAbilities.isHidden":
		if e.complexity.PokemonAbilities.IsHidden == nil {
			break
		}

		return e.complexity.PokemonAbilities.IsHidden(childComplexity), true

	case "PokemonAbilities.pokemonByFkPokemon":
		if e.complexity.PokemonAbilities.PokemonByFkPokemon == nil {
			break
		}

		args, err := ec.field_PokemonAbilities_pokemonByFkPokemon_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PokemonAbilities.PokemonByFkPokemon(childComplexity, args["filter"].(*table.PokemonFilter)), true

	case "PokemonAbilities.slot":
		if e.complexity.PokemonAbilities.Slot == nil {
			break
		}

		return e.complexity.PokemonAbilities.Slot(childComplexity), true

	case "PokemonAbilities.updatedAt":
		if e.complexity.PokemonAbilities.UpdatedAt == nil {
			break
		}

		return e.complexity.PokemonAbilities.UpdatedAt(childComplexity), true

	case "PokemonEvolution.active":
		if e.complexity.PokemonEvolution.Active == nil {
			break
		}

		return e.complexity.PokemonEvolution.Active(childComplexity), true

	case "PokemonEvolution.createdAt":
		if e.complexity.PokemonEvolution.CreatedAt == nil {
			break
		}

		return e.complexity.PokemonEvolution.CreatedAt(childComplexity), true

	case "PokemonEvolution.evolMinimumLevel":
		if e.complexity.PokemonEvolution.EvolMinimumLevel == nil {
			break
		}

		return e.complexity.PokemonEvolution.EvolMinimumLevel(childComplexity), true

	case "PokemonEvolution.evolvedSpeciesID":
		if e.complexity.PokemonEvolution.EvolvedSpeciesID == nil {
			break
		}

		return e.complexity.PokemonEvolution.EvolvedSpeciesID(childComplexity), true

	case "PokemonEvolution.iD":
		if e.complexity.PokemonEvolution.ID == nil {
			break
		}

		return e.complexity.PokemonEvolution.ID(childComplexity), true

	case "PokemonEvolution.pokemonEvolutionMatchupByEvolvedSpeciesID":
		if e.complexity.PokemonEvolution.PokemonEvolutionMatchupByEvolvedSpeciesID == nil {
			break
		}

		args, err := ec.field_PokemonEvolution_pokemonEvolutionMatchupByEvolvedSpeciesID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PokemonEvolution.PokemonEvolutionMatchupByEvolvedSpeciesID(childComplexity, args["filter"].(*table.PokemonEvolutionMatchupFilter)), true

	case "PokemonEvolution.updatedAt":
		if e.complexity.PokemonEvolution.UpdatedAt == nil {
			break
		}

		return e.complexity.PokemonEvolution.UpdatedAt(childComplexity), true

	case "PokemonEvolutionMatchup.active":
		if e.complexity.PokemonEvolutionMatchup.Active == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.Active(childComplexity), true

	case "PokemonEvolutionMatchup.baseHappiness":
		if e.complexity.PokemonEvolutionMatchup.BaseHappiness == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.BaseHappiness(childComplexity), true

	case "PokemonEvolutionMatchup.captureRate":
		if e.complexity.PokemonEvolutionMatchup.CaptureRate == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.CaptureRate(childComplexity), true

	case "PokemonEvolutionMatchup.createdAt":
		if e.complexity.PokemonEvolutionMatchup.CreatedAt == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.CreatedAt(childComplexity), true

	case "PokemonEvolutionMatchup.evolvesFromSpeciesID":
		if e.complexity.PokemonEvolutionMatchup.EvolvesFromSpeciesID == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.EvolvesFromSpeciesID(childComplexity), true

	case "PokemonEvolutionMatchup.genderRate":
		if e.complexity.PokemonEvolutionMatchup.GenderRate == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.GenderRate(childComplexity), true

	case "PokemonEvolutionMatchup.habitat":
		if e.complexity.PokemonEvolutionMatchup.Habitat == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.Habitat(childComplexity), true

	case "PokemonEvolutionMatchup.iD":
		if e.complexity.PokemonEvolutionMatchup.ID == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.ID(childComplexity), true

	case "PokemonEvolutionMatchup.pokemonByPokemonID":
		if e.complexity.PokemonEvolutionMatchup.PokemonByPokemonID == nil {
			break
		}

		args, err := ec.field_PokemonEvolutionMatchup_pokemonByPokemonID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PokemonEvolutionMatchup.PokemonByPokemonID(childComplexity, args["filter"].(*table.PokemonFilter)), true

	case "PokemonEvolutionMatchup.pokemonEvolutionByEvolvedSpeciesID":
		if e.complexity.PokemonEvolutionMatchup.PokemonEvolutionByEvolvedSpeciesID == nil {
			break
		}

		args, err := ec.field_PokemonEvolutionMatchup_pokemonEvolutionByEvolvedSpeciesID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PokemonEvolutionMatchup.PokemonEvolutionByEvolvedSpeciesID(childComplexity, args["filter"].(*table.PokemonEvolutionFilter), args["pagination"].(*internal.Pagination)), true

	case "PokemonEvolutionMatchup.pokemonID":
		if e.complexity.PokemonEvolutionMatchup.PokemonID == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.PokemonID(childComplexity), true

	case "PokemonEvolutionMatchup.updatedAt":
		if e.complexity.PokemonEvolutionMatchup.UpdatedAt == nil {
			break
		}

		return e.complexity.PokemonEvolutionMatchup.UpdatedAt(childComplexity), true

	case "PokemonTypes.active":
		if e.complexity.PokemonTypes.Active == nil {
			break
		}

		return e.complexity.PokemonTypes.Active(childComplexity), true

	case "PokemonTypes.createdAt":
		if e.complexity.PokemonTypes.CreatedAt == nil {
			break
		}

		return e.complexity.PokemonTypes.CreatedAt(childComplexity), true

	case "PokemonTypes.iD":
		if e.complexity.PokemonTypes.ID == nil {
			break
		}

		return e.complexity.PokemonTypes.ID(childComplexity), true

	case "PokemonTypes.pokemonByPokemonID":
		if e.complexity.PokemonTypes.PokemonByPokemonID == nil {
			break
		}

		args, err := ec.field_PokemonTypes_pokemonByPokemonID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PokemonTypes.PokemonByPokemonID(childComplexity, args["filter"].(*table.PokemonFilter)), true

	case "PokemonTypes.pokemonID":
		if e.complexity.PokemonTypes.PokemonID == nil {
			break
		}

		return e.complexity.PokemonTypes.PokemonID(childComplexity), true

	case "PokemonTypes.slot":
		if e.complexity.PokemonTypes.Slot == nil {
			break
		}

		return e.complexity.PokemonTypes.Slot(childComplexity), true

	case "PokemonTypes.typeID":
		if e.complexity.PokemonTypes.TypeID == nil {
			break
		}

		return e.complexity.PokemonTypes.TypeID(childComplexity), true

	case "PokemonTypes.typesByTypeID":
		if e.complexity.PokemonTypes.TypesByTypeID == nil {
			break
		}

		args, err := ec.field_PokemonTypes_typesByTypeID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PokemonTypes.TypesByTypeID(childComplexity, args["filter"].(*table.TypesFilter)), true

	case "PokemonTypes.updatedAt":
		if e.complexity.PokemonTypes.UpdatedAt == nil {
			break
		}

		return e.complexity.PokemonTypes.UpdatedAt(childComplexity), true

	case "Query.findAllPokemon":
		if e.complexity.Query.FindAllPokemon == nil {
			break
		}

		args, err := ec.field_Query_findAllPokemon_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllPokemon(childComplexity, args["filter"].(*table.PokemonFilter), args["pagination"].(*internal.Pagination)), true

	case "Types.active":
		if e.complexity.Types.Active == nil {
			break
		}

		return e.complexity.Types.Active(childComplexity), true

	case "Types.createdAt":
		if e.complexity.Types.CreatedAt == nil {
			break
		}

		return e.complexity.Types.CreatedAt(childComplexity), true

	case "Types.iD":
		if e.complexity.Types.ID == nil {
			break
		}

		return e.complexity.Types.ID(childComplexity), true

	case "Types.pokemonTypesByTypeID":
		if e.complexity.Types.PokemonTypesByTypeID == nil {
			break
		}

		args, err := ec.field_Types_pokemonTypesByTypeID_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Types.PokemonTypesByTypeID(childComplexity, args["filter"].(*table.PokemonTypesFilter), args["pagination"].(*internal.Pagination)), true

	case "Types.typeName":
		if e.complexity.Types.TypeName == nil {
			break
		}

		return e.complexity.Types.TypeName(childComplexity), true

	case "Types.updatedAt":
		if e.complexity.Types.UpdatedAt == nil {
			break
		}

		return e.complexity.Types.UpdatedAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAbilitiesCreate,
		ec.unmarshalInputAbilitiesFilter,
		ec.unmarshalInputAbilitiesUpdate,
		ec.unmarshalInputBaseStatsCreate,
		ec.unmarshalInputBaseStatsFilter,
		ec.unmarshalInputBaseStatsUpdate,
		ec.unmarshalInputPagination,
		ec.unmarshalInputPokemonAbilitiesCreate,
		ec.unmarshalInputPokemonAbilitiesFilter,
		ec.unmarshalInputPokemonAbilitiesUpdate,
		ec.unmarshalInputPokemonCreate,
		ec.unmarshalInputPokemonEvolutionCreate,
		ec.unmarshalInputPokemonEvolutionFilter,
		ec.unmarshalInputPokemonEvolutionMatchupCreate,
		ec.unmarshalInputPokemonEvolutionMatchupFilter,
		ec.unmarshalInputPokemonEvolutionMatchupUpdate,
		ec.unmarshalInputPokemonEvolutionUpdate,
		ec.unmarshalInputPokemonFilter,
		ec.unmarshalInputPokemonTypesCreate,
		ec.unmarshalInputPokemonTypesFilter,
		ec.unmarshalInputPokemonTypesUpdate,
		ec.unmarshalInputPokemonUpdate,
		ec.unmarshalInputTypesCreate,
		ec.unmarshalInputTypesFilter,
		ec.unmarshalInputTypesUpdate,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/query.graphql", Input: `type Query {
    
    findAllPokemon(filter: PokemonFilter, pagination: Pagination): ListPokemon!

}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/abilities.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type Abilities {
    iD: Int !
    abilityName: String !
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 





    pokemonAbilitiesByFkAbility(filter: PokemonAbilitiesFilter, pagination: Pagination): ListPokemonAbilities!

}
input AbilitiesFilter {
    iD: FilterOnField
    abilityName: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input AbilitiesCreate {
    abilityName: String !
}

input AbilitiesUpdate {
    abilityName: String 
    active: Boolean 

}

type ListAbilities {
    totalCount: Int!
    data: [Abilities!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/base_stats.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type BaseStats {
    iD: Int !
    fkPokemon: Int !
    bHp: NullInt64 
    bAtk: NullInt64 
    bDef: NullInt64 
    bSpAtk: NullInt64 
    bSpDef: NullInt64 
    bSpeed: NullInt64 
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 


    pokemonByFkPokemon(filter: PokemonFilter): Pokemon




}
input BaseStatsFilter {
    iD: FilterOnField
    fkPokemon: FilterOnField
    bHp: FilterOnField
    bAtk: FilterOnField
    bDef: FilterOnField
    bSpAtk: FilterOnField
    bSpDef: FilterOnField
    bSpeed: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input BaseStatsCreate {
    fkPokemon: Int !
    bHp: NullInt64 
    bAtk: NullInt64 
    bDef: NullInt64 
    bSpAtk: NullInt64 
    bSpDef: NullInt64 
    bSpeed: NullInt64 
}

input BaseStatsUpdate {
    fkPokemon: Int 
    bHp: NullInt64 
    bAtk: NullInt64 
    bDef: NullInt64 
    bSpAtk: NullInt64 
    bSpDef: NullInt64 
    bSpeed: NullInt64 
    active: Boolean 

}

type ListBaseStats {
    totalCount: Int!
    data: [BaseStats!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/pokemon.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type Pokemon {
    iD: Int !
    pokemonName: String !
    pokemonHeight: NullInt64 
    pokemonWeight: NullInt64 
    pokemonBaseExperience: NullInt64 
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 





    baseStatsByFkPokemon(filter: BaseStatsFilter, pagination: Pagination): ListBaseStats!
    pokemonAbilitiesByFkPokemon(filter: PokemonAbilitiesFilter, pagination: Pagination): ListPokemonAbilities!
    pokemonEvolutionMatchupByPokemonID(filter: PokemonEvolutionMatchupFilter, pagination: Pagination): ListPokemonEvolutionMatchup!
    pokemonTypesByPokemonID(filter: PokemonTypesFilter, pagination: Pagination): ListPokemonTypes!

}
input PokemonFilter {
    iD: FilterOnField
    pokemonName: FilterOnField
    pokemonHeight: FilterOnField
    pokemonWeight: FilterOnField
    pokemonBaseExperience: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input PokemonCreate {
    pokemonName: String !
    pokemonHeight: NullInt64 
    pokemonWeight: NullInt64 
    pokemonBaseExperience: NullInt64 
}

input PokemonUpdate {
    pokemonName: String 
    pokemonHeight: NullInt64 
    pokemonWeight: NullInt64 
    pokemonBaseExperience: NullInt64 
    active: Boolean 

}

type ListPokemon {
    totalCount: Int!
    data: [Pokemon!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/pokemon_abilities.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type PokemonAbilities {
    iD: Int !
    fkPokemon: Int !
    fkAbility: Int !
    isHidden: Boolean !
    slot: Int !
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 


    pokemonByFkPokemon(filter: PokemonFilter): Pokemon
    abilitiesByFkAbility(filter: AbilitiesFilter): Abilities




}
input PokemonAbilitiesFilter {
    iD: FilterOnField
    fkPokemon: FilterOnField
    fkAbility: FilterOnField
    isHidden: FilterOnField
    slot: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input PokemonAbilitiesCreate {
    fkPokemon: Int !
    fkAbility: Int !
    isHidden: Boolean !
    slot: Int !
}

input PokemonAbilitiesUpdate {
    fkPokemon: Int 
    fkAbility: Int 
    isHidden: Boolean 
    slot: Int 
    active: Boolean 

}

type ListPokemonAbilities {
    totalCount: Int!
    data: [PokemonAbilities!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/pokemon_evolution.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type PokemonEvolution {
    iD: Int !
    evolvedSpeciesID: Int !
    evolMinimumLevel: NullInt64 
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 


    pokemonEvolutionMatchupByEvolvedSpeciesID(filter: PokemonEvolutionMatchupFilter): PokemonEvolutionMatchup




}
input PokemonEvolutionFilter {
    iD: FilterOnField
    evolvedSpeciesID: FilterOnField
    evolMinimumLevel: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input PokemonEvolutionCreate {
    evolvedSpeciesID: Int !
    evolMinimumLevel: NullInt64 
}

input PokemonEvolutionUpdate {
    evolvedSpeciesID: Int 
    evolMinimumLevel: NullInt64 
    active: Boolean 

}

type ListPokemonEvolution {
    totalCount: Int!
    data: [PokemonEvolution!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/pokemon_evolution_matchup.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type PokemonEvolutionMatchup {
    iD: Int !
    pokemonID: Int !
    evolvesFromSpeciesID: NullInt64 
    habitat:  PokemonEvolutionMatchupHabitat 
    genderRate: Int !
    captureRate: Int !
    baseHappiness: Int !
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 


    pokemonByPokemonID(filter: PokemonFilter): Pokemon



    pokemonEvolutionByEvolvedSpeciesID(filter: PokemonEvolutionFilter, pagination: Pagination): ListPokemonEvolution!

}
input PokemonEvolutionMatchupFilter {
    iD: FilterOnField
    pokemonID: FilterOnField
    evolvesFromSpeciesID: FilterOnField
    habitat: FilterOnField
    genderRate: FilterOnField
    captureRate: FilterOnField
    baseHappiness: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input PokemonEvolutionMatchupCreate {
    pokemonID: Int !
    evolvesFromSpeciesID: NullInt64 
    habitat:  PokemonEvolutionMatchupHabitat 
    genderRate: Int !
    captureRate: Int !
    baseHappiness: Int !
}

input PokemonEvolutionMatchupUpdate {
    pokemonID: Int 
    evolvesFromSpeciesID: NullInt64 
    habitat:  PokemonEvolutionMatchupHabitat 
    genderRate: Int 
    captureRate: Int 
    baseHappiness: Int 
    active: Boolean 

}

type ListPokemonEvolutionMatchup {
    totalCount: Int!
    data: [PokemonEvolutionMatchup!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/pokemon_types.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type PokemonTypes {
    iD: Int !
    pokemonID: Int !
    typeID: Int !
    slot: Int !
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 


    pokemonByPokemonID(filter: PokemonFilter): Pokemon
    typesByTypeID(filter: TypesFilter): Types




}
input PokemonTypesFilter {
    iD: FilterOnField
    pokemonID: FilterOnField
    typeID: FilterOnField
    slot: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input PokemonTypesCreate {
    pokemonID: Int !
    typeID: Int !
    slot: Int !
}

input PokemonTypesUpdate {
    pokemonID: Int 
    typeID: Int 
    slot: Int 
    active: Boolean 

}

type ListPokemonTypes {
    totalCount: Int!
    data: [PokemonTypes!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/schema/types.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

type Types {
    iD: Int !
    typeName: String !
    active: Boolean !
    createdAt: NullTime 
    updatedAt: NullTime 





    pokemonTypesByTypeID(filter: PokemonTypesFilter, pagination: Pagination): ListPokemonTypes!

}
input TypesFilter {
    iD: FilterOnField
    typeName: FilterOnField
    active: FilterOnField
    createdAt: FilterOnField
    updatedAt: FilterOnField
}

input TypesCreate {
    typeName: String !
}

input TypesUpdate {
    typeName: String 
    active: Boolean 

}

type ListTypes {
    totalCount: Int!
    data: [Types!]!
}
`, BuiltIn: false},
	{Name: "../../sql2gql/scalar.graphql", Input: `# Code generated by sql2gql. DO NOT EDIT.

scalar PokemonEvolutionMatchupHabitat


scalar Datetime
scalar IntBool
scalar NullTime
scalar NullInt64
scalar NullFloat64
scalar NullString
scalar NullBool
scalar Map
scalar FilterOnField


input Pagination {
    page: Int
    perPage: Int
    sort: [String!]
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Abilities_pokemonAbilitiesByFkAbility_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Abilities_pokemonAbilitiesByFkAbility_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Abilities_pokemonAbilitiesByFkAbility_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Abilities_pokemonAbilitiesByFkAbility_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonAbilitiesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonAbilitiesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonAbilitiesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Abilities_pokemonAbilitiesByFkAbility_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_BaseStats_pokemonByFkPokemon_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_BaseStats_pokemonByFkPokemon_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_BaseStats_pokemonByFkPokemon_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonFilter
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonAbilities_abilitiesByFkAbility_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PokemonAbilities_abilitiesByFkAbility_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_PokemonAbilities_abilitiesByFkAbility_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.AbilitiesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.AbilitiesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesFilter(ctx, tmp)
	}

	var zeroVal *table.AbilitiesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonAbilities_pokemonByFkPokemon_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PokemonAbilities_pokemonByFkPokemon_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_PokemonAbilities_pokemonByFkPokemon_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonFilter
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonEvolutionMatchup_pokemonByPokemonID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PokemonEvolutionMatchup_pokemonByPokemonID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_PokemonEvolutionMatchup_pokemonByPokemonID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonFilter
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonEvolutionMatchup_pokemonEvolutionByEvolvedSpeciesID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PokemonEvolutionMatchup_pokemonEvolutionByEvolvedSpeciesID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_PokemonEvolutionMatchup_pokemonEvolutionByEvolvedSpeciesID_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_PokemonEvolutionMatchup_pokemonEvolutionByEvolvedSpeciesID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonEvolutionFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonEvolutionFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonEvolutionFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonEvolutionFilter
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonEvolutionMatchup_pokemonEvolutionByEvolvedSpeciesID_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonEvolution_pokemonEvolutionMatchupByEvolvedSpeciesID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PokemonEvolution_pokemonEvolutionMatchupByEvolvedSpeciesID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_PokemonEvolution_pokemonEvolutionMatchupByEvolvedSpeciesID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonEvolutionMatchupFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonEvolutionMatchupFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonEvolutionMatchupFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonEvolutionMatchupFilter
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonTypes_pokemonByPokemonID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PokemonTypes_pokemonByPokemonID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_PokemonTypes_pokemonByPokemonID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonFilter
	return zeroVal, nil
}

func (ec *executionContext) field_PokemonTypes_typesByTypeID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PokemonTypes_typesByTypeID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}
func (ec *executionContext) field_PokemonTypes_typesByTypeID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.TypesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.TypesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypesFilter(ctx, tmp)
	}

	var zeroVal *table.TypesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_baseStatsByFkPokemon_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Pokemon_baseStatsByFkPokemon_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Pokemon_baseStatsByFkPokemon_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Pokemon_baseStatsByFkPokemon_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.BaseStatsFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.BaseStatsFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOBaseStatsFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsFilter(ctx, tmp)
	}

	var zeroVal *table.BaseStatsFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_baseStatsByFkPokemon_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_pokemonAbilitiesByFkPokemon_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Pokemon_pokemonAbilitiesByFkPokemon_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Pokemon_pokemonAbilitiesByFkPokemon_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Pokemon_pokemonAbilitiesByFkPokemon_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonAbilitiesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonAbilitiesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonAbilitiesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_pokemonAbilitiesByFkPokemon_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_pokemonEvolutionMatchupByPokemonID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Pokemon_pokemonEvolutionMatchupByPokemonID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Pokemon_pokemonEvolutionMatchupByPokemonID_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Pokemon_pokemonEvolutionMatchupByPokemonID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonEvolutionMatchupFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonEvolutionMatchupFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonEvolutionMatchupFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonEvolutionMatchupFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_pokemonEvolutionMatchupByPokemonID_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_pokemonTypesByPokemonID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Pokemon_pokemonTypesByPokemonID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Pokemon_pokemonTypesByPokemonID_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Pokemon_pokemonTypesByPokemonID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonTypesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonTypesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonTypesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Pokemon_pokemonTypesByPokemonID_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["name"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllPokemon_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_findAllPokemon_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Query_findAllPokemon_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_findAllPokemon_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_findAllPokemon_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field_Types_pokemonTypesByTypeID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Types_pokemonTypesByTypeID_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := ec.field_Types_pokemonTypesByTypeID_argsPagination(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["pagination"] = arg1
	return args, nil
}
func (ec *executionContext) field_Types_pokemonTypesByTypeID_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*table.PokemonTypesFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *table.PokemonTypesFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOPokemonTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesFilter(ctx, tmp)
	}

	var zeroVal *table.PokemonTypesFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Types_pokemonTypesByTypeID_argsPagination(
	ctx context.Context,
	rawArgs map[string]any,
) (*internal.Pagination, error) {
	if _, ok := rawArgs["pagination"]; !ok {
		var zeroVal *internal.Pagination
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
	if tmp, ok := rawArgs["pagination"]; ok {
		return ec.unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx, tmp)
	}

	var zeroVal *internal.Pagination
	return zeroVal, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Directive_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Directive_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Field_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Field_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Abilities_iD(ctx context.Context, field graphql.CollectedField, obj *table.Abilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Abilities_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Abilities_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Abilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Abilities_abilityName(ctx context.Context, field graphql.CollectedField, obj *table.Abilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Abilities_abilityName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbilityName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Abilities_abilityName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Abilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Abilities_active(ctx context.Context, field graphql.CollectedField, obj *table.Abilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Abilities_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Abilities_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Abilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Abilities_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.Abilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Abilities_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Abilities_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Abilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Abilities_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.Abilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Abilities_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Abilities_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Abilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Abilities_pokemonAbilitiesByFkAbility(ctx context.Context, field graphql.CollectedField, obj *table.Abilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Abilities_pokemonAbilitiesByFkAbility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Abilities().PokemonAbilitiesByFkAbility(rctx, obj, fc.Args["filter"].(*table.PokemonAbilitiesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonAbilities)
	fc.Result = res
	return ec.marshalNListPokemonAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Abilities_pokemonAbilitiesByFkAbility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Abilities",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonAbilities_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonAbilities_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonAbilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Abilities_pokemonAbilitiesByFkAbility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_iD(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_fkPokemon(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_fkPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkPokemon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_fkPokemon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_bHp(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_bHp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BHp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_bHp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_bAtk(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_bAtk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BAtk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_bAtk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_bDef(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_bDef(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BDef, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_bDef(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_bSpAtk(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_bSpAtk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BSpAtk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_bSpAtk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_bSpDef(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_bSpDef(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BSpDef, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_bSpDef(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_bSpeed(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_bSpeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_bSpeed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_active(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BaseStats_pokemonByFkPokemon(ctx context.Context, field graphql.CollectedField, obj *table.BaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BaseStats_pokemonByFkPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BaseStats().PokemonByFkPokemon(rctx, obj, fc.Args["filter"].(*table.PokemonFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Pokemon)
	fc.Result = res
	return ec.marshalOPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BaseStats_pokemonByFkPokemon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BaseStats",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Pokemon_iD(ctx, field)
			case "pokemonName":
				return ec.fieldContext_Pokemon_pokemonName(ctx, field)
			case "pokemonHeight":
				return ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
			case "pokemonWeight":
				return ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
			case "pokemonBaseExperience":
				return ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
			case "active":
				return ec.fieldContext_Pokemon_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Pokemon_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Pokemon_updatedAt(ctx, field)
			case "baseStatsByFkPokemon":
				return ec.fieldContext_Pokemon_baseStatsByFkPokemon(ctx, field)
			case "pokemonAbilitiesByFkPokemon":
				return ec.fieldContext_Pokemon_pokemonAbilitiesByFkPokemon(ctx, field)
			case "pokemonEvolutionMatchupByPokemonID":
				return ec.fieldContext_Pokemon_pokemonEvolutionMatchupByPokemonID(ctx, field)
			case "pokemonTypesByPokemonID":
				return ec.fieldContext_Pokemon_pokemonTypesByPokemonID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pokemon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_BaseStats_pokemonByFkPokemon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ListAbilities_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListAbilities_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListAbilities_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListAbilities_data(ctx context.Context, field graphql.CollectedField, obj *table.ListAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListAbilities_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.Abilities)
	fc.Result = res
	return ec.marshalNAbilities2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListAbilities_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Abilities_iD(ctx, field)
			case "abilityName":
				return ec.fieldContext_Abilities_abilityName(ctx, field)
			case "active":
				return ec.fieldContext_Abilities_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Abilities_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Abilities_updatedAt(ctx, field)
			case "pokemonAbilitiesByFkAbility":
				return ec.fieldContext_Abilities_pokemonAbilitiesByFkAbility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Abilities", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListBaseStats_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListBaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListBaseStats_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListBaseStats_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListBaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListBaseStats_data(ctx context.Context, field graphql.CollectedField, obj *table.ListBaseStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListBaseStats_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.BaseStats)
	fc.Result = res
	return ec.marshalNBaseStats2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListBaseStats_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListBaseStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_BaseStats_iD(ctx, field)
			case "fkPokemon":
				return ec.fieldContext_BaseStats_fkPokemon(ctx, field)
			case "bHp":
				return ec.fieldContext_BaseStats_bHp(ctx, field)
			case "bAtk":
				return ec.fieldContext_BaseStats_bAtk(ctx, field)
			case "bDef":
				return ec.fieldContext_BaseStats_bDef(ctx, field)
			case "bSpAtk":
				return ec.fieldContext_BaseStats_bSpAtk(ctx, field)
			case "bSpDef":
				return ec.fieldContext_BaseStats_bSpDef(ctx, field)
			case "bSpeed":
				return ec.fieldContext_BaseStats_bSpeed(ctx, field)
			case "active":
				return ec.fieldContext_BaseStats_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_BaseStats_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_BaseStats_updatedAt(ctx, field)
			case "pokemonByFkPokemon":
				return ec.fieldContext_BaseStats_pokemonByFkPokemon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BaseStats", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemon_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemon_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemon_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemon_data(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemon_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.Pokemon)
	fc.Result = res
	return ec.marshalNPokemon2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemon_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Pokemon_iD(ctx, field)
			case "pokemonName":
				return ec.fieldContext_Pokemon_pokemonName(ctx, field)
			case "pokemonHeight":
				return ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
			case "pokemonWeight":
				return ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
			case "pokemonBaseExperience":
				return ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
			case "active":
				return ec.fieldContext_Pokemon_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Pokemon_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Pokemon_updatedAt(ctx, field)
			case "baseStatsByFkPokemon":
				return ec.fieldContext_Pokemon_baseStatsByFkPokemon(ctx, field)
			case "pokemonAbilitiesByFkPokemon":
				return ec.fieldContext_Pokemon_pokemonAbilitiesByFkPokemon(ctx, field)
			case "pokemonEvolutionMatchupByPokemonID":
				return ec.fieldContext_Pokemon_pokemonEvolutionMatchupByPokemonID(ctx, field)
			case "pokemonTypesByPokemonID":
				return ec.fieldContext_Pokemon_pokemonTypesByPokemonID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pokemon", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonAbilities_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonAbilities_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonAbilities_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonAbilities_data(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonAbilities_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.PokemonAbilities)
	fc.Result = res
	return ec.marshalNPokemonAbilities2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonAbilities_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonAbilities_iD(ctx, field)
			case "fkPokemon":
				return ec.fieldContext_PokemonAbilities_fkPokemon(ctx, field)
			case "fkAbility":
				return ec.fieldContext_PokemonAbilities_fkAbility(ctx, field)
			case "isHidden":
				return ec.fieldContext_PokemonAbilities_isHidden(ctx, field)
			case "slot":
				return ec.fieldContext_PokemonAbilities_slot(ctx, field)
			case "active":
				return ec.fieldContext_PokemonAbilities_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonAbilities_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonAbilities_updatedAt(ctx, field)
			case "pokemonByFkPokemon":
				return ec.fieldContext_PokemonAbilities_pokemonByFkPokemon(ctx, field)
			case "abilitiesByFkAbility":
				return ec.fieldContext_PokemonAbilities_abilitiesByFkAbility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonAbilities", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonEvolution_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonEvolution_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonEvolution_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonEvolution_data(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonEvolution_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.PokemonEvolution)
	fc.Result = res
	return ec.marshalNPokemonEvolution2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonEvolution_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonEvolution_iD(ctx, field)
			case "evolvedSpeciesID":
				return ec.fieldContext_PokemonEvolution_evolvedSpeciesID(ctx, field)
			case "evolMinimumLevel":
				return ec.fieldContext_PokemonEvolution_evolMinimumLevel(ctx, field)
			case "active":
				return ec.fieldContext_PokemonEvolution_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonEvolution_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonEvolution_updatedAt(ctx, field)
			case "pokemonEvolutionMatchupByEvolvedSpeciesID":
				return ec.fieldContext_PokemonEvolution_pokemonEvolutionMatchupByEvolvedSpeciesID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonEvolution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonEvolutionMatchup_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonEvolutionMatchup_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonEvolutionMatchup_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonEvolutionMatchup_data(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonEvolutionMatchup_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.PokemonEvolutionMatchup)
	fc.Result = res
	return ec.marshalNPokemonEvolutionMatchup2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonEvolutionMatchup_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonEvolutionMatchup_iD(ctx, field)
			case "pokemonID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonID(ctx, field)
			case "evolvesFromSpeciesID":
				return ec.fieldContext_PokemonEvolutionMatchup_evolvesFromSpeciesID(ctx, field)
			case "habitat":
				return ec.fieldContext_PokemonEvolutionMatchup_habitat(ctx, field)
			case "genderRate":
				return ec.fieldContext_PokemonEvolutionMatchup_genderRate(ctx, field)
			case "captureRate":
				return ec.fieldContext_PokemonEvolutionMatchup_captureRate(ctx, field)
			case "baseHappiness":
				return ec.fieldContext_PokemonEvolutionMatchup_baseHappiness(ctx, field)
			case "active":
				return ec.fieldContext_PokemonEvolutionMatchup_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonEvolutionMatchup_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonEvolutionMatchup_updatedAt(ctx, field)
			case "pokemonByPokemonID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonByPokemonID(ctx, field)
			case "pokemonEvolutionByEvolvedSpeciesID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonEvolutionByEvolvedSpeciesID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonEvolutionMatchup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonTypes_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonTypes_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonTypes_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListPokemonTypes_data(ctx context.Context, field graphql.CollectedField, obj *table.ListPokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListPokemonTypes_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.PokemonTypes)
	fc.Result = res
	return ec.marshalNPokemonTypes2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListPokemonTypes_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListPokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonTypes_iD(ctx, field)
			case "pokemonID":
				return ec.fieldContext_PokemonTypes_pokemonID(ctx, field)
			case "typeID":
				return ec.fieldContext_PokemonTypes_typeID(ctx, field)
			case "slot":
				return ec.fieldContext_PokemonTypes_slot(ctx, field)
			case "active":
				return ec.fieldContext_PokemonTypes_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonTypes_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonTypes_updatedAt(ctx, field)
			case "pokemonByPokemonID":
				return ec.fieldContext_PokemonTypes_pokemonByPokemonID(ctx, field)
			case "typesByTypeID":
				return ec.fieldContext_PokemonTypes_typesByTypeID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonTypes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListTypes_totalCount(ctx context.Context, field graphql.CollectedField, obj *table.ListTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListTypes_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListTypes_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListTypes_data(ctx context.Context, field graphql.CollectedField, obj *table.ListTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListTypes_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]table.Types)
	fc.Result = res
	return ec.marshalNTypes2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListTypes_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Types_iD(ctx, field)
			case "typeName":
				return ec.fieldContext_Types_typeName(ctx, field)
			case "active":
				return ec.fieldContext_Types_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Types_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Types_updatedAt(ctx, field)
			case "pokemonTypesByTypeID":
				return ec.fieldContext_Types_pokemonTypesByTypeID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Types", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_iD(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_pokemonName(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_pokemonName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PokemonName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_pokemonName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_pokemonHeight(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PokemonHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_pokemonHeight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_pokemonWeight(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PokemonWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_pokemonWeight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_pokemonBaseExperience(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PokemonBaseExperience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_pokemonBaseExperience(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_active(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_baseStatsByFkPokemon(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_baseStatsByFkPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Pokemon().BaseStatsByFkPokemon(rctx, obj, fc.Args["filter"].(*table.BaseStatsFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListBaseStats)
	fc.Result = res
	return ec.marshalNListBaseStats2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListBaseStats(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_baseStatsByFkPokemon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListBaseStats_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListBaseStats_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListBaseStats", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Pokemon_baseStatsByFkPokemon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_pokemonAbilitiesByFkPokemon(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_pokemonAbilitiesByFkPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Pokemon().PokemonAbilitiesByFkPokemon(rctx, obj, fc.Args["filter"].(*table.PokemonAbilitiesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonAbilities)
	fc.Result = res
	return ec.marshalNListPokemonAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_pokemonAbilitiesByFkPokemon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonAbilities_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonAbilities_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonAbilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Pokemon_pokemonAbilitiesByFkPokemon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_pokemonEvolutionMatchupByPokemonID(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_pokemonEvolutionMatchupByPokemonID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Pokemon().PokemonEvolutionMatchupByPokemonID(rctx, obj, fc.Args["filter"].(*table.PokemonEvolutionMatchupFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonEvolutionMatchup)
	fc.Result = res
	return ec.marshalNListPokemonEvolutionMatchup2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolutionMatchup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_pokemonEvolutionMatchupByPokemonID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonEvolutionMatchup_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonEvolutionMatchup_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonEvolutionMatchup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Pokemon_pokemonEvolutionMatchupByPokemonID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Pokemon_pokemonTypesByPokemonID(ctx context.Context, field graphql.CollectedField, obj *table.Pokemon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pokemon_pokemonTypesByPokemonID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Pokemon().PokemonTypesByPokemonID(rctx, obj, fc.Args["filter"].(*table.PokemonTypesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonTypes)
	fc.Result = res
	return ec.marshalNListPokemonTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pokemon_pokemonTypesByPokemonID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pokemon",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonTypes_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonTypes_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonTypes", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Pokemon_pokemonTypesByPokemonID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_iD(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_fkPokemon(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_fkPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkPokemon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_fkPokemon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_fkAbility(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_fkAbility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkAbility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_fkAbility(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_isHidden(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_isHidden(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHidden, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_isHidden(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_slot(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_slot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_slot(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_active(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_pokemonByFkPokemon(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_pokemonByFkPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PokemonAbilities().PokemonByFkPokemon(rctx, obj, fc.Args["filter"].(*table.PokemonFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Pokemon)
	fc.Result = res
	return ec.marshalOPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_pokemonByFkPokemon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Pokemon_iD(ctx, field)
			case "pokemonName":
				return ec.fieldContext_Pokemon_pokemonName(ctx, field)
			case "pokemonHeight":
				return ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
			case "pokemonWeight":
				return ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
			case "pokemonBaseExperience":
				return ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
			case "active":
				return ec.fieldContext_Pokemon_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Pokemon_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Pokemon_updatedAt(ctx, field)
			case "baseStatsByFkPokemon":
				return ec.fieldContext_Pokemon_baseStatsByFkPokemon(ctx, field)
			case "pokemonAbilitiesByFkPokemon":
				return ec.fieldContext_Pokemon_pokemonAbilitiesByFkPokemon(ctx, field)
			case "pokemonEvolutionMatchupByPokemonID":
				return ec.fieldContext_Pokemon_pokemonEvolutionMatchupByPokemonID(ctx, field)
			case "pokemonTypesByPokemonID":
				return ec.fieldContext_Pokemon_pokemonTypesByPokemonID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pokemon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PokemonAbilities_pokemonByFkPokemon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PokemonAbilities_abilitiesByFkAbility(ctx context.Context, field graphql.CollectedField, obj *table.PokemonAbilities) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonAbilities_abilitiesByFkAbility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PokemonAbilities().AbilitiesByFkAbility(rctx, obj, fc.Args["filter"].(*table.AbilitiesFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Abilities)
	fc.Result = res
	return ec.marshalOAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilities(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonAbilities_abilitiesByFkAbility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonAbilities",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Abilities_iD(ctx, field)
			case "abilityName":
				return ec.fieldContext_Abilities_abilityName(ctx, field)
			case "active":
				return ec.fieldContext_Abilities_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Abilities_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Abilities_updatedAt(ctx, field)
			case "pokemonAbilitiesByFkAbility":
				return ec.fieldContext_Abilities_pokemonAbilitiesByFkAbility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Abilities", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PokemonAbilities_abilitiesByFkAbility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolution_iD(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolution_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolution_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolution_evolvedSpeciesID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolution_evolvedSpeciesID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvolvedSpeciesID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolution_evolvedSpeciesID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolution_evolMinimumLevel(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolution_evolMinimumLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvolMinimumLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolution_evolMinimumLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolution_active(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolution_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolution_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolution_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolution_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolution_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolution_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolution_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolution_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolution_pokemonEvolutionMatchupByEvolvedSpeciesID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolution_pokemonEvolutionMatchupByEvolvedSpeciesID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PokemonEvolution().PokemonEvolutionMatchupByEvolvedSpeciesID(rctx, obj, fc.Args["filter"].(*table.PokemonEvolutionMatchupFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.PokemonEvolutionMatchup)
	fc.Result = res
	return ec.marshalOPokemonEvolutionMatchup2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolution_pokemonEvolutionMatchupByEvolvedSpeciesID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolution",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_PokemonEvolutionMatchup_iD(ctx, field)
			case "pokemonID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonID(ctx, field)
			case "evolvesFromSpeciesID":
				return ec.fieldContext_PokemonEvolutionMatchup_evolvesFromSpeciesID(ctx, field)
			case "habitat":
				return ec.fieldContext_PokemonEvolutionMatchup_habitat(ctx, field)
			case "genderRate":
				return ec.fieldContext_PokemonEvolutionMatchup_genderRate(ctx, field)
			case "captureRate":
				return ec.fieldContext_PokemonEvolutionMatchup_captureRate(ctx, field)
			case "baseHappiness":
				return ec.fieldContext_PokemonEvolutionMatchup_baseHappiness(ctx, field)
			case "active":
				return ec.fieldContext_PokemonEvolutionMatchup_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_PokemonEvolutionMatchup_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PokemonEvolutionMatchup_updatedAt(ctx, field)
			case "pokemonByPokemonID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonByPokemonID(ctx, field)
			case "pokemonEvolutionByEvolvedSpeciesID":
				return ec.fieldContext_PokemonEvolutionMatchup_pokemonEvolutionByEvolvedSpeciesID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PokemonEvolutionMatchup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PokemonEvolution_pokemonEvolutionMatchupByEvolvedSpeciesID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_iD(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_pokemonID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_pokemonID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PokemonID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_pokemonID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_evolvesFromSpeciesID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_evolvesFromSpeciesID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvolvesFromSpeciesID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullInt64)
	fc.Result = res
	return ec.marshalONullInt642databaseᚋsqlᚐNullInt64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_evolvesFromSpeciesID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullInt64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_habitat(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_habitat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Habitat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*enum.PokemonEvolutionMatchupHabitat)
	fc.Result = res
	return ec.marshalOPokemonEvolutionMatchupHabitat2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋenumᚐPokemonEvolutionMatchupHabitat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_habitat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PokemonEvolutionMatchupHabitat does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_genderRate(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_genderRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GenderRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_genderRate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_captureRate(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_captureRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaptureRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_captureRate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_baseHappiness(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_baseHappiness(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseHappiness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_baseHappiness(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_active(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_pokemonByPokemonID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_pokemonByPokemonID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PokemonEvolutionMatchup().PokemonByPokemonID(rctx, obj, fc.Args["filter"].(*table.PokemonFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Pokemon)
	fc.Result = res
	return ec.marshalOPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_pokemonByPokemonID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Pokemon_iD(ctx, field)
			case "pokemonName":
				return ec.fieldContext_Pokemon_pokemonName(ctx, field)
			case "pokemonHeight":
				return ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
			case "pokemonWeight":
				return ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
			case "pokemonBaseExperience":
				return ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
			case "active":
				return ec.fieldContext_Pokemon_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Pokemon_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Pokemon_updatedAt(ctx, field)
			case "baseStatsByFkPokemon":
				return ec.fieldContext_Pokemon_baseStatsByFkPokemon(ctx, field)
			case "pokemonAbilitiesByFkPokemon":
				return ec.fieldContext_Pokemon_pokemonAbilitiesByFkPokemon(ctx, field)
			case "pokemonEvolutionMatchupByPokemonID":
				return ec.fieldContext_Pokemon_pokemonEvolutionMatchupByPokemonID(ctx, field)
			case "pokemonTypesByPokemonID":
				return ec.fieldContext_Pokemon_pokemonTypesByPokemonID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pokemon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PokemonEvolutionMatchup_pokemonByPokemonID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PokemonEvolutionMatchup_pokemonEvolutionByEvolvedSpeciesID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonEvolutionMatchup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonEvolutionMatchup_pokemonEvolutionByEvolvedSpeciesID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PokemonEvolutionMatchup().PokemonEvolutionByEvolvedSpeciesID(rctx, obj, fc.Args["filter"].(*table.PokemonEvolutionFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonEvolution)
	fc.Result = res
	return ec.marshalNListPokemonEvolution2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonEvolutionMatchup_pokemonEvolutionByEvolvedSpeciesID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonEvolutionMatchup",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonEvolution_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonEvolution_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonEvolution", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PokemonEvolutionMatchup_pokemonEvolutionByEvolvedSpeciesID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_iD(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_pokemonID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_pokemonID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PokemonID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_pokemonID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_typeID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_typeID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_typeID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_slot(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_slot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_slot(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_active(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_pokemonByPokemonID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_pokemonByPokemonID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PokemonTypes().PokemonByPokemonID(rctx, obj, fc.Args["filter"].(*table.PokemonFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Pokemon)
	fc.Result = res
	return ec.marshalOPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_pokemonByPokemonID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Pokemon_iD(ctx, field)
			case "pokemonName":
				return ec.fieldContext_Pokemon_pokemonName(ctx, field)
			case "pokemonHeight":
				return ec.fieldContext_Pokemon_pokemonHeight(ctx, field)
			case "pokemonWeight":
				return ec.fieldContext_Pokemon_pokemonWeight(ctx, field)
			case "pokemonBaseExperience":
				return ec.fieldContext_Pokemon_pokemonBaseExperience(ctx, field)
			case "active":
				return ec.fieldContext_Pokemon_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Pokemon_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Pokemon_updatedAt(ctx, field)
			case "baseStatsByFkPokemon":
				return ec.fieldContext_Pokemon_baseStatsByFkPokemon(ctx, field)
			case "pokemonAbilitiesByFkPokemon":
				return ec.fieldContext_Pokemon_pokemonAbilitiesByFkPokemon(ctx, field)
			case "pokemonEvolutionMatchupByPokemonID":
				return ec.fieldContext_Pokemon_pokemonEvolutionMatchupByPokemonID(ctx, field)
			case "pokemonTypesByPokemonID":
				return ec.fieldContext_Pokemon_pokemonTypesByPokemonID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pokemon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PokemonTypes_pokemonByPokemonID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PokemonTypes_typesByTypeID(ctx context.Context, field graphql.CollectedField, obj *table.PokemonTypes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PokemonTypes_typesByTypeID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PokemonTypes().TypesByTypeID(rctx, obj, fc.Args["filter"].(*table.TypesFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*table.Types)
	fc.Result = res
	return ec.marshalOTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PokemonTypes_typesByTypeID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PokemonTypes",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iD":
				return ec.fieldContext_Types_iD(ctx, field)
			case "typeName":
				return ec.fieldContext_Types_typeName(ctx, field)
			case "active":
				return ec.fieldContext_Types_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Types_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Types_updatedAt(ctx, field)
			case "pokemonTypesByTypeID":
				return ec.fieldContext_Types_pokemonTypesByTypeID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Types", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PokemonTypes_typesByTypeID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllPokemon(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findAllPokemon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindAllPokemon(rctx, fc.Args["filter"].(*table.PokemonFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemon)
	fc.Result = res
	return ec.marshalNListPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findAllPokemon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemon_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemon_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllPokemon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Types_iD(ctx context.Context, field graphql.CollectedField, obj *table.Types) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Types_iD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Types_iD(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Types",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Types_typeName(ctx context.Context, field graphql.CollectedField, obj *table.Types) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Types_typeName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Types_typeName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Types",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Types_active(ctx context.Context, field graphql.CollectedField, obj *table.Types) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Types_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Types_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Types",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Types_createdAt(ctx context.Context, field graphql.CollectedField, obj *table.Types) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Types_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Types_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Types",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Types_updatedAt(ctx context.Context, field graphql.CollectedField, obj *table.Types) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Types_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(sql.NullTime)
	fc.Result = res
	return ec.marshalONullTime2databaseᚋsqlᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Types_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Types",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Types_pokemonTypesByTypeID(ctx context.Context, field graphql.CollectedField, obj *table.Types) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Types_pokemonTypesByTypeID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Types().PokemonTypesByTypeID(rctx, obj, fc.Args["filter"].(*table.PokemonTypesFilter), fc.Args["pagination"].(*internal.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*table.ListPokemonTypes)
	fc.Result = res
	return ec.marshalNListPokemonTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonTypes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Types_pokemonTypesByTypeID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Types",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ListPokemonTypes_totalCount(ctx, field)
			case "data":
				return ec.fieldContext_ListPokemonTypes_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListPokemonTypes", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Types_pokemonTypesByTypeID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_isOneOf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOneOf(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAbilitiesCreate(ctx context.Context, obj any) (table.AbilitiesCreate, error) {
	var it table.AbilitiesCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"abilityName"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "abilityName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abilityName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AbilityName = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAbilitiesFilter(ctx context.Context, obj any) (table.AbilitiesFilter, error) {
	var it table.AbilitiesFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "abilityName", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "abilityName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abilityName"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.AbilityName = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAbilitiesUpdate(ctx context.Context, obj any) (table.AbilitiesUpdate, error) {
	var it table.AbilitiesUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"abilityName", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "abilityName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abilityName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AbilityName = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBaseStatsCreate(ctx context.Context, obj any) (table.BaseStatsCreate, error) {
	var it table.BaseStatsCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"fkPokemon", "bHp", "bAtk", "bDef", "bSpAtk", "bSpDef", "bSpeed"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "fkPokemon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkPokemon"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkPokemon = data
		case "bHp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bHp"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BHp = data
		case "bAtk":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bAtk"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BAtk = data
		case "bDef":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bDef"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BDef = data
		case "bSpAtk":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpAtk"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpAtk = data
		case "bSpDef":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpDef"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpDef = data
		case "bSpeed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpeed"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpeed = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBaseStatsFilter(ctx context.Context, obj any) (table.BaseStatsFilter, error) {
	var it table.BaseStatsFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "fkPokemon", "bHp", "bAtk", "bDef", "bSpAtk", "bSpDef", "bSpeed", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "fkPokemon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkPokemon"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkPokemon = data
		case "bHp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bHp"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.BHp = data
		case "bAtk":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bAtk"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.BAtk = data
		case "bDef":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bDef"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.BDef = data
		case "bSpAtk":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpAtk"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpAtk = data
		case "bSpDef":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpDef"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpDef = data
		case "bSpeed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpeed"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpeed = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBaseStatsUpdate(ctx context.Context, obj any) (table.BaseStatsUpdate, error) {
	var it table.BaseStatsUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"fkPokemon", "bHp", "bAtk", "bDef", "bSpAtk", "bSpDef", "bSpeed", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "fkPokemon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkPokemon"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkPokemon = data
		case "bHp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bHp"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BHp = data
		case "bAtk":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bAtk"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BAtk = data
		case "bDef":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bDef"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BDef = data
		case "bSpAtk":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpAtk"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpAtk = data
		case "bSpDef":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpDef"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpDef = data
		case "bSpeed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bSpeed"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BSpeed = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPagination(ctx context.Context, obj any) (internal.Pagination, error) {
	var it internal.Pagination
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "perPage", "sort"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "perPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PerPage = data
		case "sort":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sort = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonAbilitiesCreate(ctx context.Context, obj any) (table.PokemonAbilitiesCreate, error) {
	var it table.PokemonAbilitiesCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"fkPokemon", "fkAbility", "isHidden", "slot"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "fkPokemon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkPokemon"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkPokemon = data
		case "fkAbility":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkAbility"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkAbility = data
		case "isHidden":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isHidden"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsHidden = data
		case "slot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slot"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slot = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonAbilitiesFilter(ctx context.Context, obj any) (table.PokemonAbilitiesFilter, error) {
	var it table.PokemonAbilitiesFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "fkPokemon", "fkAbility", "isHidden", "slot", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "fkPokemon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkPokemon"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkPokemon = data
		case "fkAbility":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkAbility"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkAbility = data
		case "isHidden":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isHidden"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsHidden = data
		case "slot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slot"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slot = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonAbilitiesUpdate(ctx context.Context, obj any) (table.PokemonAbilitiesUpdate, error) {
	var it table.PokemonAbilitiesUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"fkPokemon", "fkAbility", "isHidden", "slot", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "fkPokemon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkPokemon"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkPokemon = data
		case "fkAbility":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkAbility"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.FkAbility = data
		case "isHidden":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isHidden"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsHidden = data
		case "slot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slot"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slot = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonCreate(ctx context.Context, obj any) (table.PokemonCreate, error) {
	var it table.PokemonCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pokemonName", "pokemonHeight", "pokemonWeight", "pokemonBaseExperience"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pokemonName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonName = data
		case "pokemonHeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonHeight"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonHeight = data
		case "pokemonWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonWeight"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonWeight = data
		case "pokemonBaseExperience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonBaseExperience"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonBaseExperience = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonEvolutionCreate(ctx context.Context, obj any) (table.PokemonEvolutionCreate, error) {
	var it table.PokemonEvolutionCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"evolvedSpeciesID", "evolMinimumLevel"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "evolvedSpeciesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolvedSpeciesID"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolvedSpeciesID = data
		case "evolMinimumLevel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolMinimumLevel"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolMinimumLevel = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonEvolutionFilter(ctx context.Context, obj any) (table.PokemonEvolutionFilter, error) {
	var it table.PokemonEvolutionFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "evolvedSpeciesID", "evolMinimumLevel", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "evolvedSpeciesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolvedSpeciesID"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolvedSpeciesID = data
		case "evolMinimumLevel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolMinimumLevel"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolMinimumLevel = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonEvolutionMatchupCreate(ctx context.Context, obj any) (table.PokemonEvolutionMatchupCreate, error) {
	var it table.PokemonEvolutionMatchupCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pokemonID", "evolvesFromSpeciesID", "habitat", "genderRate", "captureRate", "baseHappiness"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pokemonID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonID"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonID = data
		case "evolvesFromSpeciesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolvesFromSpeciesID"))
			data, err := ec.unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolvesFromSpeciesID = data
		case "habitat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("habitat"))
			data, err := ec.unmarshalOPokemonEvolutionMatchupHabitat2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋenumᚐPokemonEvolutionMatchupHabitat(ctx, v)
			if err != nil {
				return it, err
			}
			it.Habitat = data
		case "genderRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderRate"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderRate = data
		case "captureRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("captureRate"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.CaptureRate = data
		case "baseHappiness":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseHappiness"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseHappiness = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonEvolutionMatchupFilter(ctx context.Context, obj any) (table.PokemonEvolutionMatchupFilter, error) {
	var it table.PokemonEvolutionMatchupFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "pokemonID", "evolvesFromSpeciesID", "habitat", "genderRate", "captureRate", "baseHappiness", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "pokemonID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonID"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonID = data
		case "evolvesFromSpeciesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolvesFromSpeciesID"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolvesFromSpeciesID = data
		case "habitat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("habitat"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Habitat = data
		case "genderRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderRate"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderRate = data
		case "captureRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("captureRate"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CaptureRate = data
		case "baseHappiness":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseHappiness"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseHappiness = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonEvolutionMatchupUpdate(ctx context.Context, obj any) (table.PokemonEvolutionMatchupUpdate, error) {
	var it table.PokemonEvolutionMatchupUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pokemonID", "evolvesFromSpeciesID", "habitat", "genderRate", "captureRate", "baseHappiness", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pokemonID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonID = data
		case "evolvesFromSpeciesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolvesFromSpeciesID"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolvesFromSpeciesID = data
		case "habitat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("habitat"))
			data, err := ec.unmarshalOPokemonEvolutionMatchupHabitat2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋenumᚐPokemonEvolutionMatchupHabitat(ctx, v)
			if err != nil {
				return it, err
			}
			it.Habitat = data
		case "genderRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genderRate"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.GenderRate = data
		case "captureRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("captureRate"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CaptureRate = data
		case "baseHappiness":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseHappiness"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseHappiness = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonEvolutionUpdate(ctx context.Context, obj any) (table.PokemonEvolutionUpdate, error) {
	var it table.PokemonEvolutionUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"evolvedSpeciesID", "evolMinimumLevel", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "evolvedSpeciesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolvedSpeciesID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolvedSpeciesID = data
		case "evolMinimumLevel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evolMinimumLevel"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EvolMinimumLevel = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonFilter(ctx context.Context, obj any) (table.PokemonFilter, error) {
	var it table.PokemonFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "pokemonName", "pokemonHeight", "pokemonWeight", "pokemonBaseExperience", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "pokemonName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonName"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonName = data
		case "pokemonHeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonHeight"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonHeight = data
		case "pokemonWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonWeight"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonWeight = data
		case "pokemonBaseExperience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonBaseExperience"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonBaseExperience = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonTypesCreate(ctx context.Context, obj any) (table.PokemonTypesCreate, error) {
	var it table.PokemonTypesCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pokemonID", "typeID", "slot"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pokemonID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonID"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonID = data
		case "typeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeID"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeID = data
		case "slot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slot"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slot = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonTypesFilter(ctx context.Context, obj any) (table.PokemonTypesFilter, error) {
	var it table.PokemonTypesFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "pokemonID", "typeID", "slot", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "pokemonID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonID"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonID = data
		case "typeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeID"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeID = data
		case "slot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slot"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slot = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonTypesUpdate(ctx context.Context, obj any) (table.PokemonTypesUpdate, error) {
	var it table.PokemonTypesUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pokemonID", "typeID", "slot", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pokemonID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonID = data
		case "typeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeID"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeID = data
		case "slot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slot"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slot = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPokemonUpdate(ctx context.Context, obj any) (table.PokemonUpdate, error) {
	var it table.PokemonUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pokemonName", "pokemonHeight", "pokemonWeight", "pokemonBaseExperience", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pokemonName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonName = data
		case "pokemonHeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonHeight"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonHeight = data
		case "pokemonWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonWeight"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonWeight = data
		case "pokemonBaseExperience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pokemonBaseExperience"))
			data, err := ec.unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PokemonBaseExperience = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTypesCreate(ctx context.Context, obj any) (table.TypesCreate, error) {
	var it table.TypesCreate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"typeName"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "typeName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeName = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTypesFilter(ctx context.Context, obj any) (table.TypesFilter, error) {
	var it table.TypesFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iD", "typeName", "active", "createdAt", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iD":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iD"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "typeName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeName"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeName = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTypesUpdate(ctx context.Context, obj any) (table.TypesUpdate, error) {
	var it table.TypesUpdate
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"typeName", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "typeName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeName = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var abilitiesImplementors = []string{"Abilities"}

func (ec *executionContext) _Abilities(ctx context.Context, sel ast.SelectionSet, obj *table.Abilities) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, abilitiesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Abilities")
		case "iD":
			out.Values[i] = ec._Abilities_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "abilityName":
			out.Values[i] = ec._Abilities_abilityName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "active":
			out.Values[i] = ec._Abilities_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Abilities_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Abilities_updatedAt(ctx, field, obj)
		case "pokemonAbilitiesByFkAbility":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Abilities_pokemonAbilitiesByFkAbility(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var baseStatsImplementors = []string{"BaseStats"}

func (ec *executionContext) _BaseStats(ctx context.Context, sel ast.SelectionSet, obj *table.BaseStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, baseStatsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BaseStats")
		case "iD":
			out.Values[i] = ec._BaseStats_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "fkPokemon":
			out.Values[i] = ec._BaseStats_fkPokemon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "bHp":
			out.Values[i] = ec._BaseStats_bHp(ctx, field, obj)
		case "bAtk":
			out.Values[i] = ec._BaseStats_bAtk(ctx, field, obj)
		case "bDef":
			out.Values[i] = ec._BaseStats_bDef(ctx, field, obj)
		case "bSpAtk":
			out.Values[i] = ec._BaseStats_bSpAtk(ctx, field, obj)
		case "bSpDef":
			out.Values[i] = ec._BaseStats_bSpDef(ctx, field, obj)
		case "bSpeed":
			out.Values[i] = ec._BaseStats_bSpeed(ctx, field, obj)
		case "active":
			out.Values[i] = ec._BaseStats_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._BaseStats_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BaseStats_updatedAt(ctx, field, obj)
		case "pokemonByFkPokemon":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BaseStats_pokemonByFkPokemon(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listAbilitiesImplementors = []string{"ListAbilities"}

func (ec *executionContext) _ListAbilities(ctx context.Context, sel ast.SelectionSet, obj *table.ListAbilities) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listAbilitiesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListAbilities")
		case "totalCount":
			out.Values[i] = ec._ListAbilities_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListAbilities_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listBaseStatsImplementors = []string{"ListBaseStats"}

func (ec *executionContext) _ListBaseStats(ctx context.Context, sel ast.SelectionSet, obj *table.ListBaseStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listBaseStatsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListBaseStats")
		case "totalCount":
			out.Values[i] = ec._ListBaseStats_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListBaseStats_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listPokemonImplementors = []string{"ListPokemon"}

func (ec *executionContext) _ListPokemon(ctx context.Context, sel ast.SelectionSet, obj *table.ListPokemon) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listPokemonImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListPokemon")
		case "totalCount":
			out.Values[i] = ec._ListPokemon_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListPokemon_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listPokemonAbilitiesImplementors = []string{"ListPokemonAbilities"}

func (ec *executionContext) _ListPokemonAbilities(ctx context.Context, sel ast.SelectionSet, obj *table.ListPokemonAbilities) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listPokemonAbilitiesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListPokemonAbilities")
		case "totalCount":
			out.Values[i] = ec._ListPokemonAbilities_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListPokemonAbilities_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listPokemonEvolutionImplementors = []string{"ListPokemonEvolution"}

func (ec *executionContext) _ListPokemonEvolution(ctx context.Context, sel ast.SelectionSet, obj *table.ListPokemonEvolution) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listPokemonEvolutionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListPokemonEvolution")
		case "totalCount":
			out.Values[i] = ec._ListPokemonEvolution_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListPokemonEvolution_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listPokemonEvolutionMatchupImplementors = []string{"ListPokemonEvolutionMatchup"}

func (ec *executionContext) _ListPokemonEvolutionMatchup(ctx context.Context, sel ast.SelectionSet, obj *table.ListPokemonEvolutionMatchup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listPokemonEvolutionMatchupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListPokemonEvolutionMatchup")
		case "totalCount":
			out.Values[i] = ec._ListPokemonEvolutionMatchup_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListPokemonEvolutionMatchup_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listPokemonTypesImplementors = []string{"ListPokemonTypes"}

func (ec *executionContext) _ListPokemonTypes(ctx context.Context, sel ast.SelectionSet, obj *table.ListPokemonTypes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listPokemonTypesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListPokemonTypes")
		case "totalCount":
			out.Values[i] = ec._ListPokemonTypes_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListPokemonTypes_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listTypesImplementors = []string{"ListTypes"}

func (ec *executionContext) _ListTypes(ctx context.Context, sel ast.SelectionSet, obj *table.ListTypes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listTypesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListTypes")
		case "totalCount":
			out.Values[i] = ec._ListTypes_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ListTypes_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pokemonImplementors = []string{"Pokemon"}

func (ec *executionContext) _Pokemon(ctx context.Context, sel ast.SelectionSet, obj *table.Pokemon) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pokemonImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Pokemon")
		case "iD":
			out.Values[i] = ec._Pokemon_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "pokemonName":
			out.Values[i] = ec._Pokemon_pokemonName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "pokemonHeight":
			out.Values[i] = ec._Pokemon_pokemonHeight(ctx, field, obj)
		case "pokemonWeight":
			out.Values[i] = ec._Pokemon_pokemonWeight(ctx, field, obj)
		case "pokemonBaseExperience":
			out.Values[i] = ec._Pokemon_pokemonBaseExperience(ctx, field, obj)
		case "active":
			out.Values[i] = ec._Pokemon_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Pokemon_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Pokemon_updatedAt(ctx, field, obj)
		case "baseStatsByFkPokemon":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Pokemon_baseStatsByFkPokemon(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "pokemonAbilitiesByFkPokemon":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Pokemon_pokemonAbilitiesByFkPokemon(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "pokemonEvolutionMatchupByPokemonID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Pokemon_pokemonEvolutionMatchupByPokemonID(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "pokemonTypesByPokemonID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Pokemon_pokemonTypesByPokemonID(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pokemonAbilitiesImplementors = []string{"PokemonAbilities"}

func (ec *executionContext) _PokemonAbilities(ctx context.Context, sel ast.SelectionSet, obj *table.PokemonAbilities) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pokemonAbilitiesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PokemonAbilities")
		case "iD":
			out.Values[i] = ec._PokemonAbilities_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "fkPokemon":
			out.Values[i] = ec._PokemonAbilities_fkPokemon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "fkAbility":
			out.Values[i] = ec._PokemonAbilities_fkAbility(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isHidden":
			out.Values[i] = ec._PokemonAbilities_isHidden(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "slot":
			out.Values[i] = ec._PokemonAbilities_slot(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "active":
			out.Values[i] = ec._PokemonAbilities_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._PokemonAbilities_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._PokemonAbilities_updatedAt(ctx, field, obj)
		case "pokemonByFkPokemon":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PokemonAbilities_pokemonByFkPokemon(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "abilitiesByFkAbility":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PokemonAbilities_abilitiesByFkAbility(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pokemonEvolutionImplementors = []string{"PokemonEvolution"}

func (ec *executionContext) _PokemonEvolution(ctx context.Context, sel ast.SelectionSet, obj *table.PokemonEvolution) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pokemonEvolutionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PokemonEvolution")
		case "iD":
			out.Values[i] = ec._PokemonEvolution_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "evolvedSpeciesID":
			out.Values[i] = ec._PokemonEvolution_evolvedSpeciesID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "evolMinimumLevel":
			out.Values[i] = ec._PokemonEvolution_evolMinimumLevel(ctx, field, obj)
		case "active":
			out.Values[i] = ec._PokemonEvolution_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._PokemonEvolution_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._PokemonEvolution_updatedAt(ctx, field, obj)
		case "pokemonEvolutionMatchupByEvolvedSpeciesID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PokemonEvolution_pokemonEvolutionMatchupByEvolvedSpeciesID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pokemonEvolutionMatchupImplementors = []string{"PokemonEvolutionMatchup"}

func (ec *executionContext) _PokemonEvolutionMatchup(ctx context.Context, sel ast.SelectionSet, obj *table.PokemonEvolutionMatchup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pokemonEvolutionMatchupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PokemonEvolutionMatchup")
		case "iD":
			out.Values[i] = ec._PokemonEvolutionMatchup_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "pokemonID":
			out.Values[i] = ec._PokemonEvolutionMatchup_pokemonID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "evolvesFromSpeciesID":
			out.Values[i] = ec._PokemonEvolutionMatchup_evolvesFromSpeciesID(ctx, field, obj)
		case "habitat":
			out.Values[i] = ec._PokemonEvolutionMatchup_habitat(ctx, field, obj)
		case "genderRate":
			out.Values[i] = ec._PokemonEvolutionMatchup_genderRate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "captureRate":
			out.Values[i] = ec._PokemonEvolutionMatchup_captureRate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "baseHappiness":
			out.Values[i] = ec._PokemonEvolutionMatchup_baseHappiness(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "active":
			out.Values[i] = ec._PokemonEvolutionMatchup_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._PokemonEvolutionMatchup_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._PokemonEvolutionMatchup_updatedAt(ctx, field, obj)
		case "pokemonByPokemonID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PokemonEvolutionMatchup_pokemonByPokemonID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "pokemonEvolutionByEvolvedSpeciesID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PokemonEvolutionMatchup_pokemonEvolutionByEvolvedSpeciesID(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pokemonTypesImplementors = []string{"PokemonTypes"}

func (ec *executionContext) _PokemonTypes(ctx context.Context, sel ast.SelectionSet, obj *table.PokemonTypes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pokemonTypesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PokemonTypes")
		case "iD":
			out.Values[i] = ec._PokemonTypes_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "pokemonID":
			out.Values[i] = ec._PokemonTypes_pokemonID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeID":
			out.Values[i] = ec._PokemonTypes_typeID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "slot":
			out.Values[i] = ec._PokemonTypes_slot(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "active":
			out.Values[i] = ec._PokemonTypes_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._PokemonTypes_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._PokemonTypes_updatedAt(ctx, field, obj)
		case "pokemonByPokemonID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PokemonTypes_pokemonByPokemonID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "typesByTypeID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PokemonTypes_typesByTypeID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "findAllPokemon":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllPokemon(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var typesImplementors = []string{"Types"}

func (ec *executionContext) _Types(ctx context.Context, sel ast.SelectionSet, obj *table.Types) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, typesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Types")
		case "iD":
			out.Values[i] = ec._Types_iD(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeName":
			out.Values[i] = ec._Types_typeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "active":
			out.Values[i] = ec._Types_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Types_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Types_updatedAt(ctx, field, obj)
		case "pokemonTypesByTypeID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Types_pokemonTypesByTypeID(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAbilities2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilities(ctx context.Context, sel ast.SelectionSet, v table.Abilities) graphql.Marshaler {
	return ec._Abilities(ctx, sel, &v)
}

func (ec *executionContext) marshalNAbilities2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesᚄ(ctx context.Context, sel ast.SelectionSet, v []table.Abilities) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAbilities2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilities(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBaseStats2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStats(ctx context.Context, sel ast.SelectionSet, v table.BaseStats) graphql.Marshaler {
	return ec._BaseStats(ctx, sel, &v)
}

func (ec *executionContext) marshalNBaseStats2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsᚄ(ctx context.Context, sel ast.SelectionSet, v []table.BaseStats) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBaseStats2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStats(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNListBaseStats2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListBaseStats(ctx context.Context, sel ast.SelectionSet, v table.ListBaseStats) graphql.Marshaler {
	return ec._ListBaseStats(ctx, sel, &v)
}

func (ec *executionContext) marshalNListBaseStats2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListBaseStats(ctx context.Context, sel ast.SelectionSet, v *table.ListBaseStats) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListBaseStats(ctx, sel, v)
}

func (ec *executionContext) marshalNListPokemon2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemon(ctx context.Context, sel ast.SelectionSet, v table.ListPokemon) graphql.Marshaler {
	return ec._ListPokemon(ctx, sel, &v)
}

func (ec *executionContext) marshalNListPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemon(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemon) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListPokemon(ctx, sel, v)
}

func (ec *executionContext) marshalNListPokemonAbilities2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonAbilities(ctx context.Context, sel ast.SelectionSet, v table.ListPokemonAbilities) graphql.Marshaler {
	return ec._ListPokemonAbilities(ctx, sel, &v)
}

func (ec *executionContext) marshalNListPokemonAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonAbilities(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemonAbilities) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListPokemonAbilities(ctx, sel, v)
}

func (ec *executionContext) marshalNListPokemonEvolution2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolution(ctx context.Context, sel ast.SelectionSet, v table.ListPokemonEvolution) graphql.Marshaler {
	return ec._ListPokemonEvolution(ctx, sel, &v)
}

func (ec *executionContext) marshalNListPokemonEvolution2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolution(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemonEvolution) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListPokemonEvolution(ctx, sel, v)
}

func (ec *executionContext) marshalNListPokemonEvolutionMatchup2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolutionMatchup(ctx context.Context, sel ast.SelectionSet, v table.ListPokemonEvolutionMatchup) graphql.Marshaler {
	return ec._ListPokemonEvolutionMatchup(ctx, sel, &v)
}

func (ec *executionContext) marshalNListPokemonEvolutionMatchup2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonEvolutionMatchup(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemonEvolutionMatchup) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListPokemonEvolutionMatchup(ctx, sel, v)
}

func (ec *executionContext) marshalNListPokemonTypes2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonTypes(ctx context.Context, sel ast.SelectionSet, v table.ListPokemonTypes) graphql.Marshaler {
	return ec._ListPokemonTypes(ctx, sel, &v)
}

func (ec *executionContext) marshalNListPokemonTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐListPokemonTypes(ctx context.Context, sel ast.SelectionSet, v *table.ListPokemonTypes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListPokemonTypes(ctx, sel, v)
}

func (ec *executionContext) marshalNPokemon2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx context.Context, sel ast.SelectionSet, v table.Pokemon) graphql.Marshaler {
	return ec._Pokemon(ctx, sel, &v)
}

func (ec *executionContext) marshalNPokemon2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonᚄ(ctx context.Context, sel ast.SelectionSet, v []table.Pokemon) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPokemon2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPokemonAbilities2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilities(ctx context.Context, sel ast.SelectionSet, v table.PokemonAbilities) graphql.Marshaler {
	return ec._PokemonAbilities(ctx, sel, &v)
}

func (ec *executionContext) marshalNPokemonAbilities2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesᚄ(ctx context.Context, sel ast.SelectionSet, v []table.PokemonAbilities) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPokemonAbilities2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilities(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPokemonEvolution2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolution(ctx context.Context, sel ast.SelectionSet, v table.PokemonEvolution) graphql.Marshaler {
	return ec._PokemonEvolution(ctx, sel, &v)
}

func (ec *executionContext) marshalNPokemonEvolution2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionᚄ(ctx context.Context, sel ast.SelectionSet, v []table.PokemonEvolution) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPokemonEvolution2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolution(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPokemonEvolutionMatchup2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchup(ctx context.Context, sel ast.SelectionSet, v table.PokemonEvolutionMatchup) graphql.Marshaler {
	return ec._PokemonEvolutionMatchup(ctx, sel, &v)
}

func (ec *executionContext) marshalNPokemonEvolutionMatchup2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupᚄ(ctx context.Context, sel ast.SelectionSet, v []table.PokemonEvolutionMatchup) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPokemonEvolutionMatchup2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPokemonTypes2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypes(ctx context.Context, sel ast.SelectionSet, v table.PokemonTypes) graphql.Marshaler {
	return ec._PokemonTypes(ctx, sel, &v)
}

func (ec *executionContext) marshalNPokemonTypes2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesᚄ(ctx context.Context, sel ast.SelectionSet, v []table.PokemonTypes) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPokemonTypes2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTypes2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypes(ctx context.Context, sel ast.SelectionSet, v table.Types) graphql.Marshaler {
	return ec._Types(ctx, sel, &v)
}

func (ec *executionContext) marshalNTypes2ᚕgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypesᚄ(ctx context.Context, sel ast.SelectionSet, v []table.Types) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTypes2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAbilities2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilities(ctx context.Context, sel ast.SelectionSet, v *table.Abilities) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Abilities(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐAbilitiesFilter(ctx context.Context, v any) (*table.AbilitiesFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAbilitiesFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBaseStatsFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐBaseStatsFilter(ctx context.Context, v any) (*table.BaseStatsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBaseStatsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx context.Context, v any) (internal.FilterOnField, error) {
	if v == nil {
		return nil, nil
	}
	var res internal.FilterOnField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFilterOnField2githubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐFilterOnField(ctx context.Context, sel ast.SelectionSet, v internal.FilterOnField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalONullInt642databaseᚋsqlᚐNullInt64(ctx context.Context, v any) (sql.NullInt64, error) {
	res, err := internal.UnmarshalNullInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONullInt642databaseᚋsqlᚐNullInt64(ctx context.Context, sel ast.SelectionSet, v sql.NullInt64) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := internal.MarshalNullInt64(v)
	return res
}

func (ec *executionContext) unmarshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx context.Context, v any) (*sql.NullInt64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := internal.UnmarshalNullInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONullInt642ᚖdatabaseᚋsqlᚐNullInt64(ctx context.Context, sel ast.SelectionSet, v *sql.NullInt64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := internal.MarshalNullInt64(*v)
	return res
}

func (ec *executionContext) unmarshalONullTime2databaseᚋsqlᚐNullTime(ctx context.Context, v any) (sql.NullTime, error) {
	res, err := internal.UnmarshalNullTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONullTime2databaseᚋsqlᚐNullTime(ctx context.Context, sel ast.SelectionSet, v sql.NullTime) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := internal.MarshalNullTime(v)
	return res
}

func (ec *executionContext) unmarshalOPagination2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋinternalᚐPagination(ctx context.Context, v any) (*internal.Pagination, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPagination(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPokemon2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemon(ctx context.Context, sel ast.SelectionSet, v *table.Pokemon) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Pokemon(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPokemonAbilitiesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonAbilitiesFilter(ctx context.Context, v any) (*table.PokemonAbilitiesFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPokemonAbilitiesFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPokemonEvolutionFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionFilter(ctx context.Context, v any) (*table.PokemonEvolutionFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPokemonEvolutionFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPokemonEvolutionMatchup2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchup(ctx context.Context, sel ast.SelectionSet, v *table.PokemonEvolutionMatchup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PokemonEvolutionMatchup(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPokemonEvolutionMatchupFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonEvolutionMatchupFilter(ctx context.Context, v any) (*table.PokemonEvolutionMatchupFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPokemonEvolutionMatchupFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPokemonEvolutionMatchupHabitat2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋenumᚐPokemonEvolutionMatchupHabitat(ctx context.Context, v any) (*enum.PokemonEvolutionMatchupHabitat, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(enum.PokemonEvolutionMatchupHabitat)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPokemonEvolutionMatchupHabitat2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋenumᚐPokemonEvolutionMatchupHabitat(ctx context.Context, sel ast.SelectionSet, v *enum.PokemonEvolutionMatchupHabitat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPokemonFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonFilter(ctx context.Context, v any) (*table.PokemonFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPokemonFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPokemonTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐPokemonTypesFilter(ctx context.Context, v any) (*table.PokemonTypesFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPokemonTypesFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTypes2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypes(ctx context.Context, sel ast.SelectionSet, v *table.Types) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Types(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTypesFilter2ᚖgithubᚗcomᚋketanᚑ10ᚋsql2gqlᚋexamplesᚋpokemonᚋsql2gqlᚋtableᚐTypesFilter(ctx context.Context, v any) (*table.TypesFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTypesFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
