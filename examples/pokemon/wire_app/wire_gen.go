// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire_app

import (
	"context"
	"github.com/google/wire"
	"github.com/ketan-10/sql2gql/examples/pokemon/graphql"
	"github.com/ketan-10/sql2gql/examples/pokemon/internal"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/repo"
	"github.com/ketan-10/sql2gql/examples/pokemon/sql2gql/rlts"
)

// Injectors from wire.go:

func GetApp(ctx context.Context) (*App, func(), error) {
	dbOptions := &internal.DBOptions{}
	db := internal.OpenConnection(ctx, dbOptions)
	abilitiesRepositoryQueryBuilder := &repo.AbilitiesRepositoryQueryBuilder{}
	abilitiesRepository := &repo.AbilitiesRepository{
		DB:           db,
		QueryBuilder: abilitiesRepositoryQueryBuilder,
	}
	pokemonAbilitiesRepositoryQueryBuilder := &repo.PokemonAbilitiesRepositoryQueryBuilder{}
	pokemonAbilitiesRepository := &repo.PokemonAbilitiesRepository{
		DB:           db,
		QueryBuilder: pokemonAbilitiesRepositoryQueryBuilder,
	}
	abilitiesRltsRepository := &rlts.AbilitiesRltsRepository{
		PokemonAbilitiesRepository: pokemonAbilitiesRepository,
	}
	baseStatsRepositoryQueryBuilder := &repo.BaseStatsRepositoryQueryBuilder{}
	baseStatsRepository := &repo.BaseStatsRepository{
		DB:           db,
		QueryBuilder: baseStatsRepositoryQueryBuilder,
	}
	pokemonRepositoryQueryBuilder := &repo.PokemonRepositoryQueryBuilder{}
	pokemonRepository := &repo.PokemonRepository{
		DB:           db,
		QueryBuilder: pokemonRepositoryQueryBuilder,
	}
	baseStatsRltsRepository := &rlts.BaseStatsRltsRepository{
		PokemonRepository: pokemonRepository,
	}
	pokemonEvolutionMatchupRepositoryQueryBuilder := &repo.PokemonEvolutionMatchupRepositoryQueryBuilder{}
	pokemonEvolutionMatchupRepository := &repo.PokemonEvolutionMatchupRepository{
		DB:           db,
		QueryBuilder: pokemonEvolutionMatchupRepositoryQueryBuilder,
	}
	pokemonTypesRepositoryQueryBuilder := &repo.PokemonTypesRepositoryQueryBuilder{}
	pokemonTypesRepository := &repo.PokemonTypesRepository{
		DB:           db,
		QueryBuilder: pokemonTypesRepositoryQueryBuilder,
	}
	pokemonRltsRepository := &rlts.PokemonRltsRepository{
		BaseStatsRepository:               baseStatsRepository,
		PokemonAbilitiesRepository:        pokemonAbilitiesRepository,
		PokemonEvolutionMatchupRepository: pokemonEvolutionMatchupRepository,
		PokemonTypesRepository:            pokemonTypesRepository,
	}
	pokemonAbilitiesRltsRepository := &rlts.PokemonAbilitiesRltsRepository{
		PokemonRepository:   pokemonRepository,
		AbilitiesRepository: abilitiesRepository,
	}
	pokemonEvolutionRepositoryQueryBuilder := &repo.PokemonEvolutionRepositoryQueryBuilder{}
	pokemonEvolutionRepository := &repo.PokemonEvolutionRepository{
		DB:           db,
		QueryBuilder: pokemonEvolutionRepositoryQueryBuilder,
	}
	pokemonEvolutionRltsRepository := &rlts.PokemonEvolutionRltsRepository{
		PokemonEvolutionMatchupRepository: pokemonEvolutionMatchupRepository,
	}
	pokemonEvolutionMatchupRltsRepository := &rlts.PokemonEvolutionMatchupRltsRepository{
		PokemonRepository:          pokemonRepository,
		PokemonEvolutionRepository: pokemonEvolutionRepository,
	}
	typesRepositoryQueryBuilder := &repo.TypesRepositoryQueryBuilder{}
	typesRepository := &repo.TypesRepository{
		DB:           db,
		QueryBuilder: typesRepositoryQueryBuilder,
	}
	pokemonTypesRltsRepository := &rlts.PokemonTypesRltsRepository{
		PokemonRepository: pokemonRepository,
		TypesRepository:   typesRepository,
	}
	typesRltsRepository := &rlts.TypesRltsRepository{
		PokemonTypesRepository: pokemonTypesRepository,
	}
	goResolver := sql2gql.GoResolver{
		IAbilitiesRepository:                   abilitiesRepository,
		IAbilitiesRltsRepository:               abilitiesRltsRepository,
		IBaseStatsRepository:                   baseStatsRepository,
		IBaseStatsRltsRepository:               baseStatsRltsRepository,
		IPokemonRepository:                     pokemonRepository,
		IPokemonRltsRepository:                 pokemonRltsRepository,
		IPokemonAbilitiesRepository:            pokemonAbilitiesRepository,
		IPokemonAbilitiesRltsRepository:        pokemonAbilitiesRltsRepository,
		IPokemonEvolutionRepository:            pokemonEvolutionRepository,
		IPokemonEvolutionRltsRepository:        pokemonEvolutionRltsRepository,
		IPokemonEvolutionMatchupRepository:     pokemonEvolutionMatchupRepository,
		IPokemonEvolutionMatchupRltsRepository: pokemonEvolutionMatchupRltsRepository,
		IPokemonTypesRepository:                pokemonTypesRepository,
		IPokemonTypesRltsRepository:            pokemonTypesRltsRepository,
		ITypesRepository:                       typesRepository,
		ITypesRltsRepository:                   typesRltsRepository,
	}
	resolver := &graphql.Resolver{
		GoResolver: goResolver,
	}
	app := &App{
		Resolver: resolver,
	}
	return app, func() {
	}, nil
}

// wire.go:

type App struct {
	Resolver *graphql.Resolver
}

var globalSet = wire.NewSet(sql2gql.NewRepositorySet, sql2gql.NewGoResolver, wire.Struct(new(App), "*"), wire.Struct(new(graphql.Resolver), "*"), internal.NewDB)
