# Code generated by sql2gql. DO NOT EDIT.


type Query {
  {{- range . -}}
    {{- $tableNameCamel := camelCase .Table.TableName }}

    # table --> {{ $tableNameCamel }}
    findAll{{ $tableNameCamel }}(filter: {{ $tableNameCamel }}Filter, pagination: Pagination): List{{ $tableNameCamel }}!

    # Indexes
    {{- range .Indexes -}}
      {{- if .IsUnique }}
    {{ camelCaseVar $tableNameCamel }}By{{range .Columns}}{{camelCase .ColumnName}}{{end}}(
        {{- range .Columns }} {{ camelCaseVar .ColumnName }}: {{ .Column.GraphQLType }}{{- if .Column.NotNullable }}!{{- end }},{{- end -}}
    filter: {{ $tableNameCamel }}Filter): {{ $tableNameCamel }}
      {{- else }}
    {{ camelCaseVar $tableNameCamel }}By{{range .Columns}}{{camelCase .ColumnName}}{{end}}(
        {{- range .Columns }} {{ camelCaseVar .ColumnName }}: {{ .Column.GraphQLType }}{{- if .Column.NotNullable }}!{{- end }},{{- end -}}
    filter: {{ $tableNameCamel }}Filter, pagination: Pagination): List{{ $tableNameCamel }}
        
    {{- end }}

    {{- end}}
  {{- end }}
}


type Mutation {
  {{range .}}
    {{ $tableNameCamel := camelCase .Table.TableName -}}
    {{- $shortName := shortName $tableNameCamel -}}
    
    {{ $idType := "Int" }}
    {{- range .Table.Columns }}
        {{- if eq .ColumnName "id" }}
            {{- $idType = .GraphQLType }}
        {{- end}}
    {{- end -}}

    insert{{ $tableNameCamel }}(data: {{ $tableNameCamel }}Create!): {{ $tableNameCamel }}
    update{{ $tableNameCamel }}ByFields(id: {{ $idType }}!, data: {{ $tableNameCamel }}Update!): {{ $tableNameCamel }}
    delete{{ $tableNameCamel }}ByID(id: {{ $idType }}!): Boolean!
  {{ end }}

}

